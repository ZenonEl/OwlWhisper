package core

import (
	"context"
	"fmt"
	"log"
	"time"

	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/mdns"
	"github.com/libp2p/go-libp2p/p2p/discovery/routing"
)

// DISCOVERY_TAG - "—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ" –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ mDNS
const DISCOVERY_TAG = "owl-whisper-mdns"

// DiscoveryNotifee –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ç–∏
type DiscoveryNotifee struct {
	node host.Host
	ctx  context.Context
}

// HandlePeerFound –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ mDNS –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
func (n *DiscoveryNotifee) HandlePeerFound(pi peer.AddrInfo) {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
	if pi.ID == n.node.ID() {
		return
	}
	log.Printf("üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: %s", pi.ID.String())

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
	err := n.node.Connect(n.ctx, pi)
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", pi.ID.String(), err)
	} else {
		log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s", pi.ID.String())
	}
}

// DiscoveryManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
type DiscoveryManager struct {
	mdnsService      mdns.Service
	dht              *dht.IpfsDHT
	routingDiscovery *routing.RoutingDiscovery
	notifee          *DiscoveryNotifee
	ctx              context.Context
}

// NewDiscoveryManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func NewDiscoveryManager(ctx context.Context, node host.Host) *DiscoveryManager {
	notifee := &DiscoveryNotifee{
		node: node,
		ctx:  ctx,
	}

	// –°–æ–∑–¥–∞–µ–º mDNS —Å–µ—Ä–≤–∏—Å
	mdnsService := mdns.NewMdnsService(node, DISCOVERY_TAG, notifee)

	// –°–æ–∑–¥–∞–µ–º DHT
	kadDHT, err := dht.New(ctx, node)
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DHT: %v", err)
	} else {
		log.Printf("‚úÖ DHT —Å–æ–∑–¥–∞–Ω")
	}

	// –°–æ–∑–¥–∞–µ–º routing discovery
	var routingDiscovery *routing.RoutingDiscovery
	if kadDHT != nil {
		routingDiscovery = routing.NewRoutingDiscovery(kadDHT)
		log.Printf("‚úÖ Routing discovery —Å–æ–∑–¥–∞–Ω")
	}

	return &DiscoveryManager{
		mdnsService:      mdnsService,
		dht:              kadDHT,
		routingDiscovery: routingDiscovery,
		notifee:          notifee,
		ctx:              ctx,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func (dm *DiscoveryManager) Start() error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º mDNS discovery
	if err := dm.mdnsService.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å mDNS: %w", err)
	}
	log.Println("üì° –°–µ—Ä–≤–∏—Å mDNS –∑–∞–ø—É—â–µ–Ω. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º DHT discovery –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
	if dm.dht != nil && dm.routingDiscovery != nil {
		go dm.startDHTDiscovery()
		log.Println("üåê DHT discovery –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏")
	}

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func (dm *DiscoveryManager) Stop() error {
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mDNS
	if dm.mdnsService != nil {
		dm.mdnsService.Close()
	}

	// TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ DHT discovery

	return nil
}

// startDHTDiscovery –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DHT
func (dm *DiscoveryManager) startDHTDiscovery() {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ bootstrap —É–∑–ª–∞–º
	log.Println("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap —É–∑–ª–∞–º...")
	if err := dm.dht.Bootstrap(dm.ctx); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap —É–∑–ª–∞–º: %v", err)
		return
	}
	log.Println("‚úÖ Bootstrap –∑–∞–≤–µ—Ä—à–µ–Ω")

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(2 * time.Second)

	// –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
	ttl, err := dm.routingDiscovery.Advertise(dm.ctx, "owl-whisper-global-rendezvous")
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %v", err)
	} else {
		log.Printf("üì¢ –ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, TTL: %v", ttl)
	}

	// –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	log.Println("üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
	peerChan, err := dm.routingDiscovery.FindPeers(dm.ctx, "owl-whisper-global-rendezvous")
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %v", err)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	for p := range peerChan {
		if p.ID == dm.notifee.node.ID() {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è
		}
		log.Printf("üåê –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %s", p.ID.ShortString())

		// –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞ –≤ notifee –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		dm.notifee.HandlePeerFound(p)
	}
}
