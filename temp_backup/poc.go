package main

import (
	"bufio"
	"context"
	"flag"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/routing"
	"github.com/multiformats/go-multiaddr"
)

// PROTOCOL_ID - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞—à–µ–≥–æ —á–∞—Ç-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
const PROTOCOL_ID = "/owl-whisper/1.0.0"

// DISCOVERY_TAG - —ç—Ç–æ "—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ", –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞—à–∏ —É–∑–ª—ã –±—É–¥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ —Å–µ—Ç–∏
const DISCOVERY_TAG = "owl-whisper-rendezvous-point"

func handleStream(stream network.Stream) {
	log.Println("–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—Ç", stream.Conn().RemotePeer().String())
	// –°–æ–∑–¥–∞–µ–º 'reader' –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Ç–æ–∫–∞
	reader := bufio.NewReader(stream)
	for {
		// –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
		str, err := reader.ReadString('\n')
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞:", err)
			stream.Close()
			return
		}
		// –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fmt.Printf("üì• –û—Ç %s: %s", stream.Conn().RemotePeer().ShortString(), str)
	}
}

func main() {
	// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–∞ libp2p ---
	destAddr := flag.String("d", "", "–ê–¥—Ä–µ—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)")
	flag.Parse()

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª libp2p. –≠—Ç–æ —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å.
	// –ú—ã –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ NAT.
	node, err := libp2p.New(
		// –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –æ–±—Ö–æ–¥ NAT
		libp2p.EnableNATService(),
		// –í–∫–ª—é—á–∏—Ç—å "–ø—Ä–æ–±–∏–≤–∞–Ω–∏–µ –¥—ã—Ä" –≤ NAT (Hole Punching)
		libp2p.EnableHolePunching(),
		// –í–∫–ª—é—á–∏—Ç—å —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é (Relay) –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
		libp2p.EnableRelay(),
	)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–∑–µ–ª libp2p: %v", err)
	}

	log.Printf("‚úÖ –£–∑–µ–ª —Å–æ–∑–¥–∞–Ω. –í–∞—à PeerID: %s\n", node.ID().String())
	log.Println("–ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:")
	for _, addr := range node.Addrs() {
		fmt.Printf("  %s/p2p/%s\n", addr, node.ID().String())
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
	node.SetStreamHandler(PROTOCOL_ID, handleStream)

	// --- –ó–∞–ø—É—Å–∫ DHT –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —É–∑–ª–æ–≤ ---
	go startDHT(ctx, node)

	// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å) ---
	if *destAddr != "" {
		go connectDirectly(ctx, node, *destAddr)
	}

	// --- –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		message := scanner.Text()
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º, —Å –∫–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		for _, p := range node.Network().Peers() {
			stream, err := node.NewStream(ctx, p, PROTOCOL_ID)
			if err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫ –∫ %s: %v\n", p.ShortString(), err)
				continue
			}
			_, err = stream.Write([]byte(message + "\n"))
			if err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ %s: %v\n", p.ShortString(), err)
			}
			log.Printf("üì§ –í–∞–º -> %s: %s", p.ShortString(), message)
			stream.Close() // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
		}
	}
}

func startDHT(ctx context.Context, node host.Host) {
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DHT-–∫–ª–∏–µ–Ω—Ç
	kadDHT, err := dht.New(ctx, node)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DHT: %v", err)
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ bootstrap-—É–∑–ª–∞–º IPFS
	log.Println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap-—É–∑–ª–∞–º...")
	if err = kadDHT.Bootstrap(ctx); err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap-—É–∑–ª–∞–º: %v", err)
	}

	// –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —É–∑–ª–æ–≤
	log.Println("–ò—â–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ç–∏...")
	routingDiscovery := routing.NewRoutingDiscovery(kadDHT)
	routingDiscovery.Advertise(ctx, DISCOVERY_TAG) // "–ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º" —Å–µ–±—è –≤ —Å–µ—Ç–∏

	// –ò—â–µ–º –¥—Ä—É–≥–∏—Ö, –∫—Ç–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª —Å–µ–±—è —Å —Ç–µ–º –∂–µ —Ç–µ–≥–æ–º
	peerChan, err := routingDiscovery.FindPeers(ctx, DISCOVERY_TAG)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∏—Ä–æ–≤: %v", err)
	}

	for p := range peerChan {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
		if p.ID == node.ID() {
			continue
		}
		log.Printf("–ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫: %s. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...\n", p.ID.String())
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. libp2p —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å NAT.
		if err := node.Connect(ctx, p); err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v\n", p.ID.String(), err)
		} else {
			log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s\n", p.ID.String())
		}
	}
}

func connectDirectly(ctx context.Context, node host.Host, destAddr string) {
	log.Printf("–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s", destAddr)
	maddr, err := multiaddr.NewMultiaddr(destAddr)
	if err != nil {
		log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç multiaddr: %v", err)
		return
	}
	pinfo, err := peer.AddrInfoFromP2pAddr(maddr)
	if err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å AddrInfo: %v", err)
		return
	}
	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π —É–∑–µ–ª —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
	time.Sleep(2 * time.Second)
	if err := node.Connect(ctx, *pinfo); err != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", destAddr, err)
	} else {
		log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s", destAddr)
	}
}
