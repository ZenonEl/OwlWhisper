package core

import (
	"bufio"
	"context"
	"fmt"
	"log"

	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/multiformats/go-multiaddr"
)

// PROTOCOL_ID - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞—à–µ–≥–æ —á–∞—Ç-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
const PROTOCOL_ID = "/owl-whisper/1.0.0"

// NetworkEventLogger –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è —Å–µ—Ç–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
type NetworkEventLogger struct{}

// Listen –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ç–∏
func (nel *NetworkEventLogger) Listen(network.Network, multiaddr.Multiaddr) {}

// ListenClose –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
func (nel *NetworkEventLogger) ListenClose(network.Network, multiaddr.Multiaddr) {}

// Connected –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
func (nel *NetworkEventLogger) Connected(net network.Network, conn network.Conn) {
	log.Printf("üîó EVENT: –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s", conn.RemotePeer().ShortString())
}

// Disconnected –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func (nel *NetworkEventLogger) Disconnected(net network.Network, conn network.Conn) {
	log.Printf("üîå EVENT: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ", conn.RemotePeer().ShortString())
}

// OpenedStream –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ—Ç–æ–∫–∞
func (nel *NetworkEventLogger) OpenedStream(net network.Network, stream network.Stream) {}

// ClosedStream –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ—Ç–æ–∫–∞
func (nel *NetworkEventLogger) ClosedStream(net network.Network, stream network.Stream) {}

// Node –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π libp2p —É–∑–µ–ª
type Node struct {
	host host.Host
	ctx  context.Context
}

// NewNode —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π libp2p —É–∑–µ–ª
func NewNode(ctx context.Context) (*Node, error) {
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª libp2p —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
	opts := []libp2p.Option{
		// –í–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
		// –≤–Ω–µ—à–Ω–µ–≥–æ IP –∏ —Ä–∞–±–æ—Ç—ã —Å NAT (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç STUN)
		libp2p.EnableNATService(),

		// –í–∫–ª—é—á–∞–µ–º "–ø—Ä–æ–±–∏–≤–∞–Ω–∏–µ –¥—ã—Ä" –≤ NAT. –≠—Ç–æ –∏ –µ—Å—Ç—å hole punching
		libp2p.EnableHolePunching(),

		// –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Relay V2. –≠—Ç–æ –Ω–∞—à fallback.
		// –û–ø—Ü–∏—è listen –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω–∞—à —É–∑–µ–ª –º–æ–∂–µ—Ç —Å–∞–º –≤—ã—Å—Ç—É–ø–∞—Ç—å
		// —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä–æ–º –¥–ª—è –¥—Ä—É–≥–∏—Ö (–ø–æ–º–æ–≥–∞–µ—Ç —Å–µ—Ç–∏)
		libp2p.EnableRelay(),
	}

	h, err := libp2p.New(opts...)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–∑–µ–ª libp2p: %w", err)
	}

	node := &Node{
		host: h,
		ctx:  ctx,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
	h.SetStreamHandler(PROTOCOL_ID, node.handleStream)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Network Notifiee –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ç–∏
	h.Network().Notify(&NetworkEventLogger{})

	log.Printf("‚úÖ –£–∑–µ–ª —Å–æ–∑–¥–∞–Ω. –í–∞—à PeerID: %s", h.ID().String())
	log.Println("–ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:")
	for _, addr := range h.Addrs() {
		fmt.Printf("  %s/p2p/%s\n", addr, h.ID().String())
	}

	return node, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∑–µ–ª
func (n *Node) Start() error {
	log.Println("üöÄ –£–∑–µ–ª –∑–∞–ø—É—â–µ–Ω")
	return nil
}

// Close –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∑–µ–ª
func (n *Node) Close() error {
	return n.host.Close()
}

// GetHost –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç libp2p host
func (n *Node) GetHost() host.Host {
	return n.host
}

// GetPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (n *Node) GetPeers() []peer.ID {
	return n.host.Network().Peers()
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
func (n *Node) SendMessage(peerID peer.ID, message string) error {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	stream, err := n.host.NewStream(n.ctx, peerID, PROTOCOL_ID)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫ –∫ %s: %w", peerID.ShortString(), err)
	}
	defer stream.Close()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = stream.Write([]byte(message + "\n"))
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ %s: %w", peerID.ShortString(), err)
	}

	log.Printf("üì§ –í–∞–º -> %s: %s", peerID.ShortString(), message)
	return nil
}

// BroadcastMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (n *Node) BroadcastMessage(message string) {
	peers := n.GetPeers()
	if len(peers) == 0 {
		log.Println("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
		return
	}

	for _, p := range peers {
		if err := n.SendMessage(p, message); err != nil {
			log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ %s: %v", p.ShortString(), err)
		}
	}
}

// handleStream –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏
func (n *Node) handleStream(stream network.Stream) {
	remotePeer := stream.Conn().RemotePeer()
	log.Printf("‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—Ç %s", remotePeer.String())

	// –°–æ–∑–¥–∞–µ–º 'reader' –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Ç–æ–∫–∞
	reader := bufio.NewReader(stream)
	for {
		// –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
		str, err := reader.ReadString('\n')
		if err != nil {
			// –û—à–∏–±–∫–∞ EOF –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫—Ä—ã–ª –ø–æ—Ç–æ–∫. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
			stream.Close()
			return
		}
		// –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fmt.Printf("üì• –û—Ç %s: %s", remotePeer.ShortString(), str)
	}
}
