package main

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"os"
	"sync"

	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/mdns"
)

// PROTOCOL_ID - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞—à–µ–≥–æ —á–∞—Ç-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
const PROTOCOL_ID = "/owl-whisper/1.0.0"

// DISCOVERY_TAG - —ç—Ç–æ "—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ", –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞—à–∏ —É–∑–ª—ã –±—É–¥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ —á–µ—Ä–µ–∑ mDNS
const DISCOVERY_TAG = "owl-whisper-mdns"

// discoveryNotifee –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ç–∏
type discoveryNotifee struct {
	node host.Host
	ctx  context.Context
}

// HandlePeerFound - —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ mDNS –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
func (n *discoveryNotifee) HandlePeerFound(pi peer.AddrInfo) {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
	if pi.ID == n.node.ID() {
		return
	}
	log.Printf("üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: %s", pi.ID.String())

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
	err := n.node.Connect(n.ctx, pi)
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", pi.ID.String(), err)
	} else {
		log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s", pi.ID.String())
	}
}

func handleStream(stream network.Stream) {
	remotePeer := stream.Conn().RemotePeer()
	log.Printf("‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—Ç %s", remotePeer.String())

	// –°–æ–∑–¥–∞–µ–º 'reader' –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Ç–æ–∫–∞
	reader := bufio.NewReader(stream)
	for {
		// –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
		str, err := reader.ReadString('\n')
		if err != nil {
			// –û—à–∏–±–∫–∞ EOF –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫—Ä—ã–ª –ø–æ—Ç–æ–∫. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
			// log.Printf("‚ö†Ô∏è –ü–æ—Ç–æ–∫ —Å %s –∑–∞–∫—Ä—ã—Ç: %v", remotePeer.ShortString(), err)
			stream.Close()
			return
		}
		// –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		fmt.Printf("üì• –û—Ç %s: %s", remotePeer.ShortString(), str)
	}
}

func main() {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª libp2p.
	// –ú—ã —É–±—Ä–∞–ª–∏ –æ–ø—Ü–∏–∏ –¥–ª—è NAT, —Ç–∞–∫ –∫–∞–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã.
	node, err := libp2p.New()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–∑–µ–ª libp2p: %v", err)
	}

	log.Printf("‚úÖ –£–∑–µ–ª —Å–æ–∑–¥–∞–Ω. –í–∞—à PeerID: %s", node.ID().String())
	log.Println("–ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:")
	for _, addr := range node.Addrs() {
		fmt.Printf("  %s/p2p/%s\n", addr, node.ID().String())
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
	node.SetStreamHandler(PROTOCOL_ID, handleStream)

	// --- –ó–∞–ø—É—Å–∫–∞–µ–º mDNS –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ ---
	// –≠—Ç–æ —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ—à–∞–µ—Ç –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.
	notifee := &discoveryNotifee{node: node, ctx: ctx}
	mdnsService := mdns.NewMdnsService(node, DISCOVERY_TAG, notifee)
	if err := mdnsService.Start(); err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å mDNS: %v", err)
	}
	log.Println("üì° –°–µ—Ä–≤–∏—Å mDNS –∑–∞–ø—É—â–µ–Ω. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

	// --- –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º sync.Mutex –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –ø–∏—Ä–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω
	var peersMux sync.Mutex

	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		message := scanner.Text()

		peersMux.Lock()
		peers := node.Network().Peers()
		peersMux.Unlock()

		if len(peers) == 0 {
			log.Println("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º, —Å –∫–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		for _, p := range peers {
			// –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			stream, err := node.NewStream(ctx, p, PROTOCOL_ID)
			if err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫ –∫ %s: %v", p.ShortString(), err)
				continue
			}

			_, err = stream.Write([]byte(message + "\n"))
			if err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ %s: %v\n", p.ShortString(), err)
			} else {
				log.Printf("üì§ –í–∞–º -> %s: %s", p.ShortString(), message)
			}
			// –í–∞–∂–Ω–æ: –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			stream.Close()
		}
	}
}
