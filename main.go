package main

import (
	"context"
	"flag"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"syscall"
	"time"

	"OwlWhisper/internal/core"
	"OwlWhisper/internal/storage"
	"OwlWhisper/internal/transport"
	"OwlWhisper/internal/ui"
	"OwlWhisper/pkg/config"
)

func main() {
	// –ü–∞—Ä—Å–∏–º —Ñ–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	configPath := flag.String("config", "", "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
	listenPort := flag.Int("port", 0, "–ü–æ—Ä—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (0 = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)")
	destAddr := flag.String("d", "", "–ê–¥—Ä–µ—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
	dbPath := flag.String("db", "", "–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite")
	flag.Parse()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.LoadConfig(*configPath)
	if err != nil {
		log.Printf("Warning: failed to load config: %v, using defaults", err)
		cfg = config.DefaultConfig()
	}

	// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
	if *listenPort != 0 {
		cfg.Network.ListenPort = *listenPort
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	homeDir, err := os.UserHomeDir()
	if err != nil {
		log.Fatalf("Failed to get home directory: %v", err)
	}

	appDir := filepath.Join(homeDir, ".owlwhisper")
	if err := os.MkdirAll(appDir, 0755); err != nil {
		log.Fatalf("Failed to create app directory: %v", err)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if *dbPath == "" {
		*dbPath = filepath.Join(appDir, "owlwhisper.db")
	}

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	log.Printf("üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: %s", *dbPath)
	storageRepo, err := storage.NewSQLiteRepository(*dbPath)
	if err != nil {
		log.Fatalf("Failed to create storage repository: %v", err)
	}
	defer storageRepo.Close()

	// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–ª–æ–π
	log.Printf("üåê –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–ª–æ–π...")
	transportLayer, err := transport.NewLibp2pTransport(
		cfg.Network.ListenPort,
		cfg.Security.EnableTLS,
		cfg.Security.EnableNoise,
		cfg.Network.EnableNAT,
		cfg.Network.EnableHolePunch,
		cfg.Network.EnableRelay,
	)
	if err != nil {
		log.Fatalf("Failed to create transport layer: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
	log.Printf("üîß –°–æ–∑–¥–∞–µ–º core —Å–µ—Ä–≤–∏—Å—ã...")
	chatService := core.NewChatService(storageRepo, transportLayer)
	contactService := core.NewContactService(storageRepo, transportLayer)
	networkService := core.NewNetworkService(transportLayer, contactService, chatService)

	// –°–æ–∑–¥–∞–µ–º TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	log.Printf("üñ•Ô∏è –°–æ–∑–¥–∞–µ–º TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
	tuiChat := ui.NewTUIChat(chatService, contactService, networkService)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
	go func() {
		if err := tuiChat.Start(); err != nil {
			log.Printf("Error starting TUI: %v", err)
			cancel()
		}
	}()

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
	if *destAddr != "" {
		go func() {
			// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π —É–∑–µ–ª —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
			select {
			case <-time.After(5 * time.Second):
				log.Printf("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s", *destAddr)
				if err := transportLayer.ConnectDirectly(context.Background(), *destAddr); err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
				} else {
					log.Printf("‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
				}
			case <-ctx.Done():
				return
			}
		}()
	}

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan
	log.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	cancel()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
	if err := networkService.Stop(context.Background()); err != nil {
		log.Printf("Warning: failed to stop network service: %v", err)
	}

	log.Println("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
}
