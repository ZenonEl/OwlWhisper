package api

import (
	"fmt"
	"log"
	"time"
)

// ExampleUsage –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OwlWhisper API
func ExampleUsage() {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := DefaultAPIConfig()
	config.EnableTUI = false // –û—Ç–∫–ª—é—á–∞–µ–º TUI –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	config.DatabasePath = "example.db"

	// –°–æ–∑–¥–∞–µ–º API
	api, err := NewOwlWhisperAPI(config)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º API
	if err := api.Start(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: %v", err)
	}
	defer api.Stop()

	fmt.Printf("üöÄ OwlWhisper –∑–∞–ø—É—â–µ–Ω! PeerID: %s\n", api.GetMyPeerID())

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	go func() {
		for msg := range api.MessageChannel() {
			if msg.IsOutgoing {
				fmt.Printf("üì§ –í—ã -> %s: %s\n", msg.RecipientID, msg.Text)
			} else {
				fmt.Printf("üì• %s: %s\n", msg.Sender, msg.Text)
			}
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Ä–æ–≤
	go func() {
		for peers := range api.PeerChannel() {
			fmt.Printf("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: %d\n", len(peers))
			for _, peer := range peers {
				fmt.Printf("  - %s (%s)\n", peer.Nickname, peer.Status)
			}
		}
	}()

	// –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ä–æ–≤
	fmt.Println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ä–æ–≤...")
	for {
		status := api.GetConnectionStatus()
		if status.IsConnected {
			fmt.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ %d –ø–∏—Ä–∞–º\n", status.PeerCount)
			break
		}
		time.Sleep(2 * time.Second)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	request := SendMessageRequest{
		Text:     "–ü—Ä–∏–≤–µ—Ç –∏–∑ OwlWhisper API!",
		ChatType: "broadcast",
	}

	if err := api.SendMessage(request); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	} else {
		fmt.Println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	history, err := api.GetHistory(10)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
	} else {
		fmt.Printf("üìö –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (%d –∏–∑ %d):\n", len(history.Messages), history.TotalCount)
		for _, msg := range history.Messages {
			fmt.Printf("  %s - %s: %s\n", msg.Timestamp.Format("15:04:05"), msg.Sender, msg.Text)
		}
	}

	// –†–∞–±–æ—Ç–∞–µ–º 30 —Å–µ–∫—É–Ω–¥
	fmt.Println("‚è∞ –†–∞–±–æ—Ç–∞–µ–º 30 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(30 * time.Second)

	fmt.Println("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
}

// SimpleExample –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
func SimpleExample() error {
	// –°–æ–∑–¥–∞–µ–º API —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	api, err := NewOwlWhisperAPI(nil)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º
	if err := api.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API: %w", err)
	}
	defer api.Stop()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	return api.SendMessage(SendMessageRequest{
		Text:     "Hello, World!",
		ChatType: "broadcast",
	})
}
