package api

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	"OwlWhisper/internal/app"
	"OwlWhisper/internal/core"
	"OwlWhisper/internal/storage/sqlite"
)

// OwlWhisperAPI –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
type OwlWhisperAPI interface {
	// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
	Start() error

	// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
	Stop() error

	// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
	SendMessage(request SendMessageRequest) error

	// GetPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	GetPeers() []Peer

	// GetConnectionStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	GetConnectionStatus() ConnectionStatus

	// GetHistory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	GetHistory(limit int) (ChatHistory, error)

	// MessageChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	MessageChannel() <-chan Message

	// PeerChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–∏—Ä–æ–≤
	PeerChannel() <-chan []Peer

	// GetMyPeerID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –Ω–∞—à–µ–≥–æ –ø–∏—Ä–∞
	GetMyPeerID() string
}

// owlWhisperAPI —Ä–µ–∞–ª–∏–∑—É–µ—Ç OwlWhisperAPI
type owlWhisperAPI struct {
	// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
	coreController *core.CoreController
	chatService    *app.ChatService
	messageRepo    *sqlite.MessageRepository

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	config *APIConfig

	// –ö–∞–Ω–∞–ª—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
	messagesChan chan Message
	peersChan    chan []Peer

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	ctx       context.Context
	cancel    context.CancelFunc
	isRunning bool
	mutex     sync.RWMutex
}

// NewOwlWhisperAPI —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
func NewOwlWhisperAPI(config *APIConfig) (OwlWhisperAPI, error) {
	if config == nil {
		config = DefaultAPIConfig()
	}

	ctx, cancel := context.WithCancel(context.Background())

	// –°–æ–∑–¥–∞–µ–º Core Controller
	coreController, err := core.NewCoreController(ctx)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Core Controller: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
	messageRepo, err := sqlite.NewMessageRepository(config.DatabasePath)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º Chat Service
	chatService := app.NewChatService(coreController, messageRepo, nil)

	api := &owlWhisperAPI{
		coreController: coreController,
		chatService:    chatService,
		messageRepo:    messageRepo,
		config:         config,
		messagesChan:   make(chan Message, 100),
		peersChan:      make(chan []Peer, 10),
		ctx:            ctx,
		cancel:         cancel,
	}

	return api, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
func (api *owlWhisperAPI) Start() error {
	api.mutex.Lock()
	defer api.mutex.Unlock()

	if api.isRunning {
		return fmt.Errorf("API —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	log.Println("üöÄ –ó–∞–ø—É—Å–∫ OwlWhisper API...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º Core Controller
	if err := api.coreController.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Core Controller: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º Chat Service
	if err := api.chatService.Start(); err != nil {
		api.coreController.Stop()
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Chat Service: %w", err)
	}

	api.isRunning = true

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
	go api.handleMessages()
	go api.handlePeers()

	log.Printf("‚úÖ OwlWhisper API –∑–∞–ø—É—â–µ–Ω. PeerID: %s", api.coreController.GetMyID())
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
func (api *owlWhisperAPI) Stop() error {
	api.mutex.Lock()
	defer api.mutex.Unlock()

	if !api.isRunning {
		return nil
	}

	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ OwlWhisper API...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
	if err := api.chatService.Stop(); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Chat Service: %v", err)
	}

	if err := api.coreController.Stop(); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Core Controller: %v", err)
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	if err := api.messageRepo.Close(); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: %v", err)
	}

	// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	api.cancel()

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
	close(api.messagesChan)
	close(api.peersChan)

	api.isRunning = false
	log.Println("‚úÖ OwlWhisper API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (api *owlWhisperAPI) SendMessage(request SendMessageRequest) error {
	api.mutex.RLock()
	if !api.isRunning {
		api.mutex.RUnlock()
		return fmt.Errorf("API –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}
	api.mutex.RUnlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
	if len(request.Text) > api.config.MaxMessageSize {
		return fmt.Errorf("—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: %d > %d", len(request.Text), api.config.MaxMessageSize)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Chat Service
	return api.chatService.Send(request.Text, request.ChatType, request.RecipientID)
}

// GetPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (api *owlWhisperAPI) GetPeers() []Peer {
	api.mutex.RLock()
	if !api.isRunning {
		api.mutex.RUnlock()
		return []Peer{}
	}
	api.mutex.RUnlock()

	peerIDs := api.coreController.GetPeers()
	var peers []Peer

	for _, peerID := range peerIDs {
		peer := Peer{
			ID:       peerID.String(),
			Nickname: shortenPeerID(peerID.String()),
			Status:   "online",
			LastSeen: time.Now(),
		}
		peers = append(peers, peer)
	}

	return peers
}

// GetConnectionStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func (api *owlWhisperAPI) GetConnectionStatus() ConnectionStatus {
	api.mutex.RLock()
	if !api.isRunning {
		api.mutex.RUnlock()
		return ConnectionStatus{
			IsConnected: false,
			PeerCount:   0,
			MyPeerID:    "",
			LastUpdate:  time.Now(),
			NetworkType: "offline",
		}
	}
	api.mutex.RUnlock()

	peers := api.coreController.GetPeers()
	return ConnectionStatus{
		IsConnected: len(peers) > 0,
		PeerCount:   len(peers),
		MyPeerID:    api.coreController.GetMyID(),
		LastUpdate:  time.Now(),
		NetworkType: "p2p",
	}
}

// GetHistory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
func (api *owlWhisperAPI) GetHistory(limit int) (ChatHistory, error) {
	api.mutex.RLock()
	if !api.isRunning {
		api.mutex.RUnlock()
		return ChatHistory{}, fmt.Errorf("API –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}
	api.mutex.RUnlock()

	if limit <= 0 || limit > api.config.HistoryLimit {
		limit = api.config.HistoryLimit
	}

	chatMessages, err := api.chatService.GetHistory(limit)
	if err != nil {
		return ChatHistory{}, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: %w", err)
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ API Message
	var messages []Message
	for _, chatMsg := range chatMessages {
		msg := Message{
			ID:          chatMsg.ID,
			Sender:      chatMsg.SenderName,
			Text:        chatMsg.Text,
			Timestamp:   chatMsg.Timestamp,
			ChatType:    chatMsg.ChatType,
			RecipientID: chatMsg.RecipientID,
			IsOutgoing:  chatMsg.IsOutgoing,
		}
		messages = append(messages, msg)
	}

	return ChatHistory{
		Messages:   messages,
		TotalCount: len(messages),
		HasMore:    len(messages) == limit,
	}, nil
}

// MessageChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
func (api *owlWhisperAPI) MessageChannel() <-chan Message {
	return api.messagesChan
}

// PeerChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–∏—Ä–æ–≤
func (api *owlWhisperAPI) PeerChannel() <-chan []Peer {
	return api.peersChan
}

// GetMyPeerID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –Ω–∞—à–µ–≥–æ –ø–∏—Ä–∞
func (api *owlWhisperAPI) GetMyPeerID() string {
	api.mutex.RLock()
	if !api.isRunning {
		api.mutex.RUnlock()
		return ""
	}
	api.mutex.RUnlock()

	return api.coreController.GetMyID()
}

// handleMessages –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Chat Service
func (api *owlWhisperAPI) handleMessages() {
	for {
		select {
		case chatMsg, ok := <-api.chatService.GetMessages():
			if !ok {
				return // –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç
			}

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ API Message
			msg := Message{
				ID:          chatMsg.ID,
				Sender:      chatMsg.SenderName,
				Text:        chatMsg.Text,
				Timestamp:   chatMsg.Timestamp,
				ChatType:    chatMsg.ChatType,
				RecipientID: chatMsg.RecipientID,
				IsOutgoing:  chatMsg.IsOutgoing,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª API
			select {
			case api.messagesChan <- msg:
				// –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
			default:
				log.Printf("‚ö†Ô∏è –ö–∞–Ω–∞–ª API –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ")
			}

		case <-api.ctx.Done():
			return
		}
	}
}

// handlePeers –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ä–æ–≤
func (api *owlWhisperAPI) handlePeers() {
	for {
		select {
		case peerIDs, ok := <-api.chatService.GetPeers():
			if !ok {
				return // –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç
			}

			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ API Peer
			var peers []Peer
			for _, peerID := range peerIDs {
				peer := Peer{
					ID:       peerID.String(),
					Nickname: shortenPeerID(peerID.String()),
					Status:   "online",
					LastSeen: time.Now(),
				}
				peers = append(peers, peer)
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª API
			select {
			case api.peersChan <- peers:
				// –ü–∏—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
			default:
				// –ö–∞–Ω–∞–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
			}

		case <-api.ctx.Done():
			return
		}
	}
}

// shortenPeerID —Å–æ–∫—Ä–∞—â–∞–µ—Ç PeerID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func shortenPeerID(peerID string) string {
	if len(peerID) > 8 {
		return peerID[:8] + "..."
	}
	return peerID
}
