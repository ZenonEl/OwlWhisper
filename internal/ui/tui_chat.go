package ui

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"

	"OwlWhisper/pkg/interfaces"

	"github.com/libp2p/go-libp2p/core/peer"
)

// TUIChat –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á–∞—Ç–∞
type TUIChat struct {
	chatService    interfaces.IChatService
	contactService interfaces.IContactService
	networkService interfaces.INetworkService
	ctx            context.Context
	cancel         context.CancelFunc
	scanner        *bufio.Scanner
}

// NewTUIChat —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TUIChat
func NewTUIChat(
	chatService interfaces.IChatService,
	contactService interfaces.IContactService,
	networkService interfaces.INetworkService,
) *TUIChat {
	ctx, cancel := context.WithCancel(context.Background())

	return &TUIChat{
		chatService:    chatService,
		contactService: contactService,
		networkService: networkService,
		ctx:            ctx,
		cancel:         cancel,
		scanner:        bufio.NewScanner(os.Stdin),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func (t *TUIChat) Start() error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
	if err := t.networkService.Start(t.ctx); err != nil {
		return fmt.Errorf("failed to start network service: %w", err)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –≤ —Ñ–æ–Ω–µ
	go t.handleCommands()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	t.showWelcome()

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan
	log.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
	if err := t.networkService.Stop(t.ctx); err != nil {
		log.Printf("Warning: failed to stop network service: %v", err)
	}

	t.cancel()
	return nil
}

// showWelcome –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (t *TUIChat) showWelcome() {
	fmt.Println("ü¶â –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Owl Whisper!")
	fmt.Println("üîó P2P –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å")
	fmt.Println("")
	fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
	fmt.Println("  /help          - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println("  /contacts      - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
	fmt.Println("  /connect <id>  - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∏—Ä—É")
	fmt.Println("  /msg <id>      - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
	fmt.Println("  /history <id>  - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π")
	fmt.Println("  /peers         - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤")
	fmt.Println("  /quit          - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
	fmt.Println("")
	fmt.Println("–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º")
	fmt.Println("")
}

// handleCommands –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (t *TUIChat) handleCommands() {
	for {
		select {
		case <-t.ctx.Done():
			return
		default:
			fmt.Print("ü¶â > ")
			if !t.scanner.Scan() {
				return
			}

			input := strings.TrimSpace(t.scanner.Text())
			if input == "" {
				continue
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
			if strings.HasPrefix(input, "/") {
				t.handleCommand(input)
			} else {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
				t.broadcastMessage(input)
			}
		}
	}
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É
func (t *TUIChat) handleCommand(cmd string) {
	parts := strings.Fields(cmd)
	if len(parts) == 0 {
		return
	}

	switch parts[0] {
	case "/help":
		t.showWelcome()

	case "/contacts":
		t.showContacts()

	case "/connect":
		if len(parts) < 2 {
			fmt.Println("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /connect <peer_id>")
			return
		}
		t.connectToPeer(parts[1])

	case "/msg":
		if len(parts) < 3 {
			fmt.Println("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /msg <peer_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
			return
		}
		peerID := parts[1]
		message := strings.Join(parts[2:], " ")
		t.sendMessage(peerID, message)

	case "/history":
		if len(parts) < 2 {
			fmt.Println("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <peer_id>")
			return
		}
		t.showMessageHistory(parts[1])

	case "/peers":
		t.showConnectedPeers()

	case "/quit":
		fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
		t.cancel()

	default:
		fmt.Printf("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s\n", parts[0])
		fmt.Println("–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
	}
}

// showContacts –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
func (t *TUIChat) showContacts() {
	contacts, err := t.contactService.GetContacts(t.ctx)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: %v\n", err)
		return
	}

	if len(contacts) == 0 {
		fmt.Println("üìù –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	fmt.Println("üìù –ö–æ–Ω—Ç–∞–∫—Ç—ã:")
	for _, contact := range contacts {
		status := "üî¥"
		if contact.IsOnline {
			status = "üü¢"
		}
		fmt.Printf("  %s %s (%s) - %s\n",
			status,
			contact.Nickname,
			contact.PeerID[:12]+"...",
			contact.LastSeen.Format("15:04:05"),
		)
	}
}

// connectToPeer –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É
func (t *TUIChat) connectToPeer(peerIDStr string) {
	peerID, err := peer.Decode(peerIDStr)
	if err != nil {
		fmt.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PeerID: %v\n", err)
		return
	}

	if err := t.networkService.ConnectToPeer(t.ctx, peerID); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ %s\n", peerID.ShortString())
}

// sendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É
func (t *TUIChat) sendMessage(peerIDStr, message string) {
	peerID, err := peer.Decode(peerIDStr)
	if err != nil {
		fmt.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PeerID: %v\n", err)
		return
	}

	if err := t.chatService.SendMessage(t.ctx, peerID, message); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
		return
	}

	fmt.Printf("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ %s\n", peerID.ShortString())
}

// showMessageHistory –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∏—Ä–æ–º
func (t *TUIChat) showMessageHistory(peerIDStr string) {
	peerID, err := peer.Decode(peerIDStr)
	if err != nil {
		fmt.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PeerID: %v\n", err)
		return
	}

	messages, err := t.chatService.GetMessages(t.ctx, peerID, 20, 0)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v\n", err)
		return
	}

	if len(messages) == 0 {
		fmt.Println("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
		return
	}

	fmt.Printf("üìú –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å %s:\n", peerID.ShortString())
	for _, msg := range messages {
		timestamp := msg.Timestamp.Format("15:04:05")
		if msg.FromPeer == peerID.String() {
			fmt.Printf("  [%s] %s: %s\n", timestamp, "–û–Ω–∏", msg.Content)
		} else {
			fmt.Printf("  [%s] %s: %s\n", timestamp, "–í—ã", msg.Content)
		}
	}
}

// showConnectedPeers –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (t *TUIChat) showConnectedPeers() {
	peers := t.networkService.GetConnectedPeers()

	if len(peers) == 0 {
		fmt.Println("üîå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤")
		return
	}

	fmt.Println("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã:")
	for _, peerID := range peers {
		contact := t.networkService.GetPeerInfo(peerID)
		if contact != nil {
			fmt.Printf("  üü¢ %s (%s)\n", contact.Nickname, peerID.ShortString())
		} else {
			fmt.Printf("  üü¢ %s\n", peerID.ShortString())
		}
	}
}

// broadcastMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (t *TUIChat) broadcastMessage(message string) {
	peers := t.networkService.GetConnectedPeers()

	if len(peers) == 0 {
		fmt.Println("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
		return
	}

	successCount := 0
	for _, peerID := range peers {
		if err := t.chatService.SendMessage(t.ctx, peerID, message); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫ %s: %v\n", peerID.ShortString(), err)
		} else {
			successCount++
		}
	}

	if successCount > 0 {
		fmt.Printf("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –ø–∏—Ä–∞–º\n", successCount)
	}
}
