package app

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"OwlWhisper/internal/core"
	"OwlWhisper/internal/tui"
)

// App –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
type App struct {
	node      *core.Node
	discovery *core.DiscoveryManager
	tui       *tui.Handler
	ctx       context.Context
	cancel    context.CancelFunc
}

// NewApp —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func NewApp() (*App, error) {
	ctx, cancel := context.WithCancel(context.Background())

	// –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª
	node, err := core.NewNode(ctx)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–∑–µ–ª: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
	discovery := core.NewDiscoveryManager(ctx, node.GetHost())

	// –°–æ–∑–¥–∞–µ–º TUI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	tuiHandler := tui.NewHandler(node)

	app := &App{
		node:      node,
		discovery: discovery,
		tui:       tuiHandler,
		ctx:       ctx,
		cancel:    cancel,
	}

	return app, nil
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (app *App) Run() error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª
	if err := app.node.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–∑–µ–ª: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º discovery
	if err := app.discovery.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å discovery: %w", err)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º TUI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		if err := app.tui.Start(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ TUI: %v", err)
			app.cancel()
		}
	}()

	// –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan
	log.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")

	// Graceful shutdown
	return app.Shutdown()
}

// Shutdown –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (app *App) Shutdown() error {
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º discovery
	if err := app.discovery.Stop(); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ discovery: %v", err)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∑–µ–ª
	if err := app.node.Close(); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–∑–ª–∞: %v", err)
	}

	// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	app.cancel()

	log.Println("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	return nil
}
