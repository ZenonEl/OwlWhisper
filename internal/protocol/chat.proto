syntax = "proto3";

package protocol;

option go_package = "./";

// Envelope - "конверт", в который заворачивается каждое
// сообщение, передаваемое по сети между пирами.
message Envelope {
    string message_id = 1;      // Уникальный ID конверта (UUID)
    string sender_id = 2;       // PeerID отправителя
    int64 timestamp_unix = 3;   // Время отправки
    
    enum ChatType {
        PRIVATE = 0; // Личное сообщение
        GROUP = 1;   // Групповой чат
    }
    ChatType chat_type = 4;
    
    string chat_id = 5;         // ID чата (для групп - ID группы, для личных - PeerID собеседника)

    oneof payload {
        Content content = 6;            // Полезная нагрузка (текст, файл)
        ReadReceipts read_receipts = 7; // Уведомление о прочтении
        ProfileInfo profile_info = 8;   // Информация о профиле
        PingMessage ping = 9;           // Ping для проверки соединения
        PongMessage pong = 10;          // Pong в ответ на Ping
    }
}

// Content - сама "полезная нагрузка" сообщения.
message Content {
    oneof type {
        TextMessage text = 1;
        FileMetadata file = 2;
    }
}

message TextMessage {
    string body = 1;
    string reply_to_message_id = 2;
}

message FileMetadata {
    string filename = 1;
    int64 size_bytes = 2;
    string mime_type = 3;
    string hash_sha256 = 4;
}

// ReadReceipts - уведомление о прочтении одного или нескольких сообщений.
message ReadReceipts {
    repeated string message_ids = 1;
}

// ProfileInfo - информация о профиле пользователя для обмена между клиентами.
message ProfileInfo {
    string nickname = 1;
    string discriminator = 2;
    string display_name = 3;
    string avatar_hash = 4;
    map<string, string> metadata = 5; // Например, {"clientVersion": "0.1.0", "platform": "desktop"}
}

// Ping/Pong для проверки соединения и обмена метаданными.
message PingMessage {
    int64 timestamp = 1;
}

message PongMessage {
    int64 request_timestamp = 1; // Возвращаем timestamp из соответствующего Ping
}