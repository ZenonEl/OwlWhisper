syntax = "proto3";

package protocol;

option go_package = "OwlWhisper/internal/protocol";

// ---------------------------------------------------------------- //
// ----------------- ОСНОВНЫЕ СТРУКТУРЫ СООБЩЕНИЙ ----------------- //
// ---------------------------------------------------------------- //

// Envelope - это "конверт", в который заворачивается каждое
// сообщение, передаваемое по сети.
message Envelope {
    string message_id = 1;          // Уникальный ID конверта (UUID)
    string sender_id = 2;           // PeerID отправителя
    int64 timestamp_unix = 3;       // Время отправки
    
    // Тип чата. Enum - это эффективно и типобезопасно.
    enum ChatType {
        PRIVATE = 0; // Личное сообщение
        GROUP = 1;   // Групповой чат
    }
    ChatType chat_type = 4;
    
    // ID чата (для групп - ID группы, для личных - PeerID собеседника)
    string chat_id = 5;

    // Содержимое сообщения. oneof гарантирует, что внутри будет
    // что-то одно: либо текстовое сообщение, либо статус, либо что-то еще.
    oneof payload {
        Content content = 6;            // Полезная нагрузка (текст, файл, и т.д.)
        ReadReceipts read_receipts = 7; // Уведомление о прочтении
    }
}


// Content - это сама "полезная нагрузка" сообщения.
message Content {
    oneof type {
        TextMessage text = 1;
        FileMetadata file = 2;
        // В будущем можно добавить: Sticker, SystemNotification и т.д.
    }
}

// ---------------------------------------------------------------- //
// ----------------- ТИПЫ КОНТЕНТА ----------------- //
// ---------------------------------------------------------------- //

message TextMessage {
    string body = 1;
    string reply_to_message_id = 2; // ID сообщения, на которое отвечаем (опционально)
}

message FileMetadata {
    string filename = 1;
    int64 size_bytes = 2;
    string mime_type = 3;
    string hash_sha256 = 4;
}

// ReadReceipts - уведомление о прочтении одного или нескольких сообщений.
message ReadReceipts {
    repeated string message_ids = 1; // ID прочитанных сообщений
}


// ---------------------------------------------------------------- //
// ----------------- СООБЩЕНИЯ ДЛЯ RPC (Запрос/Ответ) ----------------- //
// ---------------------------------------------------------------- //

// Запрос на получение истории сообщений
message GetHistoryRequest {
    string chat_id = 1;
    int64 before_timestamp = 2; // Сообщения до этой временной метки
    int32 limit = 3;            // Максимальное количество
}

// Ответ с порцией истории сообщений
message GetHistoryResponse {
    repeated Envelope messages = 1;
    bool has_more = 2; // Есть ли еще более старые сообщения
}