package transport

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/routing"
	"github.com/libp2p/go-libp2p/p2p/security/noise"
	libp2ptls "github.com/libp2p/go-libp2p/p2p/security/tls"
	"github.com/multiformats/go-multiaddr"
)

const (
	PROTOCOL_ID    = "/owl-whisper/1.0.0"
	DISCOVERY_TAG  = "owl-whisper-rendezvous-point"
	STREAM_TIMEOUT = 30 * time.Second
)

// Libp2pTransport —Ä–µ–∞–ª–∏–∑—É–µ—Ç ITransport –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏—Å–ø–æ–ª—å–∑—É—è libp2p
type Libp2pTransport struct {
	host             host.Host
	dht              *dht.IpfsDHT
	routingDiscovery *routing.RoutingDiscovery
	listenPort       int
	enableTLS        bool
	enableNoise      bool
	enableNAT        bool
	enableHolePunch  bool
	enableRelay      bool
	messageHandler   func(peer.ID, []byte)
	mu               sync.RWMutex
	ctx              context.Context
	cancel           context.CancelFunc
}

// NewLibp2pTransport —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Libp2pTransport
func NewLibp2pTransport(listenPort int, enableTLS, enableNoise, enableNAT, enableHolePunch, enableRelay bool) (*Libp2pTransport, error) {
	ctx, cancel := context.WithCancel(context.Background())

	// –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è libp2p
	opts := []libp2p.Option{
		libp2p.ListenAddrStrings(fmt.Sprintf("/ip4/0.0.0.0/tcp/%d", listenPort)),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	if enableTLS {
		opts = append(opts, libp2p.Security(libp2ptls.ID, libp2ptls.New))
	}
	if enableNoise {
		opts = append(opts, libp2p.Security(noise.ID, noise.New))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è NAT –∏ relay
	if enableNAT {
		opts = append(opts, libp2p.EnableNATService())
	}
	if enableHolePunch {
		opts = append(opts, libp2p.EnableHolePunching())
	}
	if enableRelay {
		opts = append(opts, libp2p.EnableRelay())
	}

	// –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª
	h, err := libp2p.New(opts...)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("failed to create libp2p host: %w", err)
	}

	transport := &Libp2pTransport{
		host:            h,
		listenPort:      listenPort,
		enableTLS:       enableTLS,
		enableNoise:     enableNoise,
		enableNAT:       enableNAT,
		enableHolePunch: enableHolePunch,
		enableRelay:     enableRelay,
		ctx:             ctx,
		cancel:          cancel,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–æ–≤
	h.SetStreamHandler(PROTOCOL_ID, transport.handleStream)

	return transport, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–ª–æ–π
func (t *Libp2pTransport) Start(ctx context.Context) error {
	t.mu.Lock()
	defer t.mu.Unlock()

	// –°–æ–∑–¥–∞–µ–º DHT
	var err error
	t.dht, err = dht.New(ctx, t.host)
	if err != nil {
		return fmt.Errorf("failed to create DHT: %w", err)
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ bootstrap —É–∑–ª–∞–º
	if err = t.dht.Bootstrap(ctx); err != nil {
		return fmt.Errorf("failed to bootstrap DHT: %w", err)
	}

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã DHT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è
	time.Sleep(2 * time.Second)

	// –°–æ–∑–¥–∞–µ–º routing discovery
	t.routingDiscovery = routing.NewRoutingDiscovery(t.dht)

	// –ü—ã—Ç–∞–µ–º—Å—è –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–µ—Ç–∏ (–º–æ–∂–µ—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è —Å—Ä–∞–∑—É)
	go func() {
		// –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
		for i := 0; i < 3; i++ {
			time.Sleep(time.Duration(i+1) * time.Second)
			_, err := t.routingDiscovery.Advertise(ctx, DISCOVERY_TAG)
			if err == nil {
				log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–µ—Ç–∏")
				break
			}
			log.Printf("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–æ–Ω—Å–∞ %d –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", i+1, err)
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–∏—Ä–æ–≤ –≤ —Ñ–æ–Ω–µ
	go t.discoverPeers(ctx)

	log.Printf("‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∑–∞–ø—É—â–µ–Ω. PeerID: %s", t.host.ID().String())
	for _, addr := range t.host.Addrs() {
		log.Printf("  %s/p2p/%s", addr, t.host.ID().String())
	}

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–ª–æ–π
func (t *Libp2pTransport) Stop(ctx context.Context) error {
	t.mu.Lock()
	defer t.mu.Unlock()

	if t.cancel != nil {
		t.cancel()
	}

	if t.dht != nil {
		if err := t.dht.Close(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ DHT: %v", err)
		}
	}

	if t.host != nil {
		if err := t.host.Close(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ö–æ—Å—Ç–∞: %v", err)
		}
	}

	return nil
}

// Connect –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É
func (t *Libp2pTransport) Connect(ctx context.Context, peerID peer.ID) error {
	t.mu.RLock()
	defer t.mu.RUnlock()

	if t.host == nil {
		return fmt.Errorf("—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–∂–µ
	if t.host.Network().Connectedness(peerID) == network.Connected {
		return nil
	}

	// –ò—â–µ–º –ø–∏—Ä–∞ —á–µ—Ä–µ–∑ DHT
	peerChan, err := t.routingDiscovery.FindPeers(ctx, DISCOVERY_TAG)
	if err != nil {
		return fmt.Errorf("failed to find peers: %w", err)
	}

	for p := range peerChan {
		if p.ID == peerID {
			if err := t.host.Connect(ctx, p); err != nil {
				return fmt.Errorf("failed to connect to peer %s: %w", peerID, err)
			}
			log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ %s", peerID.ShortString())
			return nil
		}
	}

	return fmt.Errorf("peer %s not found in network", peerID)
}

// ConnectDirectly –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø–∏—Ä—É –ø–æ multiaddr (–∫–∞–∫ –≤ poc.go)
func (t *Libp2pTransport) ConnectDirectly(ctx context.Context, multiaddrStr string) error {
	t.mu.RLock()
	defer t.mu.RUnlock()

	if t.host == nil {
		return fmt.Errorf("—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	log.Printf("üîó –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ %s", multiaddrStr)

	// –ü–∞—Ä—Å–∏–º multiaddr
	maddr, err := multiaddr.NewMultiaddr(multiaddrStr)
	if err != nil {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç multiaddr: %w", err)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º AddrInfo
	pinfo, err := peer.AddrInfoFromP2pAddr(maddr)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å AddrInfo: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–∂–µ
	if t.host.Network().Connectedness(pinfo.ID) == network.Connected {
		log.Printf("‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ %s", pinfo.ID.ShortString())
		return nil
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é
	if err := t.host.Connect(ctx, *pinfo); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %w", multiaddrStr, err)
	}

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s", pinfo.ID.ShortString())
	return nil
}

// Disconnect –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞
func (t *Libp2pTransport) Disconnect(ctx context.Context, peerID peer.ID) error {
	t.mu.RLock()
	defer t.mu.RUnlock()

	if t.host == nil {
		return fmt.Errorf("—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	if err := t.host.Network().ClosePeer(peerID); err != nil {
		return fmt.Errorf("failed to disconnect from peer %s: %w", peerID, err)
	}

	log.Printf("–û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç %s", peerID.ShortString())
	return nil
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É
func (t *Libp2pTransport) SendMessage(ctx context.Context, peerID peer.ID, message []byte) error {
	t.mu.RLock()
	defer t.mu.RUnlock()

	if t.host == nil {
		return fmt.Errorf("—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if t.host.Network().Connectedness(peerID) != network.Connected {
		return fmt.Errorf("peer %s not connected", peerID)
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫
	stream, err := t.host.NewStream(ctx, peerID, PROTOCOL_ID)
	if err != nil {
		return fmt.Errorf("failed to create stream: %w", err)
	}
	defer stream.Close()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
	stream.SetDeadline(time.Now().Add(STREAM_TIMEOUT))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = stream.Write(append(message, '\n'))
	if err != nil {
		return fmt.Errorf("failed to write message: %w", err)
	}

	log.Printf("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ %s", peerID.ShortString())
	return nil
}

// GetConnectedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (t *Libp2pTransport) GetConnectedPeers() []peer.ID {
	t.mu.RLock()
	defer t.mu.RUnlock()

	if t.host == nil {
		return nil
	}

	return t.host.Network().Peers()
}

// GetPeerID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
func (t *Libp2pTransport) GetPeerID() peer.ID {
	t.mu.RLock()
	defer t.mu.RUnlock()

	if t.host == nil {
		return ""
	}

	return t.host.ID()
}

// GetMultiaddrs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç multiaddr —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
func (t *Libp2pTransport) GetMultiaddrs() []string {
	t.mu.RLock()
	defer t.mu.RUnlock()

	if t.host == nil {
		return nil
	}

	var addrs []string
	for _, addr := range t.host.Addrs() {
		addrs = append(addrs, fmt.Sprintf("%s/p2p/%s", addr, t.host.ID()))
	}

	return addrs
}

// SetMessageHandler —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (t *Libp2pTransport) SetMessageHandler(handler func(peer.ID, []byte)) {
	t.mu.Lock()
	defer t.mu.Unlock()
	t.messageHandler = handler
}

// handleStream –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏
func (t *Libp2pTransport) handleStream(stream network.Stream) {
	defer stream.Close()

	remotePeer := stream.Conn().RemotePeer()
	log.Printf("üì• –ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ –æ—Ç %s", remotePeer.ShortString())

	reader := bufio.NewReader(stream)
	for {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —á—Ç–µ–Ω–∏–µ
		stream.SetReadDeadline(time.Now().Add(STREAM_TIMEOUT))

		message, err := reader.ReadBytes('\n')
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–æ—Ç–æ–∫–∞: %v", err)
			return
		}

		// –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
		if len(message) > 0 && message[len(message)-1] == '\n' {
			message = message[:len(message)-1]
		}

		// –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
		if t.messageHandler != nil {
			t.messageHandler(remotePeer, message)
		}
	}
}

// discoverPeers –∏—â–µ—Ç –Ω–æ–≤—ã—Ö –ø–∏—Ä–æ–≤ –≤ —Å–µ—Ç–∏
func (t *Libp2pTransport) discoverPeers(ctx context.Context) {
	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø–æ–∏—Å–∫–æ–º
	time.Sleep(5 * time.Second)

	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DHT –≥–æ—Ç–æ–≤
			if t.routingDiscovery == nil {
				log.Printf("‚ö†Ô∏è DHT –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–∏—Ä–æ–≤")
				continue
			}

			// –ò—â–µ–º –Ω–æ–≤—ã—Ö –ø–∏—Ä–æ–≤
			peerChan, err := t.routingDiscovery.FindPeers(ctx, DISCOVERY_TAG)
			if err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤: %v", err)
				continue
			}

			peerCount := 0
			for p := range peerChan {
				if p.ID == t.host.ID() {
					continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è
				}

				peerCount++
				// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
				if err := t.host.Connect(ctx, p); err != nil {
					log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", p.ID.ShortString(), err)
				} else {
					log.Printf("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –Ω–æ–≤–æ–º—É –ø–∏—Ä—É: %s", p.ID.ShortString())
				}
			}

			if peerCount == 0 {
				log.Printf("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –ø–∏—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
			}
		}
	}
}
