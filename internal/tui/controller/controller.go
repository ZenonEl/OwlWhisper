package controller

import (
	"bufio"
	"log"
	"os"
	"sync"

	"OwlWhisper/pkg/interfaces"
)

// Controller —É–ø—Ä–∞–≤–ª—è–µ—Ç TUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
type Controller struct {
	coreService interfaces.CoreService
	running     bool
	mu          sync.RWMutex
}

// NewController —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π TUI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func NewController(coreService interfaces.CoreService) *Controller {
	return &Controller{
		coreService: coreService,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç TUI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *Controller) Start() error {
	c.mu.Lock()
	if c.running {
		c.mu.Unlock()
		return nil
	}
	c.running = true
	c.mu.Unlock()

	log.Println("ü¶â –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Owl Whisper!")
	log.Println("üîó P2P –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å")
	log.Println()
	log.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
	log.Println("  /help          - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
	log.Println("  /peers         - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤")
	log.Println("  /status        - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
	log.Println("  /quit          - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
	log.Println()
	log.Println("–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º")
	log.Println()

	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		message := scanner.Text()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω
		c.mu.RLock()
		if !c.running {
			c.mu.RUnlock()
			break
		}
		c.mu.RUnlock()

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
		if message == "/quit" {
			log.Println("üëã –í—ã—Ö–æ–¥ –∏–∑ TUI...")
			break
		}

		if message == "/help" {
			c.showHelp()
			continue
		}

		if message == "/peers" {
			c.showPeers()
			continue
		}

		if message == "/status" {
			c.showStatus()
			continue
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–∏—Ä–∞–º
		if message != "" {
			// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ CORE —Å–µ—Ä–≤–∏—Å
			log.Printf("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ: %s (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)", message)
		}
	}

	return scanner.Err()
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TUI –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *Controller) Stop() {
	c.mu.Lock()
	c.running = false
	c.mu.Unlock()
}

// showHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É
func (c *Controller) showHelp() {
	log.Println("üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:")
	log.Println("  /help          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
	log.Println("  /peers         - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤")
	log.Println("  /status        - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
	log.Println("  /quit          - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
	log.Println()
	log.Println("üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º")
}

// showPeers –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (c *Controller) showPeers() {
	peers := c.coreService.Network().GetPeers()

	if len(peers) == 0 {
		log.Println("üîå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤")
		return
	}

	log.Printf("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã (%d):", len(peers))
	for _, peer := range peers {
		log.Printf("  üü¢ %s", peer.ShortString())
	}
}

// showStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
func (c *Controller) showStatus() {
	status := c.coreService.GetStatus()

	log.Println("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:")
	log.Printf("  üöÄ –ó–∞–ø—É—â–µ–Ω: %v", status.Running)
	log.Printf("  üë• –ü–∏—Ä–æ–≤: %d", status.PeersCount)
	log.Printf("  üåê –¢–∏–ø —Å–µ—Ç–∏: %s", status.NetworkType)
	log.Printf("  ‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %d —Å–µ–∫", status.Uptime)
}
