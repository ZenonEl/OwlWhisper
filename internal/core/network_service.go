package core

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	"OwlWhisper/pkg/interfaces"

	"github.com/libp2p/go-libp2p/core/peer"
)

// NetworkService —Ä–µ–∞–ª–∏–∑—É–µ—Ç INetworkService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type NetworkService struct {
	transport      interfaces.ITransport
	contactService *ContactService
	chatService    *ChatService
	mu             sync.RWMutex
	ctx            context.Context
	cancel         context.CancelFunc
}

// NewNetworkService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä NetworkService
func NewNetworkService(transport interfaces.ITransport, contactService *ContactService, chatService *ChatService) *NetworkService {
	ctx, cancel := context.WithCancel(context.Background())

	service := &NetworkService{
		transport:      transport,
		contactService: contactService,
		chatService:    chatService,
		ctx:            ctx,
		cancel:         cancel,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	transport.SetMessageHandler(service.handleIncomingMessage)

	return service
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
func (s *NetworkService) Start(ctx context.Context) error {
	s.mu.Lock()
	defer s.mu.Unlock()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	if err := s.transport.Start(ctx); err != nil {
		return fmt.Errorf("failed to start transport: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
	go s.monitorConnections()

	log.Printf("üåê –°–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
func (s *NetworkService) Stop(ctx context.Context) error {
	s.mu.Lock()
	defer s.mu.Unlock()

	if s.cancel != nil {
		s.cancel()
	}

	if err := s.transport.Stop(ctx); err != nil {
		return fmt.Errorf("failed to stop transport: %w", err)
	}

	log.Printf("üåê –°–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

// ConnectToPeer –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É
func (s *NetworkService) ConnectToPeer(ctx context.Context, peerID peer.ID) error {
	s.mu.RLock()
	defer s.mu.RUnlock()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	if err := s.transport.Connect(ctx, peerID); err != nil {
		return fmt.Errorf("failed to connect to peer: %w", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
	if err := s.contactService.UpdateLastSeen(ctx, peerID); err != nil {
		log.Printf("Warning: failed to update contact status: %v", err)
	}

	log.Printf("üîó –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –ø–∏—Ä—É: %s", peerID.ShortString())
	return nil
}

// ConnectDirectly –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø–∏—Ä—É –ø–æ multiaddr
func (s *NetworkService) ConnectDirectly(ctx context.Context, multiaddrStr string) error {
	s.mu.RLock()
	defer s.mu.RUnlock()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	if err := s.transport.ConnectDirectly(ctx, multiaddrStr); err != nil {
		return fmt.Errorf("failed to connect directly: %w", err)
	}

	log.Printf("üîó –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫ %s", multiaddrStr)
	return nil
}

// DisconnectFromPeer –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞
func (s *NetworkService) DisconnectFromPeer(ctx context.Context, peerID peer.ID) error {
	s.mu.RLock()
	defer s.mu.RUnlock()

	// –û—Ç–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	if err := s.transport.Disconnect(ctx, peerID); err != nil {
		return fmt.Errorf("failed to disconnect from peer: %w", err)
	}

	// –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω
	if err := s.contactService.SetOffline(ctx, peerID); err != nil {
		log.Printf("Warning: failed to set contact offline: %v", err)
	}

	log.Printf("üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç –ø–∏—Ä–∞: %s", peerID.ShortString())
	return nil
}

// GetConnectedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (s *NetworkService) GetConnectedPeers() []peer.ID {
	s.mu.RLock()
	defer s.mu.RUnlock()

	return s.transport.GetConnectedPeers()
}

// GetPeerInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ
func (s *NetworkService) GetPeerInfo(peerID peer.ID) *interfaces.Contact {
	s.mu.RLock()
	defer s.mu.RUnlock()

	contact, err := s.contactService.GetContact(context.Background(), peerID)
	if err != nil {
		log.Printf("Warning: failed to get peer info: %v", err)
		return nil
	}

	return contact
}

// SetMessageHandler —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (s *NetworkService) SetMessageHandler(handler func(peer.ID, []byte)) {
	s.mu.Lock()
	defer s.mu.Unlock()

	// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
	s.transport.SetMessageHandler(handler)
}

// handleIncomingMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (s *NetworkService) handleIncomingMessage(fromPeer peer.ID, content []byte) {
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
	if err := s.contactService.UpdateLastSeen(context.Background(), fromPeer); err != nil {
		log.Printf("Warning: failed to update contact status: %v", err)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Ç-—Å–µ—Ä–≤–∏—Å
	if err := s.chatService.HandleIncomingMessage(fromPeer, content); err != nil {
		log.Printf("Error handling incoming message: %v", err)
	}
}

// monitorConnections –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
func (s *NetworkService) monitorConnections() {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-s.ctx.Done():
			return
		case <-ticker.C:
			s.updateConnectionStatuses()
		}
	}
}

// updateConnectionStatuses –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
func (s *NetworkService) updateConnectionStatuses() {
	s.mu.RLock()
	connectedPeers := s.transport.GetConnectedPeers()
	s.mu.RUnlock()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
	contacts, err := s.contactService.GetContacts(context.Background())
	if err != nil {
		log.Printf("Warning: failed to get contacts: %v", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
	connectedSet := make(map[string]bool)
	for _, peerID := range connectedPeers {
		connectedSet[peerID.String()] = true
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
	for _, contact := range contacts {
		isConnected := connectedSet[contact.PeerID]
		if contact.IsOnline != isConnected {
			contact.IsOnline = isConnected
			if err := s.contactService.UpdateContact(context.Background(), contact); err != nil {
				log.Printf("Warning: failed to update contact status: %v", err)
			}
		}
	}
}
