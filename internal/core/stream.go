package core

import (
	"bufio"
	"context"
	"fmt"
	"io"
	"time"

	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/core/protocol"
)

// StreamHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å—Ç—Ä–∏–º—ã
type StreamHandler struct {
	host          host.Host
	protocolID    protocol.ID
	onMessage     func(peer.ID, []byte)
	onStreamOpen  func(peer.ID, network.Stream)
	onStreamClose func(peer.ID)
}

// NewStreamHandler —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–∏–º–æ–≤
func NewStreamHandler(host host.Host, protocolID string) *StreamHandler {
	handler := &StreamHandler{
		host:       host,
		protocolID: protocol.ID(protocolID),
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–∏–º–æ–≤
	host.SetStreamHandler(handler.protocolID, handler.handleStream)

	return handler
}

// SetMessageCallback —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (sh *StreamHandler) SetMessageCallback(callback func(peer.ID, []byte)) {
	sh.onMessage = callback
}

// SetStreamOpenCallback —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∏–º–æ–≤
func (sh *StreamHandler) SetStreamOpenCallback(callback func(peer.ID, network.Stream)) {
	sh.onStreamOpen = callback
}

// SetStreamCloseCallback —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∏–º–æ–≤
func (sh *StreamHandler) SetStreamCloseCallback(callback func(peer.ID)) {
	sh.onStreamClose = callback
}

// handleStream –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Å—Ç—Ä–∏–º (–∞–Ω–∞–ª–æ–≥ handleStream –∏–∑ poc.go)
func (sh *StreamHandler) handleStream(stream network.Stream) {
	remotePeer := stream.Conn().RemotePeer()
	Info("üì° –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º –æ—Ç %s", remotePeer.ShortString())

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∏–º–∞
	if sh.onStreamOpen != nil {
		sh.onStreamOpen(remotePeer, stream)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∏–º–∞
	go sh.handleStreamAsync(stream, remotePeer)
}

// handleStreamAsync –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–º
func (sh *StreamHandler) handleStreamAsync(stream network.Stream, remotePeer peer.ID) {
	defer func() {
		stream.Close()
		if sh.onStreamClose != nil {
			sh.onStreamClose(remotePeer)
		}
	}()

	// –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
	reader := bufio.NewReader(stream)

	// –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	for {
		str, err := reader.ReadString('\n')
		if err != nil {
			if err != io.EOF {
				Warn("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç %s: %v", remotePeer.ShortString(), err)
			}
			return
		}

		// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
		if sh.onMessage != nil {
			sh.onMessage(remotePeer, []byte(str))
		}
	}
}

// ChatSession –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é —á–∞—Ç–∞ —Å –ø–∏—Ä–æ–º
type ChatSession struct {
	stream     network.Stream
	remotePeer peer.ID
	host       host.Host
	writer     *bufio.Writer
	done       chan struct{}
}

// NewChatSession —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
func NewChatSession(stream network.Stream, host host.Host) *ChatSession {
	return &ChatSession{
		stream:     stream,
		remotePeer: stream.Conn().RemotePeer(),
		host:       host,
		writer:     bufio.NewWriter(stream),
		done:       make(chan struct{}),
	}
}

// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç
func (cs *ChatSession) Send(data []byte) error {
	select {
	case <-cs.done:
		return fmt.Errorf("—Å–µ—Å—Å–∏—è —á–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
	default:
		_, err := cs.writer.Write(data)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %w", err)
		}

		err = cs.writer.Flush()
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ flush: %w", err)
		}

		return nil
	}
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func (cs *ChatSession) SendMessage(message string) error {
	return cs.Send([]byte(message))
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é —á–∞—Ç–∞
func (cs *ChatSession) Close() {
	select {
	case <-cs.done:
		return
	default:
		close(cs.done)
		cs.stream.Close()
	}
}

// GetRemotePeer –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞
func (cs *ChatSession) GetRemotePeer() peer.ID {
	return cs.remotePeer
}

// IsClosed –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ —Å–µ—Å—Å–∏—è
func (cs *ChatSession) IsClosed() bool {
	select {
	case <-cs.done:
		return true
	default:
		return false
	}
}

// CreateStream —Å–æ–∑–¥–∞–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–π —Å—Ç—Ä–∏–º –∫ –ø–∏—Ä—É (–∞–Ω–∞–ª–æ–≥ NewStream –∏–∑ poc.go)
func (sh *StreamHandler) CreateStream(ctx context.Context, peerID peer.ID, timeout time.Duration) (network.Stream, error) {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∏–º–∞
	streamCtx, streamCancel := context.WithTimeout(ctx, timeout)
	defer streamCancel()

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
	stream, err := sh.host.NewStream(streamCtx, peerID, sh.protocolID)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–º: %w", err)
	}

	Info("‚úÖ –°—Ç—Ä–∏–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∫ %s", peerID.ShortString())
	return stream, nil
}

// CreateStreamWithRetry —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∏–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
func (sh *StreamHandler) CreateStreamWithRetry(ctx context.Context, peerID peer.ID, timeout time.Duration, maxRetries int) (network.Stream, error) {
	var lastErr error

	for attempt := 0; attempt < maxRetries; attempt++ {
		if attempt > 0 {
			Info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∏–º–∞ #%d –∫ %s", attempt+1, peerID.ShortString())
			time.Sleep(time.Duration(attempt) * time.Second) // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
		}

		stream, err := sh.CreateStream(ctx, peerID, timeout)
		if err == nil {
			return stream, nil
		}

		lastErr = err
		Warn("‚ùå –ü–æ–ø—ã—Ç–∫–∞ #%d —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∏–º–∞ –∫ %s –Ω–µ —É–¥–∞–ª–∞—Å—å: %v", attempt+1, peerID.ShortString(), err)
	}

	return nil, fmt.Errorf("–≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∏–º–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: %w", lastErr)
}

// GetActiveStreams –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø–∏—Ä—É
func (sh *StreamHandler) GetActiveStreams(peerID peer.ID) []network.Conn {
	return sh.host.Network().ConnsToPeer(peerID)
}

// CloseStream –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∏–º
func (sh *StreamHandler) CloseStream(stream network.Stream) {
	stream.Close()
}

// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∏—Ä—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º
func (sh *StreamHandler) Send(peerID peer.ID, data []byte) error {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
	stream, err := sh.CreateStream(context.Background(), peerID, 30*time.Second)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: %w", err)
	}
	defer stream.Close()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	_, err = stream.Write(data)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: %w", err)
	}

	Info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –±–∞–π—Ç –∫ %s", len(data), peerID.ShortString())
	return nil
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∏—Ä—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func (sh *StreamHandler) SendMessage(peerID peer.ID, message string) error {
	return sh.Send(peerID, []byte(message))
}
