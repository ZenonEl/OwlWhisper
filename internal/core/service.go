package core

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	"OwlWhisper/internal/core/network"
	"OwlWhisper/pkg/interfaces"
)

// Service —Ä–µ–∞–ª–∏–∑—É–µ—Ç CoreService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type Service struct {
	networkService interfaces.NetworkService
	messageService interfaces.MessageService
	fileService    interfaces.FileService

	config *interfaces.Config

	startTime time.Time
	running   bool
	mu        sync.RWMutex

	ctx    context.Context
	cancel context.CancelFunc
}

// NewService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π CORE —Å–µ—Ä–≤–∏—Å
func NewService(config *interfaces.Config) (*Service, error) {
	ctx, cancel := context.WithCancel(context.Background())

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
	networkService, err := network.NewService(&interfaces.NetworkConfig{
		ListenPort:       config.Network.ListenPort,
		EnableNAT:        config.Network.EnableNAT,
		EnableHolePunch:  config.Network.EnableHolePunch,
		EnableRelay:      config.Network.EnableRelay,
		DiscoveryTimeout: config.Network.DiscoveryTimeout,
	})
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å: %w", err)
	}

	// TODO: –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤
	// messageService := messages.NewService(config)
	// fileService := files.NewService(config)

	service := &Service{
		networkService: networkService,
		// messageService: messageService,
		// fileService:    fileService,
		config: config,
		ctx:    ctx,
		cancel: cancel,
	}

	return service, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç CORE —Å–µ—Ä–≤–∏—Å
func (s *Service) Start(ctx context.Context) error {
	s.mu.Lock()
	defer s.mu.Unlock()

	if s.running {
		return fmt.Errorf("—Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
	if err := s.networkService.Start(ctx); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å: %w", err)
	}

	// TODO: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤
	// if err := s.messageService.Start(ctx); err != nil {
	//     return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å —Å–æ–æ–±—â–µ–Ω–∏–π: %w", err)
	// }
	// if err := s.fileService.Start(ctx); err != nil {
	//     return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å —Ñ–∞–π–ª–æ–≤: %w", err)
	// }

	s.startTime = time.Now()
	s.running = true

	log.Println("üöÄ CORE —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç CORE —Å–µ—Ä–≤–∏—Å
func (s *Service) Stop(ctx context.Context) error {
	s.mu.Lock()
	defer s.mu.Unlock()

	if !s.running {
		return nil
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
	if err := s.networkService.Stop(ctx); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: %v", err)
	}

	// TODO: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤
	// if err := s.messageService.Stop(ctx); err != nil {
	//     log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
	// }
	// if err := s.fileService.Stop(ctx); err != nil {
	//     log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ —Ñ–∞–π–ª–æ–≤: %v", err)
	// }

	s.running = false
	s.cancel()

	log.Println("üõë CORE —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

// GetStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
func (s *Service) GetStatus() interfaces.ServiceStatus {
	s.mu.RLock()
	defer s.mu.RUnlock()

	var uptime int64
	if s.running {
		uptime = int64(time.Since(s.startTime).Seconds())
	}

	return interfaces.ServiceStatus{
		Running:     s.running,
		PeersCount:  len(s.networkService.GetPeers()),
		NetworkType: "mixed", // TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–µ—Ç–∏
		Uptime:      uptime,
	}
}

// Network –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
func (s *Service) Network() interfaces.NetworkService {
	return s.networkService
}

// Messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Å–æ–æ–±—â–µ–Ω–∏–π
func (s *Service) Messages() interfaces.MessageService {
	return s.messageService
}

// Files –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Ñ–∞–π–ª–æ–≤
func (s *Service) Files() interfaces.FileService {
	return s.fileService
}
