package core

import (
	"context"
	"fmt"
	"log"
	"sync"

	"github.com/libp2p/go-libp2p/core/peer"
)

// ICoreController - —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ–≥–æ Core —Å–ª–æ—è
type ICoreController interface {
	// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
	Start() error

	// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
	Stop() error

	// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
	Broadcast(data []byte) error

	// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
	Send(peerID peer.ID, data []byte) error

	// GetMyID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
	GetMyID() string

	// GetPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	GetPeers() []peer.ID

	// Messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
	Messages() <-chan RawMessage
}

// CoreController —Ä–µ–∞–ª–∏–∑—É–µ—Ç ICoreController –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type CoreController struct {
	node      *Node
	discovery *DiscoveryManager

	ctx    context.Context
	cancel context.CancelFunc

	// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	mu sync.RWMutex

	// –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
	running bool
}

// NewCoreController —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func NewCoreController(ctx context.Context) (*CoreController, error) {
	ctx, cancel := context.WithCancel(ctx)

	// –°–æ–∑–¥–∞–µ–º Node
	node, err := NewNode(ctx)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Node: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º DiscoveryManager —Å callback –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∏—Ä–æ–≤
	discovery, err := NewDiscoveryManager(ctx, node.GetHost(), func(pi peer.AddrInfo) {
		// –ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–∏—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ Node
		node.AddPeer(pi.ID)
	})
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DiscoveryManager: %w", err)
	}

	controller := &CoreController{
		node:      node,
		discovery: discovery,
		ctx:       ctx,
		cancel:    cancel,
	}

	return controller, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *CoreController) Start() error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º Node
	if err := c.node.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Node: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º Discovery
	if err := c.discovery.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Discovery: %w", err)
	}

	c.running = true
	log.Println("üöÄ Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω")

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *CoreController) Stop() error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.running {
		return nil
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Discovery
	if err := c.discovery.Stop(); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Discovery: %v", err)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node
	if err := c.node.Stop(); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Node: %v", err)
	}

	// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	c.cancel()

	c.running = false
	log.Println("üõë Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

	return nil
}

// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (c *CoreController) Broadcast(data []byte) error {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	return c.node.Broadcast(data)
}

// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
func (c *CoreController) Send(peerID peer.ID, data []byte) error {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	return c.node.Send(peerID, data)
}

// GetMyID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
func (c *CoreController) GetMyID() string {
	return c.node.GetMyID()
}

// GetPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (c *CoreController) GetPeers() []peer.ID {
	return c.node.GetPeers()
}

// Messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (c *CoreController) Messages() <-chan RawMessage {
	return c.node.Messages()
}

// IsRunning –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *CoreController) IsRunning() bool {
	c.mu.RLock()
	defer c.mu.RUnlock()

	return c.running
}
