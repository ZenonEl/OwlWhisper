package core

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/libp2p/go-libp2p/core/crypto"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/peer"
)

// ICoreController - —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ–≥–æ Core —Å–ª–æ—è
type ICoreController interface {
	// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
	Start() error

	// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
	Stop() error

	// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
	Broadcast(data []byte) error

	// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
	Send(peerID peer.ID, data []byte) error

	// GetMyID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
	GetMyID() string

	// GetPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	GetPeers() []peer.ID

	// Messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
	Messages() <-chan RawMessage

	// GetHost –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–µ–ª
	GetHost() host.Host

	// –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
	GetMyProfile() *ProfileInfo
	UpdateMyProfile(nickname string) error
	GetPeerProfile(peerID peer.ID) *ProfileInfo
	SendProfileToPeer(peerID peer.ID) error
}

// ProfileInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type ProfileInfo struct {
	Nickname      string
	Discriminator string
	DisplayName   string
	PeerID        string
	LastSeen      time.Time
	IsOnline      bool
}

// CoreController —Ä–µ–∞–ª–∏–∑—É–µ—Ç ICoreController –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type CoreController struct {
	node      *Node
	discovery *DiscoveryManager

	ctx    context.Context
	cancel context.CancelFunc

	// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	mu sync.RWMutex

	// –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
	running bool

	// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userProfile *UserProfile
}

// NewCoreController —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func NewCoreController(ctx context.Context) (*CoreController, error) {
	ctx, cancel := context.WithCancel(ctx)

	// –°–æ–∑–¥–∞–µ–º Node
	node, err := NewNode(ctx)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Node: %w", err)
	}

	return createControllerFromNode(ctx, cancel, node)
}

// NewCoreControllerWithKey —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
func NewCoreControllerWithKey(ctx context.Context, privKey crypto.PrivKey) (*CoreController, error) {
	ctx, cancel := context.WithCancel(ctx)

	// –°–æ–∑–¥–∞–µ–º PersistenceManager
	persistence, err := NewPersistenceManager()
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PersistenceManager: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º Node —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
	node, err := NewNodeWithKey(ctx, privKey, persistence)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Node —Å –∫–ª—é—á–æ–º: %w", err)
	}

	return createControllerFromNode(ctx, cancel, node)
}

// NewCoreControllerWithKeyBytes —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞
func NewCoreControllerWithKeyBytes(ctx context.Context, keyBytes []byte) (*CoreController, error) {
	ctx, cancel := context.WithCancel(ctx)

	// –°–æ–∑–¥–∞–µ–º PersistenceManager
	persistence, err := NewPersistenceManager()
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PersistenceManager: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º Node —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞
	node, err := NewNodeWithKeyBytes(ctx, keyBytes, persistence)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Node —Å –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞: %w", err)
	}

	return createControllerFromNode(ctx, cancel, node)
}

// createControllerFromNode —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞
func createControllerFromNode(ctx context.Context, cancel context.CancelFunc, node *Node) (*CoreController, error) {
	// –°–æ–∑–¥–∞–µ–º DiscoveryManager —Å callback –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∏—Ä–æ–≤
	discovery, err := NewDiscoveryManager(ctx, node.GetHost(), func(pi peer.AddrInfo) {
		// –ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–∏—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ Node
		node.AddPeer(pi.ID)
	})
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DiscoveryManager: %w", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userProfile, err := node.persistence.LoadProfile()
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %w", err)
	}

	controller := &CoreController{
		node:        node,
		discovery:   discovery,
		ctx:         ctx,
		cancel:      cancel,
		userProfile: userProfile,
	}

	return controller, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *CoreController) Start() error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º Node
	if err := c.node.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Node: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º Discovery
	if err := c.discovery.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Discovery: %w", err)
	}

	c.running = true
	Info("üöÄ Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω")

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *CoreController) Stop() error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.running {
		return nil
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Discovery
	if err := c.discovery.Stop(); err != nil {
		Warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Discovery: %v", err)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node
	if err := c.node.Stop(); err != nil {
		Warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Discovery: %v", err)
	}

	// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	c.cancel()

	c.running = false
	Info("üõë Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

	return nil
}

// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (c *CoreController) Broadcast(data []byte) error {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	return c.node.Broadcast(data)
}

// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
func (c *CoreController) Send(peerID peer.ID, data []byte) error {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	return c.node.Send(peerID, data)
}

// GetMyID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
func (c *CoreController) GetMyID() string {
	return c.node.GetMyID()
}

// GetPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (c *CoreController) GetPeers() []peer.ID {
	return c.node.GetPeers()
}

// Messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (c *CoreController) Messages() <-chan RawMessage {
	return c.node.Messages()
}

// GetHost –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–µ–ª
func (c *CoreController) GetHost() host.Host {
	return c.node.GetHost()
}

// IsRunning –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *CoreController) IsRunning() bool {
	c.mu.RLock()
	defer c.mu.RUnlock()

	return c.running
}

// IsConnected –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–∏—Ä
func (c *CoreController) IsConnected(peerID peer.ID) bool {
	return c.node.IsConnected(peerID)
}

// GetMyProfile –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
func (c *CoreController) GetMyProfile() *ProfileInfo {
	c.mu.RLock()
	defer c.mu.RUnlock()

	peerID := c.GetMyID()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º discriminator –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 —Å–∏–º–≤–æ–ª–æ–≤ PeerID
	discriminator := ""
	if len(peerID) >= 6 {
		discriminator = "#" + peerID[len(peerID)-6:]
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
	nickname := "Anonymous"
	displayName := "Anonymous" + discriminator
	if c.userProfile != nil {
		nickname = c.userProfile.Nickname
		if nickname != "" && nickname != "Anonymous" {
			displayName = nickname + discriminator
		}
	}

	return &ProfileInfo{
		Nickname:      nickname,
		Discriminator: discriminator,
		DisplayName:   displayName,
		PeerID:        peerID,
		LastSeen:      time.Now(),
		IsOnline:      true,
	}
}

// UpdateMyProfile –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
func (c *CoreController) UpdateMyProfile(nickname string) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
	if c.userProfile == nil {
		c.userProfile = &UserProfile{
			Nickname:    nickname,
			DisplayName: nickname,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		}
	} else {
		c.userProfile.Nickname = nickname
		c.userProfile.DisplayName = nickname
		c.userProfile.UpdatedAt = time.Now()
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
	if err := c.node.persistence.SaveProfile(c.userProfile); err != nil {
		Error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: %v", err)
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: %w", err)
	}

	Info("üìù –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: %s", nickname)
	return nil
}

// GetPeerProfile –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞
func (c *CoreController) GetPeerProfile(peerID peer.ID) *ProfileInfo {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å
	// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	discriminator := ""
	peerIDStr := peerID.String()
	if len(peerIDStr) >= 6 {
		discriminator = "#" + peerIDStr[len(peerIDStr)-6:]
	}

	return &ProfileInfo{
		Nickname:      "Unknown",
		Discriminator: discriminator,
		DisplayName:   "Unknown" + discriminator,
		PeerID:        peerIDStr,
		LastSeen:      time.Now(),
		IsOnline:      c.IsConnected(peerID),
	}
}

// SendProfileToPeer –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É
func (c *CoreController) SendProfileToPeer(peerID peer.ID) error {
	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É ProfileInfo —á–µ—Ä–µ–∑ Protobuf
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
	Info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∫ %s", peerID.ShortString())
	return nil
}
