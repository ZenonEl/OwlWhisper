package core

import (
	"context"
	"encoding/json"
	"fmt"
	"sync"
	"time"

	"github.com/ipfs/go-cid"
	"github.com/libp2p/go-libp2p/core/crypto"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
)

// ICoreController - —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ–≥–æ Core —Å–ª–æ—è
type ICoreController interface {
	// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
	Start() error

	// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
	Stop() error

	// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
	Broadcast(data []byte) error

	// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
	Send(peerID peer.ID, data []byte) error

	// GetMyID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
	GetMyID() string

	// GetConnectedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	GetConnectedPeers() []peer.ID

	// GetProtectedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	GetProtectedPeers() []peer.ID

	// AddProtectedPeer –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∏—Ä–∞ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ
	AddProtectedPeer(peerID peer.ID) error

	// RemoveProtectedPeer —É–¥–∞–ª—è–µ—Ç –ø–∏—Ä–∞ –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
	RemoveProtectedPeer(peerID peer.ID) error

	// IsProtectedPeer –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Ä –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
	IsProtectedPeer(peerID peer.ID) bool

	// GetConnectionLimits –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	GetConnectionLimits() map[string]interface{}

	// –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
	EnableAutoReconnect()
	DisableAutoReconnect()
	IsAutoReconnectEnabled() bool
	GetReconnectAttempts(peerID peer.ID) int

	// GetNetworkStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	GetNetworkStats() map[string]interface{}

	// FindPeer –∏—â–µ—Ç –ø–∏—Ä–∞ –≤ —Å–µ—Ç–∏ –ø–æ PeerID
	FindPeer(peerID peer.ID) (*peer.AddrInfo, error)

	// FindProvidersForContent –∏—â–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ DHT –ø–æ ContentID
	FindProvidersForContent(contentID string) ([]peer.AddrInfo, error)

	// ProvideContent –∞–Ω–æ–Ω—Å–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ DHT
	ProvideContent(contentID string) error

	// GetConnectionQuality –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∏—Ä–æ–º
	GetConnectionQuality(peerID peer.ID) map[string]interface{}

	// Messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
	Messages() <-chan RawMessage

	// GetHost –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–µ–ª
	GetHost() host.Host

	// –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏

	// –ú–µ—Ç–æ–¥—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∏—Ä–æ–≤
	SavePeerToCache(peerID peer.ID, addresses []string, healthy bool) error
	LoadPeerFromCache(peerID peer.ID) (*PeerCacheEntry, error)
	GetAllCachedPeers() ([]PeerCacheEntry, error)
	GetHealthyCachedPeers() ([]PeerCacheEntry, error)
	RemovePeerFromCache(peerID peer.ID) error
	ClearPeerCache() error

	// –ú–µ—Ç–æ–¥—ã DHT routing table
	SaveDHTRoutingTable() error
	LoadDHTRoutingTableFromCache() error
	GetRoutingTableStats() map[string]interface{}
	GetDHTRoutingTableSize() int

	// –°–æ–±—ã—Ç–∏—è - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
	GetNextEvent() string
}

// CoreController —Ä–µ–∞–ª–∏–∑—É–µ—Ç ICoreController –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type CoreController struct {
	node      *Node
	discovery *DiscoveryManager

	ctx    context.Context
	cancel context.CancelFunc

	// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	mu sync.RWMutex

	// –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
	running bool

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
	announcementTicker *time.Ticker
	lastContentID      string
	lastAnnounceTime   time.Time
}

// NewCoreController —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func NewCoreController(ctx context.Context) (*CoreController, error) {
	ctx, cancel := context.WithCancel(ctx)

	// –°–æ–∑–¥–∞–µ–º Node
	node, err := NewNode(ctx)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Node: %w", err)
	}

	return createControllerFromNode(ctx, cancel, node)
}

// NewCoreControllerWithKey —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
func NewCoreControllerWithKey(ctx context.Context, privKey crypto.PrivKey) (*CoreController, error) {
	ctx, cancel := context.WithCancel(ctx)

	// –°–æ–∑–¥–∞–µ–º PersistenceManager
	persistence, err := NewPersistenceManager()
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PersistenceManager: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º Node —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
	node, err := NewNodeWithKey(ctx, privKey, persistence)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Node —Å –∫–ª—é—á–æ–º: %w", err)
	}

	return createControllerFromNode(ctx, cancel, node)
}

// NewCoreControllerWithKeyBytes —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞
func NewCoreControllerWithKeyBytes(ctx context.Context, keyBytes []byte) (*CoreController, error) {
	ctx, cancel := context.WithCancel(ctx)

	// –°–æ–∑–¥–∞–µ–º PersistenceManager
	persistence, err := NewPersistenceManager()
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PersistenceManager: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º Node —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞
	node, err := NewNodeWithKeyBytes(ctx, keyBytes, persistence)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Node —Å –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞: %w", err)
	}

	return createControllerFromNode(ctx, cancel, node)
}

// NewCoreControllerWithConfig —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
func NewCoreControllerWithConfig(ctx context.Context, config *NodeConfig) (*CoreController, error) {
	ctx, cancel := context.WithCancel(ctx)

	// –°–æ–∑–¥–∞–µ–º PersistenceManager
	persistence, err := NewPersistenceManager()
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PersistenceManager: %w", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
	privKey, err := persistence.LoadOrCreateIdentity()
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º Node —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
	node, err := NewNodeWithKeyAndConfig(ctx, privKey, persistence, config)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Node —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: %w", err)
	}

	return createControllerFromNode(ctx, cancel, node)
}

// NewCoreControllerWithKeyAndConfig —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å –∫–ª—é—á–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
func NewCoreControllerWithKeyAndConfig(ctx context.Context, privKey crypto.PrivKey, config *NodeConfig) (*CoreController, error) {
	ctx, cancel := context.WithCancel(ctx)

	// –°–æ–∑–¥–∞–µ–º PersistenceManager
	persistence, err := NewPersistenceManager()
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PersistenceManager: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º Node —Å –∫–ª—é—á–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
	node, err := NewNodeWithKeyAndConfig(ctx, privKey, persistence, config)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Node —Å –∫–ª—é—á–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: %w", err)
	}

	return createControllerFromNode(ctx, cancel, node)
}

// createControllerFromNode —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞
func createControllerFromNode(ctx context.Context, cancel context.CancelFunc, node *Node) (*CoreController, error) {
	// –°–æ–∑–¥–∞–µ–º DiscoveryManager —Å callback –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∏—Ä–æ–≤
	discovery, err := NewDiscoveryManager(ctx, node.GetHost(), func(pi peer.AddrInfo) {
		// –ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–∏—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ Node
		node.AddPeer(pi.ID)
	}, node.GetEventManager())
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DiscoveryManager: %w", err)
	}

	controller := &CoreController{
		node:      node,
		discovery: discovery,
		ctx:       ctx,
		cancel:    cancel,
	}

	return controller, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *CoreController) Start() error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º Node
	if err := c.node.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Node: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º Discovery
	if err := c.discovery.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Discovery: %w", err)
	}

	c.running = true
	Info("üöÄ Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å ContentID
	if c.lastContentID != "" {
		c.startPeriodicAnnouncement()
	}

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *CoreController) Stop() error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.running {
		return nil
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Discovery
	if err := c.discovery.Stop(); err != nil {
		Warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Discovery: %v", err)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node
	if err := c.node.Stop(); err != nil {
		Warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Discovery: %v", err)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
	if c.announcementTicker != nil {
		c.announcementTicker.Stop()
		c.announcementTicker = nil
	}

	// –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	c.cancel()

	c.running = false
	Info("üõë Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

	return nil
}

// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (c *CoreController) Broadcast(data []byte) error {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	return c.node.Broadcast(data)
}

// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
func (c *CoreController) Send(peerID peer.ID, data []byte) error {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	return c.node.Send(peerID, data)
}

// GetMyID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
func (c *CoreController) GetMyID() string {
	return c.node.GetMyID()
}

// GetConnectedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (c *CoreController) GetConnectedPeers() []peer.ID {
	return c.node.GetConnectedPeers()
}

// GetProtectedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (c *CoreController) GetProtectedPeers() []peer.ID {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return nil
	}

	return c.node.GetProtectedPeers()
}

// AddProtectedPeer –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∏—Ä–∞ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ
func (c *CoreController) AddProtectedPeer(peerID peer.ID) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	c.node.AddProtectedPeer(peerID)
	return nil
}

// RemoveProtectedPeer —É–¥–∞–ª—è–µ—Ç –ø–∏—Ä–∞ –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
func (c *CoreController) RemoveProtectedPeer(peerID peer.ID) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	if !c.node.IsProtectedPeer(peerID) {
		return fmt.Errorf("–ø–∏—Ä %s –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞—â–∏—â–µ–Ω–Ω—ã–º", peerID.ShortString())
	}

	c.node.RemoveProtectedPeer(peerID)
	return nil
}

// IsProtectedPeer –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Ä –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
func (c *CoreController) IsProtectedPeer(peerID peer.ID) bool {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return false
	}

	return c.node.IsProtectedPeer(peerID)
}

// GetConnectionLimits –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func (c *CoreController) GetConnectionLimits() map[string]interface{} {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return map[string]interface{}{
			"status": "not_running",
		}
	}

	return c.node.GetConnectionLimits()
}

// EnableAutoReconnect –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (c *CoreController) EnableAutoReconnect() {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.running {
		return
	}

	c.node.EnableAutoReconnect()
}

// DisableAutoReconnect –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (c *CoreController) DisableAutoReconnect() {
	c.mu.Lock()
	defer c.mu.Unlock()

	if !c.running {
		return
	}

	c.node.DisableAutoReconnect()
}

// IsAutoReconnectEnabled –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (c *CoreController) IsAutoReconnectEnabled() bool {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return false
	}

	return c.node.IsAutoReconnectEnabled()
}

// GetReconnectAttempts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–∏—Ä–∞
func (c *CoreController) GetReconnectAttempts(peerID peer.ID) int {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return 0
	}

	return c.node.GetReconnectAttempts(peerID)
}

// GetNetworkStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
func (c *CoreController) GetNetworkStats() map[string]interface{} {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return map[string]interface{}{
			"status": "not_running",
		}
	}

	host := c.node.GetHost()
	if host == nil {
		return map[string]interface{}{
			"status": "no_host",
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ libp2p
	network := host.Network()
	peers := network.Peers()
	connections := network.Conns()

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
	protocolStats := make(map[string]int)
	for _, conn := range connections {
		for _, stream := range conn.GetStreams() {
			protocol := string(stream.Protocol())
			protocolStats[protocol]++
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DHT
	dhtStats := map[string]interface{}{
		"status": "unknown",
	}
	if c.discovery != nil {
		// TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DHT
		dhtStats["status"] = "active"
	}

	stats := map[string]interface{}{
		"status":            "running",
		"total_peers":       len(peers),
		"connected_peers":   len(c.node.GetConnectedPeers()),
		"total_connections": len(connections),
		"protocols":         protocolStats,
		"dht":               dhtStats,
		"my_peer_id":        c.GetMyID(),
		"listening_addrs":   host.Addrs(),
	}

	return stats
}

// FindPeer –∏—â–µ—Ç –ø–∏—Ä–∞ –≤ —Å–µ—Ç–∏ –ø–æ PeerID
func (c *CoreController) FindPeer(peerID peer.ID) (*peer.AddrInfo, error) {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return nil, fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ –º—ã —É–∂–µ –∫ —ç—Ç–æ–º—É –ø–∏—Ä—É
	if c.node.IsConnected(peerID) {
		host := c.node.GetHost()
		addrs := host.Peerstore().Addrs(peerID)
		return &peer.AddrInfo{
			ID:    peerID,
			Addrs: addrs,
		}, nil
	}

	// –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –∏—â–µ–º —á–µ—Ä–µ–∑ DHT
	if c.discovery != nil {
		// –ü–æ–ª—É—á–∞–µ–º DHT –∏–∑ discovery manager
		dht := c.discovery.GetDHT()
		if dht == nil {
			return nil, fmt.Errorf("DHT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		}

		// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è DHT –ø–æ–∏—Å–∫–∞
		// 30 —Å–µ–∫—É–Ω–¥ - —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π DHT
		findCtx, cancel := context.WithTimeout(c.ctx, 30*time.Second)
		defer cancel()

		// –ò—â–µ–º –ø–∏—Ä–∞ —á–µ—Ä–µ–∑ DHT
		addrInfo, err := dht.FindPeer(findCtx, peerID)
		if err != nil {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π "–Ω–µ –Ω–∞–π–¥–µ–Ω"
			if err.Error() == "routing: not found" {
				return nil, fmt.Errorf("–ø–∏—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DHT (–≤–µ—Ä–æ—è—Ç–Ω–æ, –æ—Ñ–ª–∞–π–Ω)", peerID.ShortString())
			}
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ DHT: %w", err)
		}

		Info("SUCCESS: –ü–∏—Ä %s —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω –≤ DHT", addrInfo.ID.ShortString())
		return &addrInfo, nil
	}

	return nil, fmt.Errorf("discovery manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
}

// FindProvidersForContent –∏—â–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ DHT –ø–æ ContentID
func (c *CoreController) FindProvidersForContent(contentID string) ([]peer.AddrInfo, error) {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return nil, fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	if c.discovery == nil {
		return nil, fmt.Errorf("DiscoveryManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º DHT –Ω–∞–ø—Ä—è–º—É—é
	dht := c.discovery.GetDHT()
	if dht == nil {
		return nil, fmt.Errorf("DHT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}

	Info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ DHT...")
	Info("üì¢ ContentID –¥–ª—è –ø–æ–∏—Å–∫–∞: %s", contentID)
	Info("üÜî –ù–∞—à Peer ID: %s", c.node.GetHost().ID().String())

	// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ DHT —Å–æ—Å—Ç–æ—è–Ω–∏—è
	Info("üåê –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞: %v", c.node.GetHost().Addrs())
	Info("üîó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d", len(c.node.GetHost().Network().Conns()))
	Info("üìä –†–∞–∑–º–µ—Ä DHT routing table: %d", c.GetDHTRoutingTableSize())

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap —É–∑–ª–∞–º
	bootstrapPeers := []string{
		"QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN",
		"QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa",
		"QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb",
	}
	for _, bpID := range bootstrapPeers {
		if bpPeerID, err := peer.Decode(bpID); err == nil {
			if c.node.GetHost().Network().Connectedness(bpPeerID) == network.Connected {
				Info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ bootstrap —É–∑–ª—É: %s", bpID)
			} else {
				Info("‚ùå –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ bootstrap —É–∑–ª—É: %s", bpID)
			}
		}
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º ContentID –≤ CID
	cid, err := cid.Decode(contentID)
	if err != nil {
		Error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ContentID: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ContentID: %w", err)
	}

	Info("üîë –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CID: %s", cid.String())
	Info("üì° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π DHT API –¥–ª—è –ø–æ–∏—Å–∫–∞")
	Info("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞: 60 —Å–µ–∫—É–Ω–¥")

	findCtx, cancel := context.WithTimeout(c.ctx, 60*time.Second) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
	defer cancel()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π DHT API –≤–º–µ—Å—Ç–æ routingDiscovery
	Info("üîé –í—ã–∑—ã–≤–∞–µ–º dht.FindProviders –Ω–∞–ø—Ä—è–º—É—é...")
	providers, err := dht.FindProviders(findCtx, cid)
	if err != nil {
		Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ DHT: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ DHT: %w", err)
	}

	Info("üì° –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
	Info("üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: %d", len(providers))

	// –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Å–µ–±—è
	var validProviders []peer.AddrInfo
	for i, peerInfo := range providers {
		Info("üîç –ù–∞–π–¥–µ–Ω –ø–∏—Ä #%d: %s", i+1, peerInfo.ID.String())
		Info("üìç –ê–¥—Ä–µ—Å–∞ –ø–∏—Ä–∞: %v", peerInfo.Addrs)

		// –ú—ã –Ω–µ —Ö–æ—Ç–∏–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∞–¥—Ä–µ—Å —Å–∞–º–æ–≥–æ —Å–µ–±—è, –µ—Å–ª–∏ –Ω–∞—à–ª–∏
		if peerInfo.ID != c.node.GetHost().ID() {
			validProviders = append(validProviders, peerInfo)
			Info("‚úÖ –ü–∏—Ä %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤", peerInfo.ID.ShortString())
		} else {
			Info("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è (Peer ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç)")
		}
	}

	Info("üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: %d", len(validProviders))

	if len(validProviders) == 0 {
		Warn("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", contentID)
		return nil, fmt.Errorf("–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", contentID)
	}

	Info("‚úÖ SUCCESS: –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ %s", contentID)
	for i, provider := range validProviders {
		Info("üìã –ü—Ä–æ–≤–∞–π–¥–µ—Ä #%d: %s (%v)", i+1, provider.ID.ShortString(), provider.Addrs)
	}

	return validProviders, nil
}

// ProvideContent –∞–Ω–æ–Ω—Å–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ DHT
func (c *CoreController) ProvideContent(contentID string) error {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return fmt.Errorf("–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	if c.discovery == nil {
		return fmt.Errorf("DiscoveryManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º DHT –Ω–∞–ø—Ä—è–º—É—é
	dht := c.discovery.GetDHT()
	if dht == nil {
		return fmt.Errorf("DHT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}

	Info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ DHT...")
	Info("üì¢ ContentID –¥–ª—è –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: %s", contentID)
	Info("üÜî –ù–∞—à Peer ID: %s", c.node.GetHost().ID().String())
	Info("üåê –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞: %v", c.node.GetHost().Addrs())

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º ContentID –≤ CID
	cid, err := cid.Decode(contentID)
	if err != nil {
		Error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ContentID: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ContentID: %w", err)
	}

	Info("üîë –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CID: %s", cid.String())

	// –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º —Å–µ–±—è –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ CID
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π DHT API –≤–º–µ—Å—Ç–æ routingDiscovery
	provideCtx, cancel := context.WithTimeout(c.ctx, 60*time.Second) // –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
	defer cancel()

	Info("üì° –í—ã–∑—ã–≤–∞–µ–º dht.Provide –Ω–∞–ø—Ä—è–º—É—é...")
	err = dht.Provide(provideCtx, cid, true) // true = –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å
	if err != nil {
		Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ DHT: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ DHT: %w", err)
	}

	Info("‚úÖ SUCCESS: –£–∑–µ–ª %s –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ %s", c.node.GetHost().ID().ShortString(), contentID)
	Info("üåç –ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–∏—Ä—ã –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –Ω–∞—Å –ø–æ ContentID: %s", contentID)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–æ–Ω—Å–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
	c.lastContentID = contentID
	c.lastAnnounceTime = time.Now()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
	c.startPeriodicAnnouncement()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å DHT
	rt := dht.RoutingTable()
	if rt != nil {
		Info("üìä DHT Routing Table: %d –ø–∏—Ä–æ–≤", rt.Size())
	}

	return nil
}

// GetConnectionQuality –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∏—Ä–æ–º
func (c *CoreController) GetConnectionQuality(peerID peer.ID) map[string]interface{} {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return map[string]interface{}{
			"status": "not_running",
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ –º—ã –∫ —ç—Ç–æ–º—É –ø–∏—Ä—É
	if !c.node.IsConnected(peerID) {
		return map[string]interface{}{
			"status": "not_connected",
		}
	}

	host := c.node.GetHost()
	if host == nil {
		return map[string]interface{}{
			"status": "no_host",
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
	network := host.Network()
	connections := network.ConnsToPeer(peerID)

	if len(connections) == 0 {
		return map[string]interface{}{
			"status": "no_connections",
		}
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	var totalStreams int
	var activeStreams int
	protocols := make(map[string]int)

	for _, conn := range connections {
		streams := conn.GetStreams()
		totalStreams += len(streams)

		for _, stream := range streams {
			protocol := string(stream.Protocol())
			protocols[protocol]++

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Å—Ç—Ä–∏–º
			if !stream.Stat().Opened.IsZero() {
				activeStreams++
			}
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –ø–∏—Ä–∞
	addrs := host.Peerstore().Addrs(peerID)

	quality := map[string]interface{}{
		"status":            "connected",
		"peer_id":           peerID.String(),
		"total_connections": len(connections),
		"total_streams":     totalStreams,
		"active_streams":    activeStreams,
		"protocols":         protocols,
		"addresses":         addrs,
		"latency_ms":        -1, // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
	}

	return quality
}

// Messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (c *CoreController) Messages() <-chan RawMessage {
	return c.node.Messages()
}

// GetHost –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–µ–ª
func (c *CoreController) GetHost() host.Host {
	return c.node.GetHost()
}

// SavePeerToCache —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∏—Ä–∞ –≤ –∫—ç—à
func (c *CoreController) SavePeerToCache(peerID peer.ID, addresses []string, healthy bool) error {
	if c.node == nil {
		return fmt.Errorf("Node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return c.node.SavePeerToCache(peerID, addresses, healthy)
}

// LoadPeerFromCache –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∏—Ä–∞ –∏–∑ –∫—ç—à–∞
func (c *CoreController) LoadPeerFromCache(peerID peer.ID) (*PeerCacheEntry, error) {
	if c.node == nil {
		return nil, fmt.Errorf("Node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return c.node.LoadPeerFromCache(peerID)
}

// GetAllCachedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (c *CoreController) GetAllCachedPeers() ([]PeerCacheEntry, error) {
	if c.node == nil {
		return nil, fmt.Errorf("Node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return c.node.GetAllCachedPeers()
}

// GetHealthyCachedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ "–∑–¥–æ—Ä–æ–≤—ã—Ö" –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (c *CoreController) GetHealthyCachedPeers() ([]PeerCacheEntry, error) {
	if c.node == nil {
		return nil, fmt.Errorf("Node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return c.node.GetHealthyCachedPeers()
}

// RemovePeerFromCache —É–¥–∞–ª—è–µ—Ç –ø–∏—Ä–∞ –∏–∑ –∫—ç—à–∞
func (c *CoreController) RemovePeerFromCache(peerID peer.ID) error {
	if c.node == nil {
		return fmt.Errorf("Node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return c.node.RemovePeerFromCache(peerID)
}

// ClearPeerCache –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à –ø–∏—Ä–æ–≤
func (c *CoreController) ClearPeerCache() error {
	if c.node == nil {
		return fmt.Errorf("Node –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return c.node.ClearPeerCache()
}

// SaveDHTRoutingTable —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç DHT routing table –≤ –∫—ç—à
func (c *CoreController) SaveDHTRoutingTable() error {
	if c.discovery == nil {
		return fmt.Errorf("DiscoveryManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return c.discovery.SaveDHTRoutingTable(c.node.persistence)
}

// LoadDHTRoutingTableFromCache –∑–∞–≥—Ä—É–∂–∞–µ—Ç DHT routing table –∏–∑ –∫—ç—à–∞
func (c *CoreController) LoadDHTRoutingTableFromCache() error {
	if c.discovery == nil {
		return fmt.Errorf("DiscoveryManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return c.discovery.LoadDHTRoutingTableFromCache(c.node.persistence)
}

// GetRoutingTableStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DHT routing table
func (c *CoreController) GetRoutingTableStats() map[string]interface{} {
	if c.discovery == nil {
		return map[string]interface{}{
			"status": "discovery_unavailable",
		}
	}
	return c.discovery.GetRoutingTableStats()
}

// GetDHTRoutingTableSize –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä DHT routing table –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
func (c *CoreController) GetDHTRoutingTableSize() int {
	if c.discovery == nil {
		return 0
	}

	dht := c.discovery.GetDHT()
	if dht == nil {
		return 0
	}

	rt := dht.RoutingTable()
	if rt == nil {
		return 0
	}

	return rt.Size()
}

// IsRunning –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
func (c *CoreController) IsRunning() bool {
	c.mu.RLock()
	defer c.mu.RUnlock()

	return c.running
}

// IsConnected –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–∏—Ä
func (c *CoreController) IsConnected(peerID peer.ID) bool {
	return c.node.IsConnected(peerID)
}

// GetNextEvent –±–ª–æ–∫–∏—Ä—É—é—â–µ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
func (c *CoreController) GetNextEvent() string {
	c.mu.RLock()
	defer c.mu.RUnlock()

	if !c.running {
		return ""
	}

	if c.node == nil || c.node.GetEventManager() == nil {
		return ""
	}

	event, err := c.node.GetEventManager().GetNextEvent()
	if err != nil {
		return ""
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ JSON
	jsonData, err := json.Marshal(event)
	if err != nil {
		return ""
	}

	return string(jsonData)
}

// startPeriodicAnnouncement –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
func (c *CoreController) startPeriodicAnnouncement() {
	c.mu.Lock()
	defer c.mu.Unlock()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π ticker –µ—Å–ª–∏ –µ—Å—Ç—å
	if c.announcementTicker != nil {
		c.announcementTicker.Stop()
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ticker –¥–ª—è –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
	c.announcementTicker = time.NewTicker(5 * time.Minute)

	go func() {
		for {
			select {
			case <-c.announcementTicker.C:
				c.repeatAnnouncement()
			case <-c.ctx.Done():
				return
			}
		}
	}()

	Info("üîÑ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
}

// repeatAnnouncement –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∞–Ω–æ–Ω—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
func (c *CoreController) repeatAnnouncement() {
	c.mu.RLock()
	if c.lastContentID == "" {
		c.mu.RUnlock()
		return
	}
	contentID := c.lastContentID
	c.mu.RUnlock()

	Info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %s", contentID)

	// –ü–æ–ª—É—á–∞–µ–º DHT
	if c.discovery == nil {
		Warn("‚ö†Ô∏è DiscoveryManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è")
		return
	}

	dht := c.discovery.GetDHT()
	if dht == nil {
		Warn("‚ö†Ô∏è DHT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è")
		return
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º ContentID
	cid, err := cid.Decode(contentID)
	if err != nil {
		Error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è ContentID –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
		return
	}

	// –ü–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–æ–Ω—Å
	provideCtx, cancel := context.WithTimeout(c.ctx, 30*time.Second)
	defer cancel()

	err = dht.Provide(provideCtx, cid, true)
	if err != nil {
		Error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏: %v", err)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–æ–Ω—Å–∞
	c.mu.Lock()
	c.lastAnnounceTime = time.Now()
	c.mu.Unlock()

	Info("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}
