package core

import (
	"context"
	"crypto/rand"
	"crypto/sha256"
	"encoding/base64"
	"fmt"

	"github.com/ipfs/go-cid"
	"github.com/multiformats/go-multihash"

	"github.com/libp2p/go-libp2p/core/crypto"
)

// GenerateKeyBytes –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –±–∞–π—Ç—ã –∫–ª—é—á–∞ Ed25519
func GenerateKeyBytes() ([]byte, error) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π Ed25519
	privKey, _, err := crypto.GenerateKeyPairWithReader(crypto.Ed25519, 2048, rand.Reader)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: %w", err)
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–ª—é—á –≤ libp2p —Ñ–æ—Ä–º–∞—Ç (—Å—ã—Ä—ã–µ –±–∞–π—Ç—ã)
	keyBytes, err := crypto.MarshalPrivateKey(privKey)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–∞: %w", err)
	}

	Info("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã –∫–ª—é—á–∞ –¥–ª–∏–Ω–æ–π %d –±–∞–π—Ç", len(keyBytes))
	return keyBytes, nil
}

// GenerateKeyPair –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PeerID
func GenerateKeyPair() (string, error) {
	keyBytes, err := GenerateKeyBytes()
	if err != nil {
		return "", err
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PeerID
	ctx := context.Background()
	controller, err := NewCoreControllerWithKeyBytes(ctx, keyBytes)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º PeerID
	peerID := controller.GetMyID()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
	controller.Stop()

	return peerID, nil
}

// ComputeContentID –≤—ã—á–∏—Å–ª—è–µ—Ç ContentID –∏–∑ —Å—Ç—Ä–æ–∫–∏
func ComputeContentID(input string) string {
	hash := sha256.Sum256([]byte(input))
	return fmt.Sprintf("%x", hash)
}

// EncodeKeyToBase64 –∫–æ–¥–∏—Ä—É–µ—Ç –∫–ª—é—á –≤ base64
func EncodeKeyToBase64(keyBytes []byte) string {
	return base64.StdEncoding.EncodeToString(keyBytes)
}

// DecodeKeyFromBase64 –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∫–ª—é—á –∏–∑ base64
func DecodeKeyFromBase64(encodedKey string) ([]byte, error) {
	return base64.StdEncoding.DecodeString(encodedKey)
}

// CreateContentID —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CIDv1 –∏–∑ —Å—Ç—Ä–æ–∫–∏
func CreateContentID(data string) (string, error) {
	// 1. –•—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
	hash := sha256.Sum256([]byte(data))

	// 2. –°–æ–∑–¥–∞–µ–º multihash
	mh, err := multihash.Encode(hash[:], multihash.SHA2_256)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è multihash: %w", err)
	}

	// 3. –°–æ–∑–¥–∞–µ–º CIDv1 —Å –∫–æ–¥–µ–∫–æ–º raw
	// CID.Raw - —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å—ã—Ä—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	cidV1 := cid.NewCidV1(cid.Raw, mh)

	return cidV1.String(), nil
}
