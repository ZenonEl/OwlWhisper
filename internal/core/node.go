package core

import (
	"context"
	"fmt"
	"sync"

	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/multiformats/go-multiaddr"
)

// PROTOCOL_ID - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞—à–µ–≥–æ —á–∞—Ç-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
const PROTOCOL_ID = "/owl-whisper/1.0.0"

// NetworkEventLogger –ª–æ–≥–∏—Ä—É–µ—Ç —Å–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
type NetworkEventLogger struct{}

func (nel *NetworkEventLogger) Listen(network.Network, multiaddr.Multiaddr)      {}
func (nel *NetworkEventLogger) ListenClose(network.Network, multiaddr.Multiaddr) {}

func (nel *NetworkEventLogger) Connected(net network.Network, conn network.Conn) {
	Info("üîó EVENT: –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s", conn.RemotePeer().ShortString())
}

func (nel *NetworkEventLogger) Disconnected(net network.Network, conn network.Conn) {
	Info("üîå EVENT: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ", conn.RemotePeer().ShortString())
}

func (nel *NetworkEventLogger) OpenedStream(network.Network, network.Stream) {}
func (nel *NetworkEventLogger) ClosedStream(network.Network, network.Stream) {}

// Node –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π libp2p —É–∑–µ–ª
type Node struct {
	host host.Host
	ctx  context.Context

	// –ö–∞–Ω–∞–ª –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	messagesChan chan RawMessage

	// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ä–∞–º
	peersMutex sync.RWMutex
	peers      map[peer.ID]bool

	// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
	persistence *PersistenceManager
}

// NewNode —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π libp2p —É–∑–µ–ª
func NewNode(ctx context.Context) (*Node, error) {
	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
	persistence, err := NewPersistenceManager()
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: %w", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
	privKey, err := persistence.LoadOrCreateIdentity()
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º PeerID –∏–∑ –∫–ª—é—á–∞
	peerID, err := peer.IDFromPrivateKey(privKey)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PeerID –∏–∑ –∫–ª—é—á–∞: %w", err)
	}

	Info("üîë –ó–∞–≥—Ä—É–∂–µ–Ω –∫–ª—é—á –¥–ª—è PeerID: %s", peerID.String())

	opts := []libp2p.Option{
		libp2p.Identity(privKey),
		libp2p.EnableNATService(),
		libp2p.EnableHolePunching(),
		libp2p.EnableRelay(),
	}

	h, err := libp2p.New(opts...)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å libp2p —É–∑–µ–ª: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
	messagesChan := make(chan RawMessage, 100)

	node := &Node{
		host:         h,
		ctx:          ctx,
		messagesChan: messagesChan,
		persistence:  persistence,
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–æ–≤
	h.SetStreamHandler(PROTOCOL_ID, node.handleStream)

	// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
	h.Network().Notify(&NetworkEventLogger{})

	return node, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∑–µ–ª
func (n *Node) Start() error {
	Info("üöÄ –£–∑–µ–ª –∑–∞–ø—É—â–µ–Ω")
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∑–µ–ª
func (n *Node) Stop() error {
	if err := n.host.Close(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–∑–ª–∞: %w", err)
	}
	close(n.messagesChan)
	Info("üõë –£–∑–µ–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

// GetHost –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç host.Host –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
func (n *Node) GetHost() host.Host {
	return n.host
}

// GetMyID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
func (n *Node) GetMyID() string {
	return n.host.ID().String()
}

// GetPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (n *Node) GetPeers() []peer.ID {
	n.peersMutex.RLock()
	defer n.peersMutex.RUnlock()

	peers := make([]peer.ID, 0, len(n.peers))
	for peerID := range n.peers {
		peers = append(peers, peerID)
	}
	return peers
}

// IsConnected –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–∏—Ä
func (n *Node) IsConnected(peerID peer.ID) bool {
	n.peersMutex.RLock()
	defer n.peersMutex.RUnlock()

	return n.peers[peerID]
}

// AddPeer –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∏—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
func (n *Node) AddPeer(peerID peer.ID) {
	n.peersMutex.Lock()
	defer n.peersMutex.Unlock()

	n.peers[peerID] = true
}

// RemovePeer —É–¥–∞–ª—è–µ—Ç –ø–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
func (n *Node) RemovePeer(peerID peer.ID) {
	n.peersMutex.Lock()
	defer n.peersMutex.Unlock()

	delete(n.peers, peerID)
}

// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
func (n *Node) Send(peerID peer.ID, data []byte) error {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∫ –ø–∏—Ä—É
	stream, err := n.host.NewStream(n.ctx, peerID, PROTOCOL_ID)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ç–æ–∫ –∫ %s: %w", peerID.ShortString(), err)
	}
	defer stream.Close()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	_, err = stream.Write(data)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫ %s: %w", peerID.ShortString(), err)
	}

	Info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –±–∞–π—Ç –∫ %s", len(data), peerID.ShortString())
	return nil
}

// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (n *Node) Broadcast(data []byte) error {
	peers := n.GetPeers()
	if len(peers) == 0 {
		Warn("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ –¥–ª—è broadcast")
		return nil
	}

	var lastError error
	for _, peerID := range peers {
		if err := n.Send(peerID, data); err != nil {
			Error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫ %s: %v", peerID.ShortString(), err)
			lastError = err
		}
	}

	return lastError
}

// Messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (n *Node) Messages() <-chan RawMessage {
	return n.messagesChan
}

// handleStream –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏
func (n *Node) handleStream(stream network.Stream) {
	remotePeer := stream.Conn().RemotePeer()
	Info("üì• –ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ –æ—Ç %s", remotePeer.ShortString())

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
	n.AddPeer(remotePeer)

	// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
	buffer := make([]byte, 1024)
	bytesRead, err := stream.Read(buffer)
	if err != nil {
		Error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ—Ç %s: %v", remotePeer.ShortString(), err)
		stream.Close()
		return
	}

	// –°–æ–∑–¥–∞–µ–º RawMessage
	message := RawMessage{
		SenderID: remotePeer,
		Data:     buffer[:bytesRead],
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π
	select {
	case n.messagesChan <- message:
		Info("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å", remotePeer.ShortString())
	default:
		Warn("‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s –ø–æ—Ç–µ—Ä—è–Ω–æ", remotePeer.ShortString())
	}

	stream.Close()
}
