package core

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/crypto"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/host/autorelay"
	"github.com/libp2p/go-libp2p/p2p/security/noise"
	tls "github.com/libp2p/go-libp2p/p2p/security/tls"
	quic "github.com/libp2p/go-libp2p/p2p/transport/quic"
	"github.com/libp2p/go-libp2p/p2p/transport/tcp"
	webrtc "github.com/libp2p/go-libp2p/p2p/transport/webrtc"
	ws "github.com/libp2p/go-libp2p/p2p/transport/websocket"

	"github.com/multiformats/go-multiaddr"
)

// PROTOCOL_ID - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞—à–µ–≥–æ —á–∞—Ç-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
const PROTOCOL_ID = "/owl-whisper/1.0.0"

// –õ–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è ConnectionManager
const (
	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (bootstrap, DHT, mDNS)
	MAX_INFRASTRUCTURE_CONNECTIONS = 100
	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–∫–æ–Ω—Ç–∞–∫—Ç—ã)
	MAX_PROTECTED_CONNECTIONS = 100
	// –û–±—â–∏–π –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	MAX_TOTAL_CONNECTIONS = 200
)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const (
	// –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	RECONNECT_INTERVAL = 30 * time.Second
	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	MAX_RECONNECT_ATTEMPTS = 5
)

// NodeConfig —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Node
type NodeConfig struct {
	// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
	EnableTCP       bool
	EnableQUIC      bool
	EnableWebSocket bool
	EnableWebRTC    bool

	// –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
	EnableNoise bool
	EnableTLS   bool

	// NAT –∏ Relay
	EnableNATPortMap   bool
	EnableHolePunching bool
	EnableAutoNATv2    bool
	EnableRelay        bool
	EnableAutoRelay    bool

	// Relay –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	StaticRelays           []string
	UseBootstrapAsRelay    bool
	AutoRelayBootDelay     time.Duration
	AutoRelayMaxCandidates int

	// Discovery
	EnableMDNS bool
	EnableDHT  bool

	// –ü–æ—Ä—Ç –∏ –∞–¥—Ä–µ—Å–∞
	ListenAddresses []string

	// NAT Reachability
	ForceReachabilityPublic  bool
	ForceReachabilityPrivate bool

	// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤
	StreamCreationTimeout time.Duration
	StreamReadTimeout     time.Duration
	StreamWriteTimeout    time.Duration
}

// DefaultNodeConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—á–µ–≥–æ poc.go
func DefaultNodeConfig() *NodeConfig {
	return &NodeConfig{
		EnableTCP:              true,
		EnableQUIC:             true,
		EnableWebSocket:        true,
		EnableWebRTC:           true,
		EnableNoise:            true,
		EnableTLS:              true,
		EnableNATPortMap:       true,
		EnableHolePunching:     true,
		EnableAutoNATv2:        true,
		EnableRelay:            true,
		EnableAutoRelay:        true,
		UseBootstrapAsRelay:    true,
		AutoRelayBootDelay:     2 * time.Second,
		AutoRelayMaxCandidates: 10,
		EnableMDNS:             true,
		EnableDHT:              true,
		ListenAddresses: []string{
			"/ip4/0.0.0.0/tcp/0",
			"/ip4/0.0.0.0/tcp/0/ws",
			"/ip4/0.0.0.0/udp/0/quic-v1",
			"/ip4/0.0.0.0/udp/0/webrtc-direct",
		},
		StaticRelays: []string{
			"/dns4/relay.dev.svcs.d.foundation/tcp/443/wss/p2p/12D3KooWCKd2fU1g4k15u3J5i6pGk26h3g68d3amEa2S71G5v1jS",
		},
		ForceReachabilityPublic:  true,
		ForceReachabilityPrivate: false,
		StreamCreationTimeout:    60 * time.Second, // –∫–∞–∫ –≤ poc.go
		StreamReadTimeout:        30 * time.Second,
		StreamWriteTimeout:       10 * time.Second,
	}
}

// buildLibp2pOptions —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ü–∏–∏ libp2p –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func buildLibp2pOptions(privKey crypto.PrivKey, config *NodeConfig) []libp2p.Option {
	opts := []libp2p.Option{
		libp2p.Identity(privKey),
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
	if len(config.ListenAddresses) > 0 {
		opts = append(opts, libp2p.ListenAddrStrings(config.ListenAddresses...))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
	if config.EnableTCP {
		opts = append(opts, libp2p.Transport(tcp.NewTCPTransport))
	}
	if config.EnableQUIC {
		opts = append(opts, libp2p.Transport(quic.NewTransport))
	}
	if config.EnableWebSocket {
		opts = append(opts, libp2p.Transport(ws.New))
	}
	if config.EnableWebRTC {
		opts = append(opts, libp2p.Transport(webrtc.New))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
	if config.EnableNoise {
		opts = append(opts, libp2p.Security(noise.ID, noise.New))
	}
	if config.EnableTLS {
		opts = append(opts, libp2p.Security(tls.ID, tls.New))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º NAT –∏ hole punching
	if config.EnableNATPortMap {
		opts = append(opts, libp2p.NATPortMap())
	}
	if config.EnableHolePunching {
		opts = append(opts, libp2p.EnableHolePunching())
	}
	if config.EnableAutoNATv2 {
		opts = append(opts, libp2p.EnableAutoNATv2())
	}

	// –î–æ–±–∞–≤–ª—è–µ–º relay –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if config.EnableRelay {
		opts = append(opts, libp2p.EnableRelay())
	}

	// –î–æ–±–∞–≤–ª—è–µ–º autorelay –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	if config.EnableAutoRelay {
		// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö relay —É–∑–ª–æ–≤: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ + bootstrap
		var allRelays []peer.AddrInfo

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ relay
		for _, addrStr := range config.StaticRelays {
			pi, err := peer.AddrInfoFromString(addrStr)
			if err != nil {
				Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π relay-–∞–¥—Ä–µ—Å: %v", err)
				continue
			}
			allRelays = append(allRelays, *pi)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º bootstrap —É–∑–ª—ã –∫–∞–∫ relay –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
		if config.UseBootstrapAsRelay {
			bootstrapPeers := dht.GetDefaultBootstrapPeerAddrInfos()
			allRelays = append(allRelays, bootstrapPeers...)
		}

		// –í–∫–ª—é—á–∞–µ–º autorelay —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
		opts = append(opts,
			libp2p.EnableAutoRelayWithStaticRelays(allRelays),
			libp2p.EnableAutoRelayWithPeerSource(func(ctx context.Context, numPeers int) <-chan peer.AddrInfo {
				ch := make(chan peer.AddrInfo)
				go func() {
					defer close(ch)
					// –ò—Å–ø–æ–ª—å–∑—É–µ–º bootstrap —É–∑–ª—ã –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ä–æ–≤ –¥–ª—è autorelay
					bootstrapPeers := dht.GetDefaultBootstrapPeerAddrInfos()
					for _, pi := range bootstrapPeers {
						if numPeers <= 0 {
							break
						}
						select {
						case ch <- pi:
							numPeers--
						case <-ctx.Done():
							return
						}
					}
				}()
				return ch
			},
				autorelay.WithBootDelay(config.AutoRelayBootDelay),
				autorelay.WithMaxCandidates(config.AutoRelayMaxCandidates),
			),
		)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ NAT Reachability
	if config.ForceReachabilityPublic {
		opts = append(opts, libp2p.ForceReachabilityPublic())
	}
	if config.ForceReachabilityPrivate {
		opts = append(opts, libp2p.ForceReachabilityPrivate())
	}

	return opts
}

// NetworkEventLogger –ª–æ–≥–∏—Ä—É–µ—Ç —Å–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ EventManager
type NetworkEventLogger struct {
	node *Node
}

func (nel *NetworkEventLogger) Listen(network.Network, multiaddr.Multiaddr)      {}
func (nel *NetworkEventLogger) ListenClose(network.Network, multiaddr.Multiaddr) {}

func (nel *NetworkEventLogger) Connected(net network.Network, conn network.Conn) {
	peerID := conn.RemotePeer().String()
	Info("üîó EVENT: –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s", conn.RemotePeer().ShortString())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ EventManager
	if nel.node != nil && nel.node.eventManager != nil {
		event := PeerConnectedEvent(peerID)
		if err := nel.node.eventManager.PushEvent(event); err != nil {
			Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ PeerConnected: %v", err)
		}
	}
}

func (nel *NetworkEventLogger) Disconnected(net network.Network, conn network.Conn) {
	peerID := conn.RemotePeer().String()
	Info("üîå EVENT: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ", conn.RemotePeer().ShortString())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ EventManager
	if nel.node != nil && nel.node.eventManager != nil {
		event := PeerDisconnectedEvent(peerID)
		if err := nel.node.eventManager.PushEvent(event); err != nil {
			Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ PeerDisconnected: %v", err)
		}
	}
}

func (nel *NetworkEventLogger) OpenedStream(network.Network, network.Stream) {}
func (nel *NetworkEventLogger) ClosedStream(network.Network, network.Stream) {}

// Node –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π libp2p —É–∑–µ–ª
type Node struct {
	host host.Host
	ctx  context.Context

	// –ö–∞–Ω–∞–ª –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	messagesChan chan RawMessage

	// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∏—Ä–∞–º
	peersMutex sync.RWMutex
	peers      map[peer.ID]bool

	// –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
	persistence *PersistenceManager

	// DiscoveryManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DHT
	discovery *DiscoveryManager

	// –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	protectedPeersMutex sync.RWMutex
	protectedPeers      map[peer.ID]bool

	// ConnectionManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
	connManager interface {
		Protect(peer.ID, string)
		Unprotect(peer.ID, string) bool
		IsProtected(peer.ID, string) bool
	}

	// –õ–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	connectionLimits struct {
		infrastructure int // –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
		protected      int // –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
		total          int // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	}
	limitsMutex sync.RWMutex

	// –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
	reconnectManager struct {
		enabled     bool
		interval    time.Duration
		maxAttempts int
		attempts    map[peer.ID]int
	}
	reconnectMutex sync.RWMutex

	// EventManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏
	eventManager *EventManager

	// StreamHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–æ–≤ –∏ —á–∞—Ç–∞
	streamHandler *StreamHandler
}

// NewNode —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π libp2p —É–∑–µ–ª (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
func NewNode(ctx context.Context) (*Node, error) {
	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
	persistence, err := NewPersistenceManager()
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: %w", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
	privKey, err := persistence.LoadOrCreateIdentity()
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏: %w", err)
	}

	return NewNodeWithKey(ctx, privKey, persistence)
}

// NewNodeWithKeyBytes —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π libp2p —É–∑–µ–ª —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –±–∞–π—Ç–∞–º–∏ –∫–ª—é—á–∞
func NewNodeWithKeyBytes(ctx context.Context, keyBytes []byte, persistence *PersistenceManager) (*Node, error) {
	// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–ª—é—á –∏–∑ –±–∞–π—Ç–æ–≤
	privKey, err := crypto.UnmarshalPrivateKey(keyBytes)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª—é—á –∏–∑ –±–∞–π—Ç–æ–≤: %w", err)
	}

	return NewNodeWithKey(ctx, privKey, persistence)
}

// NewNodeWithKey —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π libp2p —É–∑–µ–ª —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
func NewNodeWithKey(ctx context.Context, privKey crypto.PrivKey, persistence *PersistenceManager) (*Node, error) {
	return NewNodeWithKeyAndConfig(ctx, privKey, persistence, DefaultNodeConfig())
}

// NewNodeWithKeyAndConfig —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π libp2p —É–∑–µ–ª —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
func NewNodeWithKeyAndConfig(ctx context.Context, privKey crypto.PrivKey, persistence *PersistenceManager, config *NodeConfig) (*Node, error) {
	// –ü–æ–ª—É—á–∞–µ–º PeerID –∏–∑ –∫–ª—é—á–∞
	peerID, err := peer.IDFromPrivateKey(privKey)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PeerID –∏–∑ –∫–ª—é—á–∞: %w", err)
	}

	Info("üîë –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª —Å –∫–ª—é—á–æ–º –¥–ª—è PeerID: %s", peerID.String())

	// –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ libp2p –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	opts := buildLibp2pOptions(privKey, config)

	h, err := libp2p.New(opts...)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å libp2p —É–∑–µ–ª: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
	messagesChan := make(chan RawMessage, 100)

	node := &Node{
		host:           h,
		ctx:            ctx,
		messagesChan:   messagesChan,
		peers:          make(map[peer.ID]bool), // üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø MAP!
		persistence:    persistence,
		protectedPeers: make(map[peer.ID]bool),
		connManager:    h.ConnManager(),
		eventManager:   NewEventManager(1000), // –û—á–µ—Ä–µ–¥—å –Ω–∞ 1000 —Å–æ–±—ã—Ç–∏–π
		streamHandler:  NewStreamHandler(h, PROTOCOL_ID, config),
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	node.reconnectManager.enabled = true
	node.reconnectManager.interval = RECONNECT_INTERVAL
	node.reconnectManager.maxAttempts = MAX_RECONNECT_ATTEMPTS
	node.reconnectManager.attempts = make(map[peer.ID]int)

	// StreamHandler —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Node

	// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
	h.Network().Notify(&NetworkEventLogger{node: node})

	// –°–æ–∑–¥–∞–µ–º DiscoveryManager
	discovery, err := NewDiscoveryManager(ctx, h, func(pi peer.AddrInfo) {
		node.AddPeer(pi.ID)
	}, node.eventManager)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DiscoveryManager: %w", err)
	}

	node.discovery = discovery

	return node, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∑–µ–ª
func (n *Node) Start() error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º DiscoveryManager
	if n.discovery != nil {
		if err := n.discovery.Start(); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å DiscoveryManager: %w", err)
		}
	}

	Info("üöÄ –£–∑–µ–ª –∑–∞–ø—É—â–µ–Ω")
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∑–µ–ª
func (n *Node) Stop() error {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º DHT routing table –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
	if err := n.SaveDHTRoutingTable(); err != nil {
		Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å DHT routing table: %v", err)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DiscoveryManager
	if n.discovery != nil {
		if err := n.discovery.Stop(); err != nil {
			Warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ DiscoveryManager: %v", err)
		}
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º EventManager
	if n.eventManager != nil {
		n.eventManager.Stop()
	}

	if err := n.host.Close(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–∑–ª–∞: %w", err)
	}
	close(n.messagesChan)
	Info("üõë –£–∑–µ–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

// GetHost –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç host.Host –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
func (n *Node) GetHost() host.Host {
	return n.host
}

// GetEventManager –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç EventManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏
func (n *Node) GetEventManager() *EventManager {
	return n.eventManager
}

// GetMyID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
func (n *Node) GetMyID() string {
	return n.host.ID().String()
}

// GetConnectedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (n *Node) GetConnectedPeers() []peer.ID {
	n.peersMutex.RLock()
	defer n.peersMutex.RUnlock()

	peers := make([]peer.ID, 0, len(n.peers))
	for peerID := range n.peers {
		peers = append(peers, peerID)
	}
	return peers
}

// IsConnected –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–∏—Ä
func (n *Node) IsConnected(peerID peer.ID) bool {
	n.peersMutex.RLock()
	defer n.peersMutex.RUnlock()

	return n.peers[peerID]
}

// AddPeer –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∏—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
func (n *Node) AddPeer(peerID peer.ID) {
	n.peersMutex.Lock()
	defer n.peersMutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	if !n.canAddInfrastructureConnection() {
		Warn("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø–∏—Ä–∞ %s", peerID.ShortString())
		return
	}

	n.peers[peerID] = true

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	if n.addInfrastructureConnection() {
		Info("üîó –î–æ–±–∞–≤–ª–µ–Ω –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø–∏—Ä %s (–≤—Å–µ–≥–æ: %d/%d)",
			peerID.ShortString(), n.connectionLimits.infrastructure, MAX_INFRASTRUCTURE_CONNECTIONS)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Ä–∞ –≤ –∫—ç—à
	go func() {
		addrs := n.host.Peerstore().Addrs(peerID)
		var addrStrings []string
		for _, addr := range addrs {
			addrStrings = append(addrStrings, addr.String())
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Ä "–∑–¥–æ—Ä–æ–≤—ã–º" (–µ—Å—Ç—å –∞–¥—Ä–µ—Å–∞)
		healthy := len(addrStrings) > 0

		if err := n.SavePeerToCache(peerID, addrStrings, healthy); err != nil {
			Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∏—Ä–∞ %s –≤ –∫—ç—à: %v", peerID.ShortString(), err)
		} else {
			Info("üíæ –ü–∏—Ä %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à", peerID.ShortString())
		}
	}()
}

// RemovePeer —É–¥–∞–ª—è–µ—Ç –ø–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
func (n *Node) RemovePeer(peerID peer.ID) {
	n.peersMutex.Lock()
	defer n.peersMutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–∏—Ä –≤ —Å–ø–∏—Å–∫–µ
	if n.peers[peerID] {
		delete(n.peers, peerID)

		// –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
		n.removeInfrastructureConnection()

		Info("üîå –£–¥–∞–ª–µ–Ω –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø–∏—Ä %s (–æ—Å—Ç–∞–ª–æ—Å—å: %d/%d)",
			peerID.ShortString(), n.connectionLimits.infrastructure, MAX_INFRASTRUCTURE_CONNECTIONS)
	}
}

// AddProtectedPeer –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–∏—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
func (n *Node) AddProtectedPeer(peerID peer.ID) {
	n.protectedPeersMutex.Lock()
	defer n.protectedPeersMutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	if !n.canAddProtectedConnection() {
		Warn("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –ø–∏—Ä–∞ %s", peerID.ShortString())
		return
	}

	n.protectedPeers[peerID] = true

	// –ó–∞—â–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —ç—Ç–∏–º –ø–∏—Ä–æ–º
	if n.connManager != nil {
		n.connManager.Protect(peerID, "owl-whisper-protected")
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	if n.addProtectedConnection() {
		Info("üîí –ü–∏—Ä %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ (–≤—Å–µ–≥–æ: %d/%d)",
			peerID.ShortString(), n.connectionLimits.protected, MAX_PROTECTED_CONNECTIONS)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞ –≤ –∫—ç—à –∫–∞–∫ "–∑–¥–æ—Ä–æ–≤–æ–≥–æ"
	go func() {
		addrs := n.host.Peerstore().Addrs(peerID)
		var addrStrings []string
		for _, addr := range addrs {
			addrStrings = append(addrStrings, addr.String())
		}

		// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è "–∑–¥–æ—Ä–æ–≤—ã–º–∏"
		if err := n.SavePeerToCache(peerID, addrStrings, true); err != nil {
			Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞ %s –≤ –∫—ç—à: %v", peerID.ShortString(), err)
		} else {
			Info("üíæ –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –ø–∏—Ä %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à", peerID.ShortString())
		}
	}()
}

// RemoveProtectedPeer —É–¥–∞–ª—è–µ—Ç –ø–∏—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
func (n *Node) RemoveProtectedPeer(peerID peer.ID) {
	n.protectedPeersMutex.Lock()
	defer n.protectedPeersMutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–∏—Ä –≤ —Å–ø–∏—Å–∫–µ
	if n.protectedPeers[peerID] {
		delete(n.protectedPeers, peerID)

		// –°–Ω–∏–º–∞–µ–º –∑–∞—â–∏—Ç—É —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		if n.connManager != nil {
			n.connManager.Unprotect(peerID, "owl-whisper-protected")
		}

		// –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
		n.removeProtectedConnection()

		Info("üîì –ü–∏—Ä %s —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö (–æ—Å—Ç–∞–ª–æ—Å—å: %d/%d)",
			peerID.ShortString(), n.connectionLimits.protected, MAX_PROTECTED_CONNECTIONS)
	}
}

// IsProtectedPeer –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Ä –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
func (n *Node) IsProtectedPeer(peerID peer.ID) bool {
	n.protectedPeersMutex.RLock()
	defer n.protectedPeersMutex.RUnlock()

	return n.protectedPeers[peerID]
}

// GetProtectedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (n *Node) GetProtectedPeers() []peer.ID {
	n.protectedPeersMutex.RLock()
	defer n.protectedPeersMutex.RUnlock()

	peers := make([]peer.ID, 0, len(n.protectedPeers))
	for peerID := range n.protectedPeers {
		peers = append(peers, peerID)
	}
	return peers
}

// GetConnectionLimits –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func (n *Node) GetConnectionLimits() map[string]interface{} {
	n.limitsMutex.RLock()
	defer n.limitsMutex.RUnlock()

	return map[string]interface{}{
		"infrastructure": map[string]interface{}{
			"current": n.connectionLimits.infrastructure,
			"max":     MAX_INFRASTRUCTURE_CONNECTIONS,
		},
		"protected": map[string]interface{}{
			"current": n.connectionLimits.protected,
			"max":     MAX_PROTECTED_CONNECTIONS,
		},
		"total": map[string]interface{}{
			"current": n.connectionLimits.total,
			"max":     MAX_TOTAL_CONNECTIONS,
		},
	}
}

// canAddInfrastructureConnection –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (n *Node) canAddInfrastructureConnection() bool {
	n.limitsMutex.RLock()
	defer n.limitsMutex.RUnlock()

	return n.connectionLimits.infrastructure < MAX_INFRASTRUCTURE_CONNECTIONS &&
		n.connectionLimits.total < MAX_TOTAL_CONNECTIONS
}

// canAddProtectedConnection –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (n *Node) canAddProtectedConnection() bool {
	n.limitsMutex.RLock()
	defer n.limitsMutex.RUnlock()

	return n.connectionLimits.protected < MAX_PROTECTED_CONNECTIONS &&
		n.connectionLimits.total < MAX_TOTAL_CONNECTIONS
}

// addInfrastructureConnection –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (n *Node) addInfrastructureConnection() bool {
	n.limitsMutex.Lock()
	defer n.limitsMutex.Unlock()

	if n.connectionLimits.infrastructure < MAX_INFRASTRUCTURE_CONNECTIONS &&
		n.connectionLimits.total < MAX_TOTAL_CONNECTIONS {
		n.connectionLimits.infrastructure++
		n.connectionLimits.total++
		return true
	}
	return false
}

// removeInfrastructureConnection —É–¥–∞–ª—è–µ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (n *Node) removeInfrastructureConnection() {
	n.limitsMutex.Lock()
	defer n.limitsMutex.Unlock()

	if n.connectionLimits.infrastructure > 0 {
		n.connectionLimits.infrastructure--
	}
	if n.connectionLimits.total > 0 {
		n.connectionLimits.total--
	}
}

// addProtectedConnection –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (n *Node) addProtectedConnection() bool {
	n.limitsMutex.Lock()
	defer n.limitsMutex.Unlock()

	if n.connectionLimits.protected < MAX_PROTECTED_CONNECTIONS &&
		n.connectionLimits.total < MAX_TOTAL_CONNECTIONS {
		n.connectionLimits.protected++
		n.connectionLimits.total++
		return true
	}
	return false
}

// removeProtectedConnection —É–¥–∞–ª—è–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (n *Node) removeProtectedConnection() {
	n.limitsMutex.Lock()
	defer n.limitsMutex.Unlock()

	if n.connectionLimits.protected > 0 {
		n.connectionLimits.protected--
	}
	if n.connectionLimits.total > 0 {
		n.connectionLimits.total--
	}
}

// EnableAutoReconnect –≤–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (n *Node) EnableAutoReconnect() {
	n.reconnectMutex.Lock()
	defer n.reconnectMutex.Unlock()

	n.reconnectManager.enabled = true
	Info("üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º –≤–∫–ª—é—á–µ–Ω–æ")
}

// DisableAutoReconnect –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (n *Node) DisableAutoReconnect() {
	n.reconnectMutex.Lock()
	defer n.reconnectMutex.Unlock()

	n.reconnectManager.enabled = false
	Info("‚è∏Ô∏è –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–æ")
}

// IsAutoReconnectEnabled –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
func (n *Node) IsAutoReconnectEnabled() bool {
	n.reconnectMutex.RLock()
	defer n.reconnectMutex.RUnlock()

	return n.reconnectManager.enabled
}

// GetReconnectAttempts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–∏—Ä–∞
func (n *Node) GetReconnectAttempts(peerID peer.ID) int {
	n.reconnectMutex.RLock()
	defer n.reconnectMutex.RUnlock()

	return n.reconnectManager.attempts[peerID]
}

// SavePeerToCache —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∏—Ä–∞ –≤ –∫—ç—à
func (n *Node) SavePeerToCache(peerID peer.ID, addresses []string, healthy bool) error {
	if n.persistence == nil {
		return fmt.Errorf("PersistenceManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.persistence.SavePeerToCache(peerID, addresses, healthy)
}

// LoadPeerFromCache –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∏—Ä–∞ –∏–∑ –∫—ç—à–∞
func (n *Node) LoadPeerFromCache(peerID peer.ID) (*PeerCacheEntry, error) {
	if n.persistence == nil {
		return nil, fmt.Errorf("PersistenceManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.persistence.LoadPeerFromCache(peerID)
}

// GetAllCachedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (n *Node) GetAllCachedPeers() ([]PeerCacheEntry, error) {
	if n.persistence == nil {
		return nil, fmt.Errorf("PersistenceManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.persistence.GetAllCachedPeers()
}

// GetHealthyCachedPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ "–∑–¥–æ—Ä–æ–≤—ã—Ö" –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (n *Node) GetHealthyCachedPeers() ([]PeerCacheEntry, error) {
	if n.persistence == nil {
		return nil, fmt.Errorf("PersistenceManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.persistence.GetHealthyCachedPeers()
}

// RemovePeerFromCache —É–¥–∞–ª—è–µ—Ç –ø–∏—Ä–∞ –∏–∑ –∫—ç—à–∞
func (n *Node) RemovePeerFromCache(peerID peer.ID) error {
	if n.persistence == nil {
		return fmt.Errorf("PersistenceManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.persistence.RemovePeerFromCache(peerID)
}

// ClearPeerCache –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à –ø–∏—Ä–æ–≤
func (n *Node) ClearPeerCache() error {
	if n.persistence == nil {
		return fmt.Errorf("PersistenceManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.persistence.ClearPeerCache()
}

// SaveDHTRoutingTable —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç DHT routing table –≤ –∫—ç—à
func (n *Node) SaveDHTRoutingTable() error {
	if n.discovery == nil {
		return fmt.Errorf("DiscoveryManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.discovery.SaveDHTRoutingTable(n.persistence)
}

// LoadDHTRoutingTableFromCache –∑–∞–≥—Ä—É–∂–∞–µ—Ç DHT routing table –∏–∑ –∫—ç—à–∞
func (n *Node) LoadDHTRoutingTableFromCache() error {
	if n.discovery == nil {
		return fmt.Errorf("DiscoveryManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.discovery.LoadDHTRoutingTableFromCache(n.persistence)
}

// GetRoutingTableStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DHT routing table
func (n *Node) GetRoutingTableStats() map[string]interface{} {
	if n.discovery == nil {
		return map[string]interface{}{
			"status": "discovery_unavailable",
		}
	}
	return n.discovery.GetRoutingTableStats()
}

// startReconnectLoop –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
func (n *Node) startReconnectLoop() {
	go func() {
		ticker := time.NewTicker(n.reconnectManager.interval)
		defer ticker.Stop()

		for {
			select {
			case <-n.ctx.Done():
				return
			case <-ticker.C:
				n.reconnectProtectedPeers()
			}
		}
	}()
}

// reconnectProtectedPeers –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (n *Node) reconnectProtectedPeers() {
	n.reconnectMutex.RLock()
	enabled := n.reconnectManager.enabled
	n.reconnectMutex.RUnlock()

	if !enabled {
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	protectedPeers := n.GetProtectedPeers()

	for _, peerID := range protectedPeers {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–∏—Ä
		if !n.IsConnected(peerID) {
			n.attemptReconnect(peerID)
		}
	}
}

// attemptReconnect –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
func (n *Node) attemptReconnect(peerID peer.ID) {
	n.reconnectMutex.Lock()
	attempts := n.reconnectManager.attempts[peerID]
	maxAttempts := n.reconnectManager.maxAttempts
	n.reconnectMutex.Unlock()

	if attempts >= maxAttempts {
		Warn("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∏—Ä—É %s (%d/%d)",
			peerID.ShortString(), attempts, maxAttempts)
		return
	}

	Info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –ø–∏—Ä—É %s (%d/%d)",
		peerID.ShortString(), attempts+1, maxAttempts)

	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ libp2p
	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
	n.reconnectMutex.Lock()
	n.reconnectManager.attempts[peerID]++
	n.reconnectMutex.Unlock()

	// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ host.Connect()
	// –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∞–¥—Ä–µ—Å–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
}

// Send –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–∏—Ä—É
func (n *Node) Send(peerID peer.ID, data []byte) error {
	if n.streamHandler == nil {
		return fmt.Errorf("StreamHandler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.streamHandler.Send(peerID, data)
}

// GetStreamHandler –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç StreamHandler –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∏–º–∞–º–∏
func (n *Node) GetStreamHandler() *StreamHandler {
	return n.streamHandler
}

// CreateStream —Å–æ–∑–¥–∞–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏–π —Å—Ç—Ä–∏–º –∫ –ø–∏—Ä—É
func (n *Node) CreateStream(ctx context.Context, peerID peer.ID, timeout time.Duration) (network.Stream, error) {
	if n.streamHandler == nil {
		return nil, fmt.Errorf("StreamHandler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.streamHandler.CreateStream(ctx, peerID, timeout)
}

// CreateStreamWithRetry —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∏–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
func (n *Node) CreateStreamWithRetry(ctx context.Context, peerID peer.ID, timeout time.Duration, maxRetries int) (network.Stream, error) {
	if n.streamHandler == nil {
		return nil, fmt.Errorf("StreamHandler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.streamHandler.CreateStreamWithRetry(ctx, peerID, timeout, maxRetries)
}

// SetMessageCallback —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (n *Node) SetMessageCallback(callback func(peer.ID, []byte)) {
	if n.streamHandler != nil {
		n.streamHandler.SetMessageCallback(callback)
	}
}

// SetStreamOpenCallback —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∏–º–æ–≤
func (n *Node) SetStreamOpenCallback(callback func(peer.ID, network.Stream)) {
	if n.streamHandler != nil {
		n.streamHandler.SetStreamOpenCallback(callback)
	}
}

// SetStreamCloseCallback —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç callback –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∏–º–æ–≤
func (n *Node) SetStreamCloseCallback(callback func(peer.ID)) {
	if n.streamHandler != nil {
		n.streamHandler.SetStreamCloseCallback(callback)
	}
}

// CreateStreamWithDefaultTimeout —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
func (n *Node) CreateStreamWithDefaultTimeout(ctx context.Context, peerID peer.ID) (network.Stream, error) {
	if n.streamHandler == nil {
		return nil, fmt.Errorf("StreamHandler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}
	return n.streamHandler.CreateStream(ctx, peerID, 0) // 0 = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
}

// GetStreamTimeouts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤
func (n *Node) GetStreamTimeouts() map[string]time.Duration {
	if n.streamHandler == nil || n.streamHandler.config == nil {
		return map[string]time.Duration{
			"creation": 60 * time.Second,
			"read":     30 * time.Second,
			"write":    10 * time.Second,
		}
	}

	config := n.streamHandler.config
	return map[string]time.Duration{
		"creation": config.StreamCreationTimeout,
		"read":     config.StreamReadTimeout,
		"write":    config.StreamWriteTimeout,
	}
}

// Broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
func (n *Node) Broadcast(data []byte) error {
	peers := n.GetConnectedPeers()
	if len(peers) == 0 {
		Warn("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ –¥–ª—è broadcast")
		return nil
	}

	var lastError error
	for _, peerID := range peers {
		if err := n.Send(peerID, data); err != nil {
			Error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫ %s: %v", peerID.ShortString(), err)
			lastError = err
		}
	}

	return lastError
}

// Messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (n *Node) Messages() <-chan RawMessage {
	return n.messagesChan
}

// handleStream –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏
func (n *Node) handleStream(stream network.Stream) {
	remotePeer := stream.Conn().RemotePeer()
	Info("üì• –ü–æ–ª—É—á–µ–Ω –ø–æ—Ç–æ–∫ –æ—Ç %s", remotePeer.ShortString())

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫
	n.AddPeer(remotePeer)

	// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
	buffer := make([]byte, 1024)
	bytesRead, err := stream.Read(buffer)
	if err != nil {
		Error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ—Ç %s: %v", remotePeer.ShortString(), err)
		stream.Close()
		return
	}

	// –°–æ–∑–¥–∞–µ–º RawMessage
	message := RawMessage{
		SenderID: remotePeer,
		Data:     buffer[:bytesRead],
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π
	select {
	case n.messagesChan <- message:
		Info("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å", remotePeer.ShortString())
	default:
		Warn("‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s –ø–æ—Ç–µ—Ä—è–Ω–æ", remotePeer.ShortString())
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ EventManager
	if n.eventManager != nil {
		event := NewMessageEvent(remotePeer.String(), buffer[:bytesRead])
		if err := n.eventManager.PushEvent(event); err != nil {
			Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ NewMessage: %v", err)
		}
	}

	stream.Close()
}
