package network

import (
	"context"
	"fmt"
	"log"
	"sync"

	"OwlWhisper/pkg/interfaces"

	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/mdns"
	"github.com/libp2p/go-libp2p/p2p/discovery/routing"
	"github.com/multiformats/go-multiaddr"
)

// Service —Ä–µ–∞–ª–∏–∑—É–µ—Ç NetworkService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type Service struct {
	host             host.Host
	dht              *dht.IpfsDHT
	routingDiscovery *routing.RoutingDiscovery
	mdnsService      mdns.Service

	peersMutex sync.RWMutex
	peers      map[peer.ID]*interfaces.PeerInfo

	ctx    context.Context
	cancel context.CancelFunc

	config *interfaces.NetworkConfig
}

// NewService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
func NewService(config *interfaces.NetworkConfig) (*Service, error) {
	ctx, cancel := context.WithCancel(context.Background())

	// –°–æ–∑–¥–∞–µ–º libp2p —É–∑–µ–ª —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
	opts := []libp2p.Option{
		libp2p.EnableNATService(),
		libp2p.EnableHolePunching(),
		libp2p.EnableRelay(),
	}

	if config.ListenPort > 0 {
		opts = append(opts, libp2p.ListenAddrStrings(fmt.Sprintf("/ip4/0.0.0.0/tcp/%d", config.ListenPort)))
	}

	h, err := libp2p.New(opts...)
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å libp2p —É–∑–µ–ª: %w", err)
	}

	service := &Service{
		host:   h,
		ctx:    ctx,
		cancel: cancel,
		config: config,
		peers:  make(map[peer.ID]*interfaces.PeerInfo),
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Network Notifiee –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	h.Network().Notify(service)

	return service, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
func (s *Service) Start(ctx context.Context) error {
	// –°–æ–∑–¥–∞–µ–º DHT
	var err error
	s.dht, err = dht.New(ctx, s.host)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DHT: %w", err)
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ bootstrap —É–∑–ª–∞–º
	if err = s.dht.Bootstrap(ctx); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap —É–∑–ª–∞–º: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º routing discovery
	s.routingDiscovery = routing.NewRoutingDiscovery(s.dht)

	// –ó–∞–ø—É—Å–∫–∞–µ–º mDNS discovery
	notifee := &mdnsNotifee{service: s}
	s.mdnsService = mdns.NewMdnsService(s.host, "owl-whisper-mdns", notifee)
	if err := s.mdnsService.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å mDNS: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º DHT discovery –≤ —Ñ–æ–Ω–µ
	go s.startDHTDiscovery()

	log.Printf("‚úÖ –°–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω. PeerID: %s", s.host.ID().String())
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å
func (s *Service) Stop(ctx context.Context) error {
	if s.mdnsService != nil {
		s.mdnsService.Close()
	}

	if s.host != nil {
		return s.host.Close()
	}

	return nil
}

// GetPeers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
func (s *Service) GetPeers() []peer.ID {
	s.peersMutex.RLock()
	defer s.peersMutex.RUnlock()

	peers := make([]peer.ID, 0, len(s.peers))
	for peerID := range s.peers {
		peers = append(peers, peerID)
	}

	return peers
}

// IsConnected –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–∏—Ä
func (s *Service) IsConnected(peerID peer.ID) bool {
	s.peersMutex.RLock()
	defer s.peersMutex.RUnlock()

	_, exists := s.peers[peerID]
	return exists
}

// GetPeerInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ä–µ
func (s *Service) GetPeerInfo(peerID peer.ID) (interfaces.PeerInfo, error) {
	s.peersMutex.RLock()
	defer s.peersMutex.RUnlock()

	info, exists := s.peers[peerID]
	if !exists {
		return interfaces.PeerInfo{}, fmt.Errorf("–ø–∏—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω", peerID.String())
	}

	return *info, nil
}

// startDHTDiscovery –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DHT
func (s *Service) startDHTDiscovery() {
	// –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
	ttl, err := s.routingDiscovery.Advertise(s.ctx, "owl-whisper-global")
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %v", err)
	} else {
		log.Printf("üì¢ –ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, TTL: %v", ttl)
	}

	// –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	peerChan, err := s.routingDiscovery.FindPeers(s.ctx, "owl-whisper-global")
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %v", err)
		return
	}

	for p := range peerChan {
		if p.ID == s.host.ID() {
			continue
		}

		log.Printf("üåê –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %s", p.ID.ShortString())
		s.handlePeerFound(p)
	}
}

// handlePeerFound –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞
func (s *Service) handlePeerFound(pi peer.AddrInfo) {
	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
	if err := s.host.Connect(s.ctx, pi); err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", pi.ID.ShortString(), err)
		return
	}

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s", pi.ID.ShortString())

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
	s.peersMutex.Lock()
	s.peers[pi.ID] = &interfaces.PeerInfo{
		ID:      pi.ID,
		Address: pi.Addrs[0].String(),
		Latency: 0, // TODO: –∏–∑–º–µ—Ä–∏—Ç—å –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
	}
	s.peersMutex.Unlock()
}

// Network Notifiee –º–µ—Ç–æ–¥—ã
func (s *Service) Listen(network.Network, multiaddr.Multiaddr)      {}
func (s *Service) ListenClose(network.Network, multiaddr.Multiaddr) {}

func (s *Service) Connected(net network.Network, conn network.Conn) {
	peerID := conn.RemotePeer()
	log.Printf("üîó EVENT: –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s", peerID.ShortString())
}

func (s *Service) Disconnected(net network.Network, conn network.Conn) {
	peerID := conn.RemotePeer()
	log.Printf("üîå EVENT: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ", peerID.ShortString())

	// –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∏—Ä–æ–≤
	s.peersMutex.Lock()
	delete(s.peers, peerID)
	s.peersMutex.Unlock()
}

func (s *Service) OpenedStream(network.Network, network.Stream) {}
func (s *Service) ClosedStream(network.Network, network.Stream) {}

// mdnsNotifee –¥–ª—è mDNS discovery
type mdnsNotifee struct {
	service *Service
}

func (n *mdnsNotifee) HandlePeerFound(pi peer.AddrInfo) {
	n.service.handlePeerFound(pi)
}
