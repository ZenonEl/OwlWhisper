package core

import (
	"context"
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"log"
	"time"

	"OwlWhisper/pkg/interfaces"

	"github.com/libp2p/go-libp2p/core/peer"
)

// ChatService —Ä–µ–∞–ª–∏–∑—É–µ—Ç IChatService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type ChatService struct {
	messageRepo interfaces.IMessageRepository
	transport   interfaces.ITransport
}

// NewChatService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ChatService
func NewChatService(messageRepo interfaces.IMessageRepository, transport interfaces.ITransport) *ChatService {
	return &ChatService{
		messageRepo: messageRepo,
		transport:   transport,
	}
}

// generateMessageID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
func (s *ChatService) generateMessageID() string {
	bytes := make([]byte, 16)
	rand.Read(bytes)
	return hex.EncodeToString(bytes)
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É
func (s *ChatService) SendMessage(ctx context.Context, toPeer peer.ID, content string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
	if len(content) == 0 {
		return fmt.Errorf("message content cannot be empty")
	}

	if len(content) > 1000 { // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		return fmt.Errorf("message too long, maximum length is 1000 characters")
	}

	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := &interfaces.Message{
		ID:        s.generateMessageID(),
		FromPeer:  s.transport.GetPeerID().String(),
		ToPeer:    toPeer.String(),
		Content:   content,
		Timestamp: time.Now(),
		Type:      "text",
		IsRead:    false,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
	if err := s.messageRepo.SaveMessage(ctx, message); err != nil {
		return fmt.Errorf("failed to save message locally: %w", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	messageBytes := []byte(content)
	if err := s.transport.SendMessage(ctx, toPeer, messageBytes); err != nil {
		return fmt.Errorf("failed to send message via transport: %w", err)
	}

	log.Printf("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫ %s: %s", toPeer.ShortString(), content)
	return nil
}

// GetMessages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∏—Ä–æ–º
func (s *ChatService) GetMessages(ctx context.Context, peerID peer.ID, limit, offset int) ([]*interfaces.Message, error) {
	if limit <= 0 {
		limit = 50 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
	if offset < 0 {
		offset = 0
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	messages, err := s.messageRepo.GetMessages(ctx, s.transport.GetPeerID().String(), peerID.String(), limit, offset)
	if err != nil {
		return nil, fmt.Errorf("failed to get messages: %w", err)
	}

	return messages, nil
}

// GetUnreadCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (s *ChatService) GetUnreadCount(ctx context.Context, peerID peer.ID) (int, error) {
	count, err := s.messageRepo.GetUnreadCount(ctx, peerID.String())
	if err != nil {
		return 0, fmt.Errorf("failed to get unread count: %w", err)
	}

	return count, nil
}

// MarkAsRead –æ—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
func (s *ChatService) MarkAsRead(ctx context.Context, peerID peer.ID) error {
	if err := s.messageRepo.MarkAsRead(ctx, peerID.String()); err != nil {
		return fmt.Errorf("failed to mark messages as read: %w", err)
	}

	return nil
}

// HandleIncomingMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (s *ChatService) HandleIncomingMessage(fromPeer peer.ID, content []byte) error {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := &interfaces.Message{
		ID:        s.generateMessageID(),
		FromPeer:  fromPeer.String(),
		ToPeer:    s.transport.GetPeerID().String(),
		Content:   string(content),
		Timestamp: time.Now(),
		Type:      "text",
		IsRead:    false,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	if err := s.messageRepo.SaveMessage(context.Background(), message); err != nil {
		return fmt.Errorf("failed to save incoming message: %w", err)
	}

	log.Printf("üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s: %s", fromPeer.ShortString(), string(content))
	return nil
}
