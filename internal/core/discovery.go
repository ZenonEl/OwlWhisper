package core

import (
	"context"
	"fmt"
	"log"
	"sync" // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç sync
	"time"

	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/mdns"
	"github.com/libp2p/go-libp2p/p2p/discovery/routing"
)

// DISCOVERY_TAG_MDNS - "—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ" –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ mDNS
const DISCOVERY_TAG_MDNS = "owl-whisper-mdns"

// DISCOVERY_TAG_DHT - "—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ" –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ DHT
const DISCOVERY_TAG_DHT = "owl-whisper-global-rendezvous"

// DiscoveryNotifee –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ç–∏
type DiscoveryNotifee struct {
	node host.Host
	ctx  context.Context
}

// HandlePeerFound –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ mDNS –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
func (n *DiscoveryNotifee) HandlePeerFound(pi peer.AddrInfo) {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
	if pi.ID == n.node.ID() {
		return
	}
	log.Printf("üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: %s", pi.ID.String())

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
	err := n.node.Connect(n.ctx, pi)
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", pi.ID.String(), err)
	} else {
		log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s", pi.ID.String())
	}
}

// DiscoveryManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
type DiscoveryManager struct {
	mdnsService      mdns.Service
	dht              *dht.IpfsDHT
	routingDiscovery *routing.RoutingDiscovery
	notifee          *DiscoveryNotifee
	host             host.Host // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º host –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
	ctx              context.Context
}

// NewDiscoveryManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func NewDiscoveryManager(ctx context.Context, node host.Host) *DiscoveryManager {
	notifee := &DiscoveryNotifee{
		node: node,
		ctx:  ctx,
	}

	mdnsService := mdns.NewMdnsService(node, DISCOVERY_TAG_MDNS, notifee)

	// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º DHT –≤ —Ä–µ–∂–∏–º —Å–µ—Ä–≤–µ—Ä–∞. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!
	kadDHT, err := dht.New(ctx, node, dht.Mode(dht.ModeServer))
	if err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DHT: %v", err)
	} else {
		log.Printf("‚úÖ DHT —Å–æ–∑–¥–∞–Ω –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ä–≤–µ—Ä–∞")
	}

	routingDiscovery := routing.NewRoutingDiscovery(kadDHT)
	log.Printf("‚úÖ Routing discovery —Å–æ–∑–¥–∞–Ω")

	return &DiscoveryManager{
		mdnsService:      mdnsService,
		dht:              kadDHT,
		routingDiscovery: routingDiscovery,
		notifee:          notifee,
		host:             node, // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º host
		ctx:              ctx,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func (dm *DiscoveryManager) Start() error {
	if err := dm.mdnsService.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å mDNS: %w", err)
	}
	log.Println("üì° –°–µ—Ä–≤–∏—Å mDNS –∑–∞–ø—É—â–µ–Ω.")

	go dm.startDHTDiscovery()
	log.Println("üåê DHT discovery –∑–∞–ø—É—â–µ–Ω.")

	return nil
}

// startDHTDiscovery –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DHT
func (dm *DiscoveryManager) startDHTDiscovery() {
	log.Println("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap —É–∑–ª–∞–º...")
	if err := dm.dht.Bootstrap(dm.ctx); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap —É–∑–ª–∞–º: %v", err)
		return
	}
	log.Println("‚úÖ Bootstrap DHT –∑–∞–≤–µ—Ä—à–µ–Ω")

	// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ñ–¥–µ–º, –ø–æ–∫–∞ –º—ã –ø–æ–¥–∫–ª—é—á–∏–º—Å—è —Ö–æ—Ç—è –±—ã –∫ –æ–¥–Ω–æ–º—É bootstrap-–ø–∏—Ä—É.
	// –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∞–Ω–æ–Ω—Å–æ–º.
	var wg sync.WaitGroup
	for _, p := range dht.DefaultBootstrapPeers {
		peerinfo, _ := peer.AddrInfoFromP2pAddr(p)
		wg.Add(1)
		go func() {
			defer wg.Done()
			if err := dm.host.Connect(dm.ctx, *peerinfo); err != nil {
				// log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap-–ø–∏—Ä—É: %s", err)
			} else {
				log.Printf("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å bootstrap-–ø–∏—Ä–æ–º: %s", peerinfo.ID.ShortString())
			}
		}()
	}
	wg.Wait()

	log.Println("üì¢ –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
	routingDiscovery := routing.NewRoutingDiscovery(dm.dht)
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Ticker –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–∏–¥–∏–º—ã–º–∏
	ticker := time.NewTicker(time.Minute * 1)
	defer ticker.Stop()

	go func() {
		for {
			select {
			case <-dm.ctx.Done():
				return
			case <-ticker.C:
				log.Println("üì¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä—É–µ–º—Å—è –≤ —Å–µ—Ç–∏...")
				_, err := routingDiscovery.Advertise(dm.ctx, DISCOVERY_TAG_DHT)
				if err != nil {
					log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞: %v", err)
				}
			}
		}
	}()

	// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å
	_, err := routingDiscovery.Advertise(dm.ctx, DISCOVERY_TAG_DHT)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞: %v", err)
	}

	log.Println("üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
	peerChan, err := routingDiscovery.FindPeers(dm.ctx, DISCOVERY_TAG_DHT)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %v", err)
		return
	}

	for p := range peerChan {
		if p.ID == dm.host.ID() {
			continue
		}
		log.Printf("üåê –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %s", p.ID.ShortString())
		dm.notifee.HandlePeerFound(p)
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func (dm *DiscoveryManager) Stop() error {
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mDNS
	if dm.mdnsService != nil {
		dm.mdnsService.Close()
	}

	// TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ DHT discovery

	return nil
}
