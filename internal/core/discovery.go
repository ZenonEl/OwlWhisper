package core

import (
	"context"
	"fmt"
	"sync"
	"time"

	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/mdns"
	"github.com/libp2p/go-libp2p/p2p/discovery/routing"
)

const (
	DISCOVERY_TAG     = "owl-whisper-mdns"
	GLOBAL_RENDEZVOUS = "owl-whisper-global"
)

// DiscoveryNotifee –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
type DiscoveryNotifee struct {
	node   host.Host
	ctx    context.Context
	onPeer func(peer.AddrInfo)
}

// HandlePeerFound –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–∏—Ä
func (n *DiscoveryNotifee) HandlePeerFound(pi peer.AddrInfo) {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è
	if pi.ID == n.node.ID() {
		return
	}

	Info("üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–∏—Ä: %s", pi.ID.ShortString())

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
	if err := n.node.Connect(n.ctx, pi); err != nil {
		Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", pi.ID.ShortString(), err)
		return
	}

	Info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s", pi.ID.ShortString())

	// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –ø–∏—Ä–µ
	if n.onPeer != nil {
		n.onPeer(pi)
	}
}

// DiscoveryManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –ø–∏—Ä–æ–≤
type DiscoveryManager struct {
	host             host.Host
	dht              *dht.IpfsDHT
	routingDiscovery *routing.RoutingDiscovery
	mdnsService      mdns.Service
	notifee          *DiscoveryNotifee

	ctx    context.Context
	cancel context.CancelFunc

	// –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø–∏—Ä–∞—Ö
	peersChan chan peer.AddrInfo

	// EventManager –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
	eventManager *EventManager
}

// NewDiscoveryManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func NewDiscoveryManager(ctx context.Context, host host.Host, onPeer func(peer.AddrInfo), eventManager *EventManager) (*DiscoveryManager, error) {
	ctx, cancel := context.WithCancel(ctx)

	notifee := &DiscoveryNotifee{
		node:   host,
		ctx:    ctx,
		onPeer: onPeer,
	}

	// –°–æ–∑–¥–∞–µ–º mDNS —Å–µ—Ä–≤–∏—Å
	mdnsService := mdns.NewMdnsService(host, DISCOVERY_TAG, notifee)

	// –°–æ–∑–¥–∞–µ–º DHT –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ä–≤–µ—Ä–∞
	kadDHT, err := dht.New(ctx, host, dht.Mode(dht.ModeServer))
	if err != nil {
		cancel()
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DHT: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º routing discovery
	routingDiscovery := routing.NewRoutingDiscovery(kadDHT)

	dm := &DiscoveryManager{
		host:             host,
		dht:              kadDHT,
		routingDiscovery: routingDiscovery,
		mdnsService:      mdnsService,
		notifee:          notifee,
		ctx:              ctx,
		cancel:           cancel,
		peersChan:        make(chan peer.AddrInfo, 100),
		eventManager:     eventManager,
	}

	return dm, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç discovery —Å–µ—Ä–≤–∏—Å—ã
func (dm *DiscoveryManager) Start() error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º mDNS
	if err := dm.mdnsService.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å mDNS: %w", err)
	}
	Info("üì° mDNS —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ bootstrap —É–∑–ª–∞–º
	if err := dm.dht.Bootstrap(dm.ctx); err != nil {
		Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap —É–∑–ª–∞–º: %v", err)
	} else {
		Info("‚úÖ Bootstrap –∑–∞–≤–µ—Ä—à–µ–Ω")
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º mDNS discovery –≤ —Ñ–æ–Ω–µ
	go dm.startMDNSDiscovery()

	// –ó–∞–ø—É—Å–∫–∞–µ–º DHT discovery –≤ —Ñ–æ–Ω–µ
	go dm.startDHTDiscovery()

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç discovery —Å–µ—Ä–≤–∏—Å—ã
func (dm *DiscoveryManager) Stop() error {
	dm.cancel()

	if dm.mdnsService != nil {
		dm.mdnsService.Close()
	}

	if dm.dht != nil {
		return dm.dht.Close()
	}

	return nil
}

// GetDHT –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DHT –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö —Å–∏—Å—Ç–µ–º—ã
func (dm *DiscoveryManager) GetDHT() *dht.IpfsDHT {
	return dm.dht
}

// SaveDHTRoutingTable —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç DHT routing table –≤ –∫—ç—à
func (dm *DiscoveryManager) SaveDHTRoutingTable(persistence *PersistenceManager) error {
	if dm.dht == nil {
		return fmt.Errorf("DHT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∏—Ä—ã –∏–∑ DHT
	peers := dm.dht.RoutingTable().ListPeers()

	Info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º DHT routing table: %d –ø–∏—Ä–æ–≤", len(peers))

	for _, peerID := range peers {
		// –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –ø–∏—Ä–∞
		addrs := dm.host.Peerstore().Addrs(peerID)
		var addrStrings []string
		for _, addr := range addrs {
			addrStrings = append(addrStrings, addr.String())
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Ä "–∑–¥–æ—Ä–æ–≤—ã–º" (–µ—Å—Ç—å –∞–¥—Ä–µ—Å–∞)
		healthy := len(addrStrings) > 0

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
		if err := persistence.SavePeerToCache(peerID, addrStrings, healthy); err != nil {
			Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∏—Ä–∞ %s –≤ –∫—ç—à: %v", peerID.ShortString(), err)
		}
	}

	Info("‚úÖ DHT routing table —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à")
	return nil
}

// LoadDHTRoutingTableFromCache –∑–∞–≥—Ä—É–∂–∞–µ—Ç DHT routing table –∏–∑ –∫—ç—à–∞
func (dm *DiscoveryManager) LoadDHTRoutingTableFromCache(persistence *PersistenceManager) error {
	if dm.dht == nil {
		return fmt.Errorf("DHT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	cachedPeers, err := persistence.GetHealthyCachedPeers()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤: %w", err)
	}

	if len(cachedPeers) == 0 {
		Info("üíæ –ö—ç—à –ø–∏—Ä–æ–≤ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ bootstrap —É–∑–ª—ã")
		return nil
	}

	Info("üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º DHT routing table –∏–∑ –∫—ç—à–∞: %d –ø–∏—Ä–æ–≤", len(cachedPeers))

	// –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ –≤ DHT routing table
	for _, cachedPeer := range cachedPeers {
		peerID, err := peer.Decode(cachedPeer.PeerID)
		if err != nil {
			Warn("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π Peer ID –≤ –∫—ç—à–µ: %s", cachedPeer.PeerID)
			continue
		}

		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É
		if err := dm.host.Connect(dm.ctx, peer.AddrInfo{ID: peerID}); err != nil {
			Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É %s: %v", peerID.ShortString(), err)
		} else {
			Info("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É %s", peerID.ShortString())
		}
	}

	Info("‚úÖ DHT routing table –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞")
	return nil
}

// GetRoutingTableStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É DHT routing table
func (dm *DiscoveryManager) GetRoutingTableStats() map[string]interface{} {
	if dm.dht == nil {
		return map[string]interface{}{
			"status": "dht_unavailable",
		}
	}

	rt := dm.dht.RoutingTable()
	peers := rt.ListPeers()

	stats := map[string]interface{}{
		"total_peers": len(peers),
		"size":        rt.Size(),
	}

	return stats
}

// fallbackToCachedPeers –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∏—Ä–∞–º –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ bootstrap
func (dm *DiscoveryManager) fallbackToCachedPeers() error {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π PersistenceManager –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—ç—à—É
	persistence, err := NewPersistenceManager()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PersistenceManager: %w", err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–¥–æ—Ä–æ–≤—ã—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	cachedPeers, err := persistence.GetHealthyCachedPeers()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤: %w", err)
	}

	if len(cachedPeers) == 0 {
		return fmt.Errorf("–∫—ç—à –ø–∏—Ä–æ–≤ –ø—É—Å—Ç")
	}

	Info("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %d –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∏—Ä–∞–º...", len(cachedPeers))

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∏—Ä–∞–º
	connectedCount := 0
	for _, cachedPeer := range cachedPeers {
		peerID, err := peer.Decode(cachedPeer.PeerID)
		if err != nil {
			Warn("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π Peer ID –≤ –∫—ç—à–µ: %s", cachedPeer.PeerID)
			continue
		}

		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
		if err := dm.host.Connect(dm.ctx, peer.AddrInfo{ID: peerID}); err != nil {
			Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É %s: %v", peerID.ShortString(), err)
		} else {
			Info("‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É %s", peerID.ShortString())
			connectedCount++
		}
	}

	if connectedCount > 0 {
		Info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ %d –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∏—Ä–∞–º", connectedCount)
		return nil
	}

	return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–∏—Ä—É")
}

// startMDNSDiscovery –∑–∞–ø—É—Å–∫–∞–µ—Ç mDNS discovery
func (dm *DiscoveryManager) startMDNSDiscovery() {
	Info("üè† –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–∏—Ä–æ–≤ —á–µ—Ä–µ–∑ mDNS...")

	// mDNS —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ DiscoveryNotifee
	// –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	<-dm.ctx.Done()
}

// startDHTDiscovery –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DHT
func (dm *DiscoveryManager) startDHTDiscovery() {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DHT
	if dm.eventManager != nil {
		event := NetworkStatusEvent("CONNECTING_TO_DHT", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap-—É–∑–ª–∞–º...")
		dm.eventManager.PushEvent(event)
	}

	Info("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap —É–∑–ª–∞–º...")

	// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ñ–¥–µ–º, –ø–æ–∫–∞ –º—ã –ø–æ–¥–∫–ª—é—á–∏–º—Å—è —Ö–æ—Ç—è –±—ã –∫ –æ–¥–Ω–æ–º—É bootstrap-–ø–∏—Ä—É.
	// –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –Ω–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—É—Å—Ç–∞ –ø–µ—Ä–µ–¥ –∞–Ω–æ–Ω—Å–æ–º.
	var wg sync.WaitGroup
	bootstrapConnected := false

	for _, p := range dht.DefaultBootstrapPeers {
		peerinfo, _ := peer.AddrInfoFromP2pAddr(p)
		wg.Add(1)
		go func() {
			defer wg.Done()
			if err := dm.host.Connect(dm.ctx, *peerinfo); err != nil {
				// Info("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap-–ø–∏—Ä—É: %s", err)
			} else {
				Info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å bootstrap-–ø–∏—Ä–æ–º: %s", peerinfo.ID.ShortString())
				bootstrapConnected = true
			}
		}()
	}
	wg.Wait()

	// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap —É–∑–ª–∞–º, –ø—Ä–æ–±—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Ä—ã
	if !bootstrapConnected {
		Info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap —É–∑–ª–∞–º, –ø—Ä–æ–±—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Ä—ã...")
		if err := dm.fallbackToCachedPeers(); err != nil {
			Warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∏—Ä–∞–º: %v", err)
		}
	}

	Info("üì¢ –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Ticker –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–∏–¥–∏–º—ã–º–∏
	ticker := time.NewTicker(time.Minute * 1)
	defer ticker.Stop()

	go func() {
		for {
			select {
			case <-dm.ctx.Done():
				return
			case <-ticker.C:
				Info("üì¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä—É–µ–º—Å—è –≤ —Å–µ—Ç–∏...")
				_, err := dm.routingDiscovery.Advertise(dm.ctx, GLOBAL_RENDEZVOUS)
				if err != nil {
					Warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞: %v", err)
				}
			}
		}
	}()

	// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å
	_, err := dm.routingDiscovery.Advertise(dm.ctx, GLOBAL_RENDEZVOUS)
	if err != nil {
		Warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∞: %v", err)
	} else {
		Info("üì¢ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–æ–Ω—Å —É—Å–ø–µ—à–µ–Ω")
	}

	Info("üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
	peerChan, err := dm.routingDiscovery.FindPeers(dm.ctx, GLOBAL_RENDEZVOUS)
	if err != nil {
		Warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %v", err)
		return
	}

	for p := range peerChan {
		if p.ID == dm.host.ID() {
			continue
		}

		Info("üåê –ù–∞–π–¥–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: %s", p.ID.ShortString())
		dm.notifee.HandlePeerFound(p)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
	if dm.eventManager != nil {
		event := NetworkStatusEvent("NETWORK_READY", "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ —Å–µ—Ç–∏")
		dm.eventManager.PushEvent(event)
	}
}

// GetRoutingDiscovery –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç routing discovery –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
func (dm *DiscoveryManager) GetRoutingDiscovery() *routing.RoutingDiscovery {
	return dm.routingDiscovery
}

// StartAggressiveDiscovery –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∏—Ä–æ–≤ (–∫–∞–∫ –≤ poc.go)
func (dm *DiscoveryManager) StartAggressiveDiscovery(rendezvous string) {
	Info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤ –ø–æ rendezvous: %s", rendezvous)

	go func() {
		for {
			select {
			case <-dm.ctx.Done():
				return
			default:
				peerChan, err := dm.routingDiscovery.FindPeers(dm.ctx, rendezvous)
				if err != nil {
					Warn("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤: %v", err)
					time.Sleep(10 * time.Second)
					continue
				}

				for p := range peerChan {
					if p.ID == dm.host.ID() {
						continue
					}
					Info("–ù–∞–π–¥–µ–Ω –ø–∏—Ä: %s. –ê–¥—Ä–µ—Å–∞: %v", p.ID, p.Addrs)
					dm.notifee.HandlePeerFound(p)
				}

				time.Sleep(15 * time.Second) // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
			}
		}
	}()

	Info("–ü–æ–∏—Å–∫ –ø–∏—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ...")
}

// StartAggressiveAdvertising –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∫ –≤ poc.go)
func (dm *DiscoveryManager) StartAggressiveAdvertising(rendezvous string) {
	Info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ rendezvous: %s", rendezvous)

	go func() {
		for {
			select {
			case <-dm.ctx.Done():
				return
			default:
				_, err := dm.routingDiscovery.Advertise(dm.ctx, rendezvous)
				if err != nil {
					Warn("–û—à–∏–±–∫–∞ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
				} else {
					Info("üîÑ –ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ DHT: %s", rendezvous)
				}
				time.Sleep(15 * time.Second) // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
			}
		}
	}()

	Info("–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ...")
}

// FindPeersOnce –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∏—Ä–æ–≤
func (dm *DiscoveryManager) FindPeersOnce(rendezvous string) ([]peer.AddrInfo, error) {
	Info("üîç –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∏—Ä–æ–≤ –ø–æ rendezvous: %s", rendezvous)

	peerChan, err := dm.routingDiscovery.FindPeers(dm.ctx, rendezvous)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤: %w", err)
	}

	var peers []peer.AddrInfo
	for p := range peerChan {
		if p.ID == dm.host.ID() {
			continue
		}
		peers = append(peers, p)
		Info("–ù–∞–π–¥–µ–Ω –ø–∏—Ä: %s. –ê–¥—Ä–µ—Å–∞: %v", p.ID, p.Addrs)
	}

	return peers, nil
}

// AdvertiseOnce –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
func (dm *DiscoveryManager) AdvertiseOnce(rendezvous string) error {
	Info("üì¢ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ rendezvous: %s", rendezvous)

	_, err := dm.routingDiscovery.Advertise(dm.ctx, rendezvous)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: %w", err)
	}

	Info("üì¢ –ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ DHT: %s", rendezvous)
	return nil
}
