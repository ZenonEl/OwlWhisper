package core

import (
	"context"
	"fmt"
	"log"

	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/mdns"
)

// DISCOVERY_TAG - "—Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ" –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ mDNS
const DISCOVERY_TAG = "owl-whisper-mdns"

// DiscoveryNotifee –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ç–∏
type DiscoveryNotifee struct {
	node host.Host
	ctx  context.Context
}

// HandlePeerFound –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ mDNS –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
func (n *DiscoveryNotifee) HandlePeerFound(pi peer.AddrInfo) {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
	if pi.ID == n.node.ID() {
		return
	}
	log.Printf("üì¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: %s", pi.ID.String())

	// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
	err := n.node.Connect(n.ctx, pi)
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", pi.ID.String(), err)
	} else {
		log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ %s", pi.ID.String())
	}
}

// DiscoveryManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
type DiscoveryManager struct {
	mdnsService mdns.Service
	notifee     *DiscoveryNotifee
	ctx         context.Context
}

// NewDiscoveryManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func NewDiscoveryManager(ctx context.Context, node host.Host) *DiscoveryManager {
	notifee := &DiscoveryNotifee{
		node: node,
		ctx:  ctx,
	}

	// –°–æ–∑–¥–∞–µ–º mDNS —Å–µ—Ä–≤–∏—Å
	mdnsService := mdns.NewMdnsService(node, DISCOVERY_TAG, notifee)

	return &DiscoveryManager{
		mdnsService: mdnsService,
		notifee:     notifee,
		ctx:         ctx,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func (dm *DiscoveryManager) Start() error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º mDNS discovery
	if err := dm.mdnsService.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å mDNS: %w", err)
	}
	log.Println("üì° –°–µ—Ä–≤–∏—Å mDNS –∑–∞–ø—É—â–µ–Ω. –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

	// TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ DHT discovery –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
	// go dm.startDHTDiscovery()

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
func (dm *DiscoveryManager) Stop() error {
	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mDNS
	if dm.mdnsService != nil {
		dm.mdnsService.Close()
	}

	// TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ DHT discovery

	return nil
}

// TODO: –ú–µ—Ç–æ–¥—ã –¥–ª—è DHT discovery –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
// func (dm *DiscoveryManager) startDHTDiscovery() {
//     // –õ–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bootstrap —É–∑–ª–∞–º –∏ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ DHT
// }
