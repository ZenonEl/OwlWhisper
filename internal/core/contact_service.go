package core

import (
	"context"
	"fmt"
	"log"
	"time"

	"OwlWhisper/pkg/interfaces"

	"github.com/libp2p/go-libp2p/core/peer"
)

// ContactService —Ä–µ–∞–ª–∏–∑—É–µ—Ç IContactService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type ContactService struct {
	contactRepo interfaces.IContactRepository
	transport   interfaces.ITransport
}

// NewContactService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ContactService
func NewContactService(contactRepo interfaces.IContactRepository, transport interfaces.ITransport) *ContactService {
	return &ContactService{
		contactRepo: contactRepo,
		transport:   transport,
	}
}

// AddContact –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
func (s *ContactService) AddContact(ctx context.Context, peerID peer.ID, nickname string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–µ –ª–∏ –∏–º—è
	if nickname == "" {
		nickname = peerID.ShortString() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π PeerID –∫–∞–∫ –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç
	existingContact, err := s.contactRepo.GetContact(ctx, peerID.String())
	if err != nil {
		return fmt.Errorf("failed to check existing contact: %w", err)
	}

	if existingContact != nil {
		return fmt.Errorf("contact with peer ID %s already exists", peerID.ShortString())
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
	contact := &interfaces.Contact{
		PeerID:   peerID.String(),
		Nickname: nickname,
		AddedAt:  time.Now(),
		LastSeen: time.Now(),
		IsOnline: false,
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
	if err := s.contactRepo.SaveContact(ctx, contact); err != nil {
		return fmt.Errorf("failed to save contact: %w", err)
	}

	log.Printf("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: %s (%s)", nickname, peerID.ShortString())
	return nil
}

// RemoveContact —É–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
func (s *ContactService) RemoveContact(ctx context.Context, peerID peer.ID) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç
	existingContact, err := s.contactRepo.GetContact(ctx, peerID.String())
	if err != nil {
		return fmt.Errorf("failed to check existing contact: %w", err)
	}

	if existingContact == nil {
		return fmt.Errorf("contact with peer ID %s not found", peerID.ShortString())
	}

	// –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
	if err := s.contactRepo.DeleteContact(ctx, peerID.String()); err != nil {
		return fmt.Errorf("failed to delete contact: %w", err)
	}

	log.Printf("üóëÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω: %s", peerID.ShortString())
	return nil
}

// GetContacts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
func (s *ContactService) GetContacts(ctx context.Context) ([]*interfaces.Contact, error) {
	contacts, err := s.contactRepo.GetAllContacts(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get contacts: %w", err)
	}

	return contacts, nil
}

// UpdateContact –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
func (s *ContactService) UpdateContact(ctx context.Context, contact *interfaces.Contact) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç
	existingContact, err := s.contactRepo.GetContact(ctx, contact.PeerID)
	if err != nil {
		return fmt.Errorf("failed to check existing contact: %w", err)
	}

	if existingContact == nil {
		return fmt.Errorf("contact with peer ID %s not found", contact.PeerID)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
	if err := s.contactRepo.UpdateContact(ctx, contact); err != nil {
		return fmt.Errorf("failed to update contact: %w", err)
	}

	log.Printf("‚úèÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: %s", contact.PeerID)
	return nil
}

// GetContact –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ PeerID
func (s *ContactService) GetContact(ctx context.Context, peerID peer.ID) (*interfaces.Contact, error) {
	contact, err := s.contactRepo.GetContact(ctx, peerID.String())
	if err != nil {
		return nil, fmt.Errorf("failed to get contact: %w", err)
	}

	return contact, nil
}

// UpdateLastSeen –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞
func (s *ContactService) UpdateLastSeen(ctx context.Context, peerID peer.ID) error {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
	contact, err := s.contactRepo.GetContact(ctx, peerID.String())
	if err != nil {
		return fmt.Errorf("failed to get contact: %w", err)
	}

	if contact == nil {
		// –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∏–º–µ–Ω–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		contact = &interfaces.Contact{
			PeerID:   peerID.String(),
			Nickname: peerID.ShortString(),
			AddedAt:  time.Now(),
			LastSeen: time.Now(),
			IsOnline: true,
		}

		if err := s.contactRepo.SaveContact(ctx, contact); err != nil {
			return fmt.Errorf("failed to create contact: %w", err)
		}
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
		contact.LastSeen = time.Now()
		contact.IsOnline = true

		if err := s.contactRepo.UpdateContact(ctx, contact); err != nil {
			return fmt.Errorf("failed to update contact: %w", err)
		}
	}

	return nil
}

// SetOffline –æ—Ç–º–µ—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –æ—Ñ—Ñ–ª–∞–π–Ω
func (s *ContactService) SetOffline(ctx context.Context, peerID peer.ID) error {
	contact, err := s.contactRepo.GetContact(ctx, peerID.String())
	if err != nil {
		return fmt.Errorf("failed to get contact: %w", err)
	}

	if contact != nil {
		contact.IsOnline = false
		if err := s.contactRepo.UpdateContact(ctx, contact); err != nil {
			return fmt.Errorf("failed to update contact: %w", err)
		}
	}

	return nil
}
