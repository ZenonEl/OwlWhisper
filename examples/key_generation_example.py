#!/usr/bin/env python3
"""
üîë –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ GenerateNewKeyPair

–≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
–≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥–ª—É—à–µ–∫ –¥–ª—è –∫–ª—é—á–µ–π.
"""

import ctypes
import base64
import json
import os

def main():
    # –ü—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
    lib_path = "./dist/libowlwhisper.so"
    
    if not os.path.exists(lib_path):
        print(f"‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {lib_path}")
        print("–°–Ω–∞—á–∞–ª–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É...")
    owlwhisper = ctypes.CDLL(lib_path)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∏–ø—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
    owlwhisper.GenerateNewKeyPair.restype = ctypes.c_char_p
    owlwhisper.StartOwlWhisperWithKey.argtypes = [ctypes.c_char_p, ctypes.c_int]
    owlwhisper.StartOwlWhisperWithKey.restype = ctypes.c_int
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
    print("üîá –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏...")
    owlwhisper.SetLogLevel(0)
    
    print("\nüîë –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π
    key_data = owlwhisper.GenerateNewKeyPair()
    if not key_data:
        print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π")
        return
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞ (–æ–Ω–∏ –≤ base64)
    base64_data = ctypes.string_at(key_data).decode()
    print(f"   –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (base64): {base64_data[:100]}...")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º base64, –ø–æ—Ç–æ–º –ø–∞—Ä—Å–∏–º JSON
        json_bytes = base64.b64decode(base64_data)
        json_str = json_bytes.decode('utf-8')
        print(f"   –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON: {json_str[:100]}...")
        
        key_info = json.loads(json_str)
    except (json.JSONDecodeError, UnicodeDecodeError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print(f"   Base64 –¥–∞–Ω–Ω—ã–µ: {repr(base64_data)}")
        owlwhisper.FreeString(key_data)
        return
    
    print("‚úÖ –ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print(f"   Peer ID: {key_info['peer_id']}")
    print(f"   –¢–∏–ø –∫–ª—é—á–∞: {key_info['key_type']}")
    print(f"   –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {key_info['key_length']} –±–∞–π—Ç")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    private_key = base64.b64decode(key_info['private_key'])
    print(f"   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (hex): {private_key[:16].hex()}...")
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
    owlwhisper.FreeString(key_data)
    
    print("\nüöÄ –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º Owl Whisper —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
    result = owlwhisper.StartOwlWhisperWithKey(private_key, len(private_key))
    if result == 0:
        print("‚úÖ Owl Whisper –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Peer ID
        peer_id = owlwhisper.GetMyPeerID()
        if peer_id:
            my_peer_id = ctypes.string_at(peer_id).decode()
            print(f"   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π Peer ID: {my_peer_id}")
            owlwhisper.FreeString(peer_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Peer ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if my_peer_id == key_info['peer_id']:
                print("‚úÖ Peer ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º!")
            else:
                print("‚ö†Ô∏è Peer ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
        
        print("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        owlwhisper.StopOwlWhisper()
        print("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º")
        print("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∫–ª—é—á –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!")

if __name__ == "__main__":
    print("üîë –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –¥–ª—è Owl Whisper")
    print("=" * 50)
    
    try:
        main()
        print("\nüéâ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
        print("   1. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
        print("   2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
        print("   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–∞")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ")
        print("   3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LD_LIBRARY_PATH=./dist") 