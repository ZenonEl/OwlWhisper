package main

import (
	"encoding/base64"
	"fmt"
	"time"
	"unsafe"
)

/*
#cgo CFLAGS: -I../../internal/core
#cgo LDFLAGS: -L../../dist -lowlwhisper
#include "owlwhisper.h"
#include <stdlib.h>
#include <string.h>
*/
import "C"

func main() {
	fmt.Println("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
	fmt.Println("======================================================")

	// –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã –∫–ª—é—á–∞
	fmt.Println("\nüîë –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã –∫–ª—é—á–∞...")

	keyData := C.GenerateNewKeyBytes()
	if keyData == nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞")
		return
	}
	defer C.FreeString(keyData)

	keyStr := C.GoString(keyData)
	fmt.Printf("‚úÖ Base64-encoded –∫–ª—é—á: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(keyStr))
	fmt.Printf("üîç –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤: %s...\n", keyStr[:20])

	// –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∫–ª—é—á–æ–º
	fmt.Println("\nüöÄ –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º Owl Whisper...")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∞–π—Ç—ã
	keyBytes, err := base64.StdEncoding.DecodeString(keyStr)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: %d –±–∞–π—Ç\n", len(keyBytes))
	fmt.Printf("üîç –ü–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç (hex): %x\n", keyBytes[:16])

	result := C.StartOwlWhisperWithKey((*C.char)(unsafe.Pointer(&keyBytes[0])), C.int(len(keyBytes)))
	if result != 0 {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Owl Whisper")
		return
	}

	fmt.Println("‚úÖ Owl Whisper –∑–∞–ø—É—â–µ–Ω!")

	// –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	fmt.Println("\nüîç –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")

	// –ü–æ–ª—É—á–∞–µ–º Peer ID
	peerID := C.GetMyPeerID()
	if peerID != nil {
		myPeerID := C.GoString(peerID)
		fmt.Printf("‚úÖ –ú–æ–π Peer ID: %s\n", myPeerID)
		C.FreeString(peerID)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	status := C.GetConnectionStatus()
	if status != nil {
		statusStr := C.GoString(status)
		fmt.Printf("‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %s\n", statusStr)
		C.FreeString(status)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
	peers := C.GetConnectedPeers()
	if peers != nil {
		peersStr := C.GoString(peers)
		fmt.Printf("‚úÖ –°–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤: %s\n", peersStr)
		C.FreeString(peers)
	}

	// üîí –¢–ï–°–¢–ò–†–£–ï–ú –ó–ê–©–ò–©–ï–ù–ù–´–ï –ü–ò–†–´
	fmt.Println("\nüîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã...")

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
	protectedPeers := C.GetProtectedPeers()
	if protectedPeers != nil {
		protectedStr := C.GoString(protectedPeers)
		fmt.Printf("‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: %s\n", protectedStr)
		C.FreeString(protectedPeers)
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤")
	}

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à PeerID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	myPeerID := C.GetMyPeerID()
	if myPeerID != nil {
		myID := C.GoString(myPeerID)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—à PeerID –∑–∞—â–∏—â–µ–Ω–Ω—ã–º (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å false)
		fmt.Printf("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –¥–ª—è %s...\n", myID[:12]+"...")
		isProtected := C.IsProtectedPeer(myPeerID)
		if isProtected == 1 {
			fmt.Println("‚ùå PeerID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ")
		} else {
			fmt.Println("‚úÖ PeerID –Ω–µ –∑–∞—â–∏—â–µ–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ
		fmt.Println("\nüîí –î–æ–±–∞–≤–ª—è–µ–º PeerID –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ...")
		addResult := C.AddProtectedPeer(myPeerID)
		if addResult == 0 {
			fmt.Println("‚úÖ PeerID –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ")

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
			isProtected = C.IsProtectedPeer(myPeerID)
			if isProtected == 1 {
				fmt.Println("‚úÖ PeerID —Ç–µ–ø–µ—Ä—å –∑–∞—â–∏—â–µ–Ω")
			} else {
				fmt.Println("‚ùå PeerID –Ω–µ –∑–∞—â–∏—â–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
			}

			// –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
			fmt.Println("\nüîì –£–¥–∞–ª—è–µ–º PeerID –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö...")
			removeResult := C.RemoveProtectedPeer(myPeerID)
			if removeResult == 0 {
				fmt.Println("‚úÖ PeerID —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö")

				// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
				isProtected = C.IsProtectedPeer(myPeerID)
				if isProtected == 0 {
					fmt.Println("‚úÖ PeerID –±–æ–ª—å—à–µ –Ω–µ –∑–∞—â–∏—â–µ–Ω")
				} else {
					fmt.Println("‚ùå PeerID –≤—Å–µ –µ—â–µ –∑–∞—â–∏—â–µ–Ω")
				}
			} else {
				fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å PeerID")
			}
		} else {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å PeerID –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ")
		}

		C.FreeString(myPeerID)
	}

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
	fmt.Println("\n‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏...")
	time.Sleep(10 * time.Second)

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
	fmt.Println("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")

	statusFinal := C.GetConnectionStatus()
	if statusFinal != nil {
		statusStr := C.GoString(statusFinal)
		fmt.Printf("üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %s\n", statusStr)
		C.FreeString(statusFinal)
	}

	// üîí –¢–ï–°–¢–ò–†–£–ï–ú –õ–ò–ú–ò–¢–´ –°–û–ï–î–ò–ù–ï–ù–ò–ô
	fmt.Println("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
	limits := C.GetConnectionLimits()
	if limits != nil {
		limitsStr := C.GoString(limits)
		fmt.Printf("üìã –õ–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %s\n", limitsStr)
		C.FreeString(limits)
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
	}

	// üîÑ –¢–ï–°–¢–ò–†–£–ï–ú –ê–í–¢–û–ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
	fmt.Println("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	fmt.Println("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
	isEnabled := C.IsAutoReconnectEnabled()
	if isEnabled == 1 {
		fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	} else {
		fmt.Println("‚ùå –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	}

	// –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	fmt.Println("\n‚è∏Ô∏è –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
	disableResult := C.DisableAutoReconnect()
	if disableResult == 0 {
		fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		isEnabled = C.IsAutoReconnectEnabled()
		if isEnabled == 0 {
			fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
		} else {
			fmt.Println("‚ùå –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å")
		}
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
	}

	// –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	fmt.Println("\nüîÑ –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
	enableResult := C.EnableAutoReconnect()
	if enableResult == 0 {
		fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		isEnabled = C.IsAutoReconnectEnabled()
		if isEnabled == 1 {
			fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ")
		} else {
			fmt.Println("‚ùå –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–∏–ª–æ—Å—å")
		}
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—à–µ–≥–æ –ø–∏—Ä–∞
	fmt.Println("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
	attempts := C.GetReconnectAttempts(myPeerID)
	fmt.Printf("üìã –ü–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %d\n", attempts)

	fmt.Println("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("üí° –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ segmentation fault!")
	fmt.Println("üí° –ù–ï –≤—ã–∑—ã–≤–∞–µ–º StopOwlWhisper - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
}
