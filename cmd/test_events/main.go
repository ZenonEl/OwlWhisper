package main

import (
	"fmt"
	"strings"
	"time"
)

/*
#cgo CFLAGS: -I../../internal/core
#cgo LDFLAGS: -L../../dist -lowlwhisper
#include "owlwhisper.h"
#include <stdlib.h>
*/
import "C"

func main() {
	fmt.Println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π OwlWhisper")
	fmt.Println(strings.Repeat("=", 60))

	// 1. –ó–∞–ø—É—Å–∫–∞–µ–º OwlWhisper
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ OwlWhisper...")
	result := C.StartOwlWhisper()
	if result != 0 {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ OwlWhisper")
		return
	}
	fmt.Println("‚úÖ OwlWhisper –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")

	// 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à Peer ID
	fmt.Println("\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ Peer ID...")
	peerIDPtr := C.GetMyPeerID()
	if peerIDPtr == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Peer ID")
		return
	}
	peerID := C.GoString(peerIDPtr)
	C.FreeString(peerIDPtr)
	fmt.Printf("‚úÖ –ù–∞—à Peer ID: %s\n", peerID)

	// 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º GetNextEvent –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	fmt.Println("\nüì° –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π...")
	eventChan := make(chan string, 10)

	go func() {
		for {
			eventPtr := C.GetNextEvent()
			if eventPtr == nil {
				// –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
				time.Sleep(100 * time.Millisecond)
				continue
			}

			event := C.GoString(eventPtr)
			C.FreeString(eventPtr)

			eventChan <- event
			fmt.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: %s\n", event)
		}
	}()

	// 4. –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
	fmt.Println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...")
	timeout := time.After(10 * time.Second)

	eventCount := 0
	for {
		select {
		case event := <-eventChan:
			eventCount++
			fmt.Printf("üì® –°–æ–±—ã—Ç–∏–µ #%d: %s\n", eventCount, event)

		case <-timeout:
			fmt.Printf("\n‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: %d\n", eventCount)
			goto cleanup
		}
	}

cleanup:
	// 5. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OwlWhisper
	fmt.Println("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ OwlWhisper...")
	C.StopOwlWhisper()
	fmt.Println("‚úÖ OwlWhisper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

	fmt.Println("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
	fmt.Println(strings.Repeat("=", 60))
}
