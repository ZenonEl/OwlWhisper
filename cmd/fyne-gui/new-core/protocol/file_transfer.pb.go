// Путь: cmd/fyne-gui/new-core/protocol/file_transfer.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: file_transfer.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileTransferStatus_Status int32

const (
	FileTransferStatus_UNAVAILABLE           FileTransferStatus_Status = 0 // Файл больше не доступен у отправителя
	FileTransferStatus_HASH_MISMATCH         FileTransferStatus_Status = 1 // Хеш не совпал после скачивания
	FileTransferStatus_CANCELLED_BY_SENDER   FileTransferStatus_Status = 2 // Передача отменена отправителем
	FileTransferStatus_CANCELLED_BY_RECEIVER FileTransferStatus_Status = 3 // Передача отменена получателем
	FileTransferStatus_GENERIC_ERROR         FileTransferStatus_Status = 4 // Общая ошибка
)

// Enum value maps for FileTransferStatus_Status.
var (
	FileTransferStatus_Status_name = map[int32]string{
		0: "UNAVAILABLE",
		1: "HASH_MISMATCH",
		2: "CANCELLED_BY_SENDER",
		3: "CANCELLED_BY_RECEIVER",
		4: "GENERIC_ERROR",
	}
	FileTransferStatus_Status_value = map[string]int32{
		"UNAVAILABLE":           0,
		"HASH_MISMATCH":         1,
		"CANCELLED_BY_SENDER":   2,
		"CANCELLED_BY_RECEIVER": 3,
		"GENERIC_ERROR":         4,
	}
)

func (x FileTransferStatus_Status) Enum() *FileTransferStatus_Status {
	p := new(FileTransferStatus_Status)
	*p = x
	return p
}

func (x FileTransferStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileTransferStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_file_transfer_proto_enumTypes[0].Descriptor()
}

func (FileTransferStatus_Status) Type() protoreflect.EnumType {
	return &file_file_transfer_proto_enumTypes[0]
}

func (x FileTransferStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileTransferStatus_Status.Descriptor instead.
func (FileTransferStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{4, 0}
}

// FileControl - это обертка для всех "управляющих" сообщений,
// которые передаются по основному чат-каналу для координации
// файловой передачи.
type FileControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*FileControl_Request
	//	*FileControl_Status
	//	*FileControl_SeederUpdate
	//	*FileControl_Ack
	Payload       isFileControl_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileControl) Reset() {
	*x = FileControl{}
	mi := &file_file_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileControl) ProtoMessage() {}

func (x *FileControl) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileControl.ProtoReflect.Descriptor instead.
func (*FileControl) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *FileControl) GetPayload() isFileControl_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *FileControl) GetRequest() *FileDownloadRequest {
	if x != nil {
		if x, ok := x.Payload.(*FileControl_Request); ok {
			return x.Request
		}
	}
	return nil
}

func (x *FileControl) GetStatus() *FileTransferStatus {
	if x != nil {
		if x, ok := x.Payload.(*FileControl_Status); ok {
			return x.Status
		}
	}
	return nil
}

func (x *FileControl) GetSeederUpdate() *FileSeederUpdate {
	if x != nil {
		if x, ok := x.Payload.(*FileControl_SeederUpdate); ok {
			return x.SeederUpdate
		}
	}
	return nil
}

func (x *FileControl) GetAck() *FileChunkAck {
	if x != nil {
		if x, ok := x.Payload.(*FileControl_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

type isFileControl_Payload interface {
	isFileControl_Payload()
}

type FileControl_Request struct {
	Request *FileDownloadRequest `protobuf:"bytes,1,opt,name=request,proto3,oneof"` // Запрос на начало скачивания
}

type FileControl_Status struct {
	Status *FileTransferStatus `protobuf:"bytes,2,opt,name=status,proto3,oneof"` // Сообщение о статусе (ошибка, отмена)
}

type FileControl_SeederUpdate struct {
	SeederUpdate *FileSeederUpdate `protobuf:"bytes,3,opt,name=seeder_update,json=seederUpdate,proto3,oneof"` // Уведомление о появлении нового "сида"
}

type FileControl_Ack struct {
	Ack *FileChunkAck `protobuf:"bytes,4,opt,name=ack,proto3,oneof"`
}

func (*FileControl_Request) isFileControl_Payload() {}

func (*FileControl_Status) isFileControl_Payload() {}

func (*FileControl_SeederUpdate) isFileControl_Payload() {}

func (*FileControl_Ack) isFileControl_Payload() {}

// FileDownloadRequest - запрос на начало скачивания.
type FileDownloadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`     // ID передачи, которую нужно начать
	StartOffset   int64                  `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"` // С какого байта начать (для докачки)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileDownloadRequest) Reset() {
	*x = FileDownloadRequest{}
	mi := &file_file_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDownloadRequest) ProtoMessage() {}

func (x *FileDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDownloadRequest.ProtoReflect.Descriptor instead.
func (*FileDownloadRequest) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *FileDownloadRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FileDownloadRequest) GetStartOffset() int64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

type FileChunkAck struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TransferId         string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`                          // ID передачи, к которой относится подтверждение
	AcknowledgedOffset int64                  `protobuf:"varint,2,opt,name=acknowledged_offset,json=acknowledgedOffset,proto3" json:"acknowledged_offset,omitempty"` // Смещение в байтах, до которого все получено
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FileChunkAck) Reset() {
	*x = FileChunkAck{}
	mi := &file_file_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunkAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunkAck) ProtoMessage() {}

func (x *FileChunkAck) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunkAck.ProtoReflect.Descriptor instead.
func (*FileChunkAck) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *FileChunkAck) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FileChunkAck) GetAcknowledgedOffset() int64 {
	if x != nil {
		return x.AcknowledgedOffset
	}
	return 0
}

// FileData - "Кусок" файла. Это сообщение передается по
// отдельному, высокопроизводительному файловому стриму.
type FileData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`       // ID передачи, к которой относится этот кусок
	ChunkData     []byte                 `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`          // Сами байты "куска" файла
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                                // Смещение этого "куска" от начала файла
	IsLastChunk   bool                   `protobuf:"varint,4,opt,name=is_last_chunk,json=isLastChunk,proto3" json:"is_last_chunk,omitempty"` // Флаг, что это последний "кусок"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileData) Reset() {
	*x = FileData{}
	mi := &file_file_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileData) ProtoMessage() {}

func (x *FileData) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileData.ProtoReflect.Descriptor instead.
func (*FileData) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *FileData) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FileData) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *FileData) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FileData) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

// FileTransferStatus - сообщение о статусе передачи.
type FileTransferStatus struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	TransferId    string                    `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Status        FileTransferStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=protocol.FileTransferStatus_Status" json:"status,omitempty"`
	ErrorMessage  string                    `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferStatus) Reset() {
	*x = FileTransferStatus{}
	mi := &file_file_transfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferStatus) ProtoMessage() {}

func (x *FileTransferStatus) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferStatus.ProtoReflect.Descriptor instead.
func (*FileTransferStatus) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{4}
}

func (x *FileTransferStatus) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FileTransferStatus) GetStatus() FileTransferStatus_Status {
	if x != nil {
		return x.Status
	}
	return FileTransferStatus_UNAVAILABLE
}

func (x *FileTransferStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// FileSeederUpdate - сообщение для реализации "торрент-файлов".
// Отправляется в группу, когда кто-то успешно скачал файл.
type FileSeederUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"` // PeerID нового "сида" будет взят из `sender_id` в `SecureEnvelope`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileSeederUpdate) Reset() {
	*x = FileSeederUpdate{}
	mi := &file_file_transfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileSeederUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSeederUpdate) ProtoMessage() {}

func (x *FileSeederUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSeederUpdate.ProtoReflect.Descriptor instead.
func (*FileSeederUpdate) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{5}
}

func (x *FileSeederUpdate) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

var File_file_transfer_proto protoreflect.FileDescriptor

const file_file_transfer_proto_rawDesc = "" +
	"\n" +
	"\x13file_transfer.proto\x12\bprotocol\"\xfa\x01\n" +
	"\vFileControl\x129\n" +
	"\arequest\x18\x01 \x01(\v2\x1d.protocol.FileDownloadRequestH\x00R\arequest\x126\n" +
	"\x06status\x18\x02 \x01(\v2\x1c.protocol.FileTransferStatusH\x00R\x06status\x12A\n" +
	"\rseeder_update\x18\x03 \x01(\v2\x1a.protocol.FileSeederUpdateH\x00R\fseederUpdate\x12*\n" +
	"\x03ack\x18\x04 \x01(\v2\x16.protocol.FileChunkAckH\x00R\x03ackB\t\n" +
	"\apayload\"Y\n" +
	"\x13FileDownloadRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12!\n" +
	"\fstart_offset\x18\x02 \x01(\x03R\vstartOffset\"`\n" +
	"\fFileChunkAck\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12/\n" +
	"\x13acknowledged_offset\x18\x02 \x01(\x03R\x12acknowledgedOffset\"\x86\x01\n" +
	"\bFileData\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x02 \x01(\fR\tchunkData\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\x12\"\n" +
	"\ris_last_chunk\x18\x04 \x01(\bR\visLastChunk\"\x8c\x02\n" +
	"\x12FileTransferStatus\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12;\n" +
	"\x06status\x18\x02 \x01(\x0e2#.protocol.FileTransferStatus.StatusR\x06status\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"s\n" +
	"\x06Status\x12\x0f\n" +
	"\vUNAVAILABLE\x10\x00\x12\x11\n" +
	"\rHASH_MISMATCH\x10\x01\x12\x17\n" +
	"\x13CANCELLED_BY_SENDER\x10\x02\x12\x19\n" +
	"\x15CANCELLED_BY_RECEIVER\x10\x03\x12\x11\n" +
	"\rGENERIC_ERROR\x10\x04\"3\n" +
	"\x10FileSeederUpdate\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferIdB\x04Z\x02./b\x06proto3"

var (
	file_file_transfer_proto_rawDescOnce sync.Once
	file_file_transfer_proto_rawDescData []byte
)

func file_file_transfer_proto_rawDescGZIP() []byte {
	file_file_transfer_proto_rawDescOnce.Do(func() {
		file_file_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_file_transfer_proto_rawDesc), len(file_file_transfer_proto_rawDesc)))
	})
	return file_file_transfer_proto_rawDescData
}

var file_file_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_file_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_file_transfer_proto_goTypes = []any{
	(FileTransferStatus_Status)(0), // 0: protocol.FileTransferStatus.Status
	(*FileControl)(nil),            // 1: protocol.FileControl
	(*FileDownloadRequest)(nil),    // 2: protocol.FileDownloadRequest
	(*FileChunkAck)(nil),           // 3: protocol.FileChunkAck
	(*FileData)(nil),               // 4: protocol.FileData
	(*FileTransferStatus)(nil),     // 5: protocol.FileTransferStatus
	(*FileSeederUpdate)(nil),       // 6: protocol.FileSeederUpdate
}
var file_file_transfer_proto_depIdxs = []int32{
	2, // 0: protocol.FileControl.request:type_name -> protocol.FileDownloadRequest
	5, // 1: protocol.FileControl.status:type_name -> protocol.FileTransferStatus
	6, // 2: protocol.FileControl.seeder_update:type_name -> protocol.FileSeederUpdate
	3, // 3: protocol.FileControl.ack:type_name -> protocol.FileChunkAck
	0, // 4: protocol.FileTransferStatus.status:type_name -> protocol.FileTransferStatus.Status
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_file_transfer_proto_init() }
func file_file_transfer_proto_init() {
	if File_file_transfer_proto != nil {
		return
	}
	file_file_transfer_proto_msgTypes[0].OneofWrappers = []any{
		(*FileControl_Request)(nil),
		(*FileControl_Status)(nil),
		(*FileControl_SeederUpdate)(nil),
		(*FileControl_Ack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_file_transfer_proto_rawDesc), len(file_file_transfer_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_file_transfer_proto_goTypes,
		DependencyIndexes: file_file_transfer_proto_depIdxs,
		EnumInfos:         file_file_transfer_proto_enumTypes,
		MessageInfos:      file_file_transfer_proto_msgTypes,
	}.Build()
	File_file_transfer_proto = out.File
	file_file_transfer_proto_goTypes = nil
	file_file_transfer_proto_depIdxs = nil
}
