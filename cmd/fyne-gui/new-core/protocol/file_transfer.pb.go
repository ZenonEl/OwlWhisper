// cmd/fyne-gui/new-core/protocol/file_transfer.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: file_transfer.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileTransferStatus_Status int32

const (
	FileTransferStatus_OK            FileTransferStatus_Status = 0 // Успешно (используется редко)
	FileTransferStatus_UNAVAILABLE   FileTransferStatus_Status = 1 // Файл больше не доступен у отправителя
	FileTransferStatus_HASH_MISMATCH FileTransferStatus_Status = 2 // Хеш не совпал после скачивания
	FileTransferStatus_CANCELLED     FileTransferStatus_Status = 3 // Передача отменена одной из сторон
	FileTransferStatus_GENERIC_ERROR FileTransferStatus_Status = 4 // Общая ошибка
)

// Enum value maps for FileTransferStatus_Status.
var (
	FileTransferStatus_Status_name = map[int32]string{
		0: "OK",
		1: "UNAVAILABLE",
		2: "HASH_MISMATCH",
		3: "CANCELLED",
		4: "GENERIC_ERROR",
	}
	FileTransferStatus_Status_value = map[string]int32{
		"OK":            0,
		"UNAVAILABLE":   1,
		"HASH_MISMATCH": 2,
		"CANCELLED":     3,
		"GENERIC_ERROR": 4,
	}
)

func (x FileTransferStatus_Status) Enum() *FileTransferStatus_Status {
	p := new(FileTransferStatus_Status)
	*p = x
	return p
}

func (x FileTransferStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileTransferStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_file_transfer_proto_enumTypes[0].Descriptor()
}

func (FileTransferStatus_Status) Type() protoreflect.EnumType {
	return &file_file_transfer_proto_enumTypes[0]
}

func (x FileTransferStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileTransferStatus_Status.Descriptor instead.
func (FileTransferStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{3, 0}
}

// FileMetadata - "Анонс" файла. Отправляется по основному чат-стриму.
// Сообщает получателю о том, что ему доступен для скачивания файл.
type FileMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"` // Уникальный ID для этой передачи (генерируется GUI, UUID)
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                       // Оригинальное имя файла
	SizeBytes     int64                  `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`   // Полный размер файла в байтах
	HashSha256    string                 `protobuf:"bytes,4,opt,name=hash_sha256,json=hashSha256,proto3" json:"hash_sha256,omitempty"` // Хеш всего файла для проверки целостности (в hex-формате)
	MimeType      string                 `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`       // MIME-тип файла (например, "image/jpeg")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	mi := &file_file_transfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *FileMetadata) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FileMetadata) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileMetadata) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *FileMetadata) GetHashSha256() string {
	if x != nil {
		return x.HashSha256
	}
	return ""
}

func (x *FileMetadata) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

// FileDownloadRequest - Запрос на скачивание. Отправляется по основному чат-стриму.
// Получатель отправляет это сообщение, когда пользователь нажимает "Скачать".
type FileDownloadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"` // ID передачи, которую нужно начать
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileDownloadRequest) Reset() {
	*x = FileDownloadRequest{}
	mi := &file_file_transfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDownloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDownloadRequest) ProtoMessage() {}

func (x *FileDownloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDownloadRequest.ProtoReflect.Descriptor instead.
func (*FileDownloadRequest) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *FileDownloadRequest) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

// FileData - "Кусок" файла. Отправляется по НОВОМУ, отдельному файловому стриму.
// Весь файл разбивается на такие "куски" и передается последовательно.
type FileData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"` // ID передачи, к которой относится этот кусок
	ChunkData     []byte                 `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`    // Сами байты "куска" файла
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                          // Смещение этого "куска" от начала файла (для докачки)
	LastChunk     bool                   `protobuf:"varint,4,opt,name=last_chunk,json=lastChunk,proto3" json:"last_chunk,omitempty"`   // Последний кусок
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileData) Reset() {
	*x = FileData{}
	mi := &file_file_transfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileData) ProtoMessage() {}

func (x *FileData) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileData.ProtoReflect.Descriptor instead.
func (*FileData) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *FileData) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FileData) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *FileData) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *FileData) GetLastChunk() bool {
	if x != nil {
		return x.LastChunk
	}
	return false
}

// FileTransferStatus - Сообщение о статусе. Отправляется по основному чат-стриму.
// Используется для уведомления об ошибках или успешном завершении.
type FileTransferStatus struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	TransferId    string                    `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"`
	Status        FileTransferStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=protocol.FileTransferStatus_Status" json:"status,omitempty"`
	ErrorMessage  string                    `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Дополнительное сообщение об ошибке
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferStatus) Reset() {
	*x = FileTransferStatus{}
	mi := &file_file_transfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferStatus) ProtoMessage() {}

func (x *FileTransferStatus) ProtoReflect() protoreflect.Message {
	mi := &file_file_transfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferStatus.ProtoReflect.Descriptor instead.
func (*FileTransferStatus) Descriptor() ([]byte, []int) {
	return file_file_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *FileTransferStatus) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FileTransferStatus) GetStatus() FileTransferStatus_Status {
	if x != nil {
		return x.Status
	}
	return FileTransferStatus_OK
}

func (x *FileTransferStatus) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_file_transfer_proto protoreflect.FileDescriptor

const file_file_transfer_proto_rawDesc = "" +
	"\n" +
	"\x13file_transfer.proto\x12\bprotocol\"\xa8\x01\n" +
	"\fFileMetadata\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x03 \x01(\x03R\tsizeBytes\x12\x1f\n" +
	"\vhash_sha256\x18\x04 \x01(\tR\n" +
	"hashSha256\x12\x1b\n" +
	"\tmime_type\x18\x05 \x01(\tR\bmimeType\"6\n" +
	"\x13FileDownloadRequest\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\"\x81\x01\n" +
	"\bFileData\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x02 \x01(\fR\tchunkData\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\x12\x1d\n" +
	"\n" +
	"last_chunk\x18\x04 \x01(\bR\tlastChunk\"\xef\x01\n" +
	"\x12FileTransferStatus\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12;\n" +
	"\x06status\x18\x02 \x01(\x0e2#.protocol.FileTransferStatus.StatusR\x06status\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\"V\n" +
	"\x06Status\x12\x06\n" +
	"\x02OK\x10\x00\x12\x0f\n" +
	"\vUNAVAILABLE\x10\x01\x12\x11\n" +
	"\rHASH_MISMATCH\x10\x02\x12\r\n" +
	"\tCANCELLED\x10\x03\x12\x11\n" +
	"\rGENERIC_ERROR\x10\x04B\x04Z\x02./b\x06proto3"

var (
	file_file_transfer_proto_rawDescOnce sync.Once
	file_file_transfer_proto_rawDescData []byte
)

func file_file_transfer_proto_rawDescGZIP() []byte {
	file_file_transfer_proto_rawDescOnce.Do(func() {
		file_file_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_file_transfer_proto_rawDesc), len(file_file_transfer_proto_rawDesc)))
	})
	return file_file_transfer_proto_rawDescData
}

var file_file_transfer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_file_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_file_transfer_proto_goTypes = []any{
	(FileTransferStatus_Status)(0), // 0: protocol.FileTransferStatus.Status
	(*FileMetadata)(nil),           // 1: protocol.FileMetadata
	(*FileDownloadRequest)(nil),    // 2: protocol.FileDownloadRequest
	(*FileData)(nil),               // 3: protocol.FileData
	(*FileTransferStatus)(nil),     // 4: protocol.FileTransferStatus
}
var file_file_transfer_proto_depIdxs = []int32{
	0, // 0: protocol.FileTransferStatus.status:type_name -> protocol.FileTransferStatus.Status
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_file_transfer_proto_init() }
func file_file_transfer_proto_init() {
	if File_file_transfer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_file_transfer_proto_rawDesc), len(file_file_transfer_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_file_transfer_proto_goTypes,
		DependencyIndexes: file_file_transfer_proto_depIdxs,
		EnumInfos:         file_file_transfer_proto_enumTypes,
		MessageInfos:      file_file_transfer_proto_msgTypes,
	}.Build()
	File_file_transfer_proto = out.File
	file_file_transfer_proto_goTypes = nil
	file_file_transfer_proto_depIdxs = nil
}
