// Путь: cmd/fyne-gui/new-core/protocol/capabilities.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: capabilities.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FeatureSpec описывает одну конкретную возможность или протокол,
// поддерживаемый клиентом.
type FeatureSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный, человеко-читаемый идентификатор функции.
	// Рекомендуемый формат: "домен/версия/специфика".
	//
	// Примеры:
	// "crypto/v1/simple-ecdh"
	// "chat/v1/text-protobuf"
	// "chat/v2/replies"
	// "files/v1/ack-protocol"
	// "files/v2/sliding-window"
	// "calls/v1/webtc-audio"
	// "libp2p/protocol/chat/1.0.0"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Опциональные, специфичные для функции параметры в формате JSON.
	// Позволяет согласовывать детали, не меняя протокол.
	//
	// Пример для "files/v1/ack-protocol":
	// `{"supported_window_sizes_mb": [16, 32, 64]}`
	//
	// Пример для "calls/v1/webrtc-audio":
	// `{"supported_codecs": ["opus", "g722"]}`
	Params        string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeatureSpec) Reset() {
	*x = FeatureSpec{}
	mi := &file_capabilities_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureSpec) ProtoMessage() {}

func (x *FeatureSpec) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureSpec.ProtoReflect.Descriptor instead.
func (*FeatureSpec) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureSpec) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

// Capabilities описывает полный набор возможностей и поддерживаемых
// протоколов клиента. Эта структура передается при знакомстве.
type Capabilities struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Имя клиентского ПО.
	// Пример: "OwlWhisper Desktop", "PineappleWhisper Mobile"
	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	// Версия клиентского ПО. Рекомендуется использовать SemVer.
	// Пример: "0.1.0-alpha", "1.2.3"
	ClientVersion string `protobuf:"bytes,2,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	// Список всех функций и протоколов, которые поддерживает клиент.
	// Клиент, получающий этот список, должен игнорировать
	// неизвестные ему FeatureSpec.
	Features      []*FeatureSpec `protobuf:"bytes,10,rep,name=features,proto3" json:"features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	mi := &file_capabilities_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_capabilities_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_capabilities_proto_rawDescGZIP(), []int{1}
}

func (x *Capabilities) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *Capabilities) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *Capabilities) GetFeatures() []*FeatureSpec {
	if x != nil {
		return x.Features
	}
	return nil
}

var File_capabilities_proto protoreflect.FileDescriptor

const file_capabilities_proto_rawDesc = "" +
	"\n" +
	"\x12capabilities.proto\x12\bprotocol\"5\n" +
	"\vFeatureSpec\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06params\x18\x02 \x01(\tR\x06params\"\x89\x01\n" +
	"\fCapabilities\x12\x1f\n" +
	"\vclient_name\x18\x01 \x01(\tR\n" +
	"clientName\x12%\n" +
	"\x0eclient_version\x18\x02 \x01(\tR\rclientVersion\x121\n" +
	"\bfeatures\x18\n" +
	" \x03(\v2\x15.protocol.FeatureSpecR\bfeaturesB\x04Z\x02./b\x06proto3"

var (
	file_capabilities_proto_rawDescOnce sync.Once
	file_capabilities_proto_rawDescData []byte
)

func file_capabilities_proto_rawDescGZIP() []byte {
	file_capabilities_proto_rawDescOnce.Do(func() {
		file_capabilities_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_capabilities_proto_rawDesc), len(file_capabilities_proto_rawDesc)))
	})
	return file_capabilities_proto_rawDescData
}

var file_capabilities_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_capabilities_proto_goTypes = []any{
	(*FeatureSpec)(nil),  // 0: protocol.FeatureSpec
	(*Capabilities)(nil), // 1: protocol.Capabilities
}
var file_capabilities_proto_depIdxs = []int32{
	0, // 0: protocol.Capabilities.features:type_name -> protocol.FeatureSpec
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_capabilities_proto_init() }
func file_capabilities_proto_init() {
	if File_capabilities_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_capabilities_proto_rawDesc), len(file_capabilities_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_capabilities_proto_goTypes,
		DependencyIndexes: file_capabilities_proto_depIdxs,
		MessageInfos:      file_capabilities_proto_msgTypes,
	}.Build()
	File_capabilities_proto = out.File
	file_capabilities_proto_goTypes = nil
	file_capabilities_proto_depIdxs = nil
}
