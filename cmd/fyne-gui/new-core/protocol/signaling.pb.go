// Путь: cmd/fyne-gui/new-core/protocol/signaling.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: signaling.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CallHangup_Reason int32

const (
	CallHangup_REASON_UNSPECIFIED CallHangup_Reason = 0
	CallHangup_REJECTED           CallHangup_Reason = 1 // Отклонено
	CallHangup_HUNG_UP            CallHangup_Reason = 2 // Завершено пользователем
	CallHangup_TIMEOUT            CallHangup_Reason = 3 // Не отвечен
	CallHangup_ERROR              CallHangup_Reason = 4 // Произошла ошибка
)

// Enum value maps for CallHangup_Reason.
var (
	CallHangup_Reason_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "REJECTED",
		2: "HUNG_UP",
		3: "TIMEOUT",
		4: "ERROR",
	}
	CallHangup_Reason_value = map[string]int32{
		"REASON_UNSPECIFIED": 0,
		"REJECTED":           1,
		"HUNG_UP":            2,
		"TIMEOUT":            3,
		"ERROR":              4,
	}
)

func (x CallHangup_Reason) Enum() *CallHangup_Reason {
	p := new(CallHangup_Reason)
	*p = x
	return p
}

func (x CallHangup_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallHangup_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_signaling_proto_enumTypes[0].Descriptor()
}

func (CallHangup_Reason) Type() protoreflect.EnumType {
	return &file_signaling_proto_enumTypes[0]
}

func (x CallHangup_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallHangup_Reason.Descriptor instead.
func (CallHangup_Reason) EnumDescriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{4, 0}
}

// SignalingMessage - это обертка для всех сообщений, связанных
// с установкой и управлением P2P медиа-соединениями.
type SignalingMessage struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	CallId string                 `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"` // Уникальный ID для этого конкретного звонка (генерируется GUI)
	// Types that are valid to be assigned to Payload:
	//
	//	*SignalingMessage_Offer
	//	*SignalingMessage_Answer
	//	*SignalingMessage_Candidate
	//	*SignalingMessage_Hangup
	//	*SignalingMessage_Negotiation
	Payload       isSignalingMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalingMessage) Reset() {
	*x = SignalingMessage{}
	mi := &file_signaling_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalingMessage) ProtoMessage() {}

func (x *SignalingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalingMessage.ProtoReflect.Descriptor instead.
func (*SignalingMessage) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{0}
}

func (x *SignalingMessage) GetCallId() string {
	if x != nil {
		return x.CallId
	}
	return ""
}

func (x *SignalingMessage) GetPayload() isSignalingMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SignalingMessage) GetOffer() *CallOffer {
	if x != nil {
		if x, ok := x.Payload.(*SignalingMessage_Offer); ok {
			return x.Offer
		}
	}
	return nil
}

func (x *SignalingMessage) GetAnswer() *CallAnswer {
	if x != nil {
		if x, ok := x.Payload.(*SignalingMessage_Answer); ok {
			return x.Answer
		}
	}
	return nil
}

func (x *SignalingMessage) GetCandidate() *ICECandidate {
	if x != nil {
		if x, ok := x.Payload.(*SignalingMessage_Candidate); ok {
			return x.Candidate
		}
	}
	return nil
}

func (x *SignalingMessage) GetHangup() *CallHangup {
	if x != nil {
		if x, ok := x.Payload.(*SignalingMessage_Hangup); ok {
			return x.Hangup
		}
	}
	return nil
}

func (x *SignalingMessage) GetNegotiation() *CallNegotiation {
	if x != nil {
		if x, ok := x.Payload.(*SignalingMessage_Negotiation); ok {
			return x.Negotiation
		}
	}
	return nil
}

type isSignalingMessage_Payload interface {
	isSignalingMessage_Payload()
}

type SignalingMessage_Offer struct {
	Offer *CallOffer `protobuf:"bytes,2,opt,name=offer,proto3,oneof"` // Предложение начать звонок
}

type SignalingMessage_Answer struct {
	Answer *CallAnswer `protobuf:"bytes,3,opt,name=answer,proto3,oneof"` // Ответ на предложение
}

type SignalingMessage_Candidate struct {
	Candidate *ICECandidate `protobuf:"bytes,4,opt,name=candidate,proto3,oneof"` // Кандидат для установки NAT-пробивания
}

type SignalingMessage_Hangup struct {
	Hangup *CallHangup `protobuf:"bytes,5,opt,name=hangup,proto3,oneof"` // Завершение звонка
}

type SignalingMessage_Negotiation struct {
	Negotiation *CallNegotiation `protobuf:"bytes,6,opt,name=negotiation,proto3,oneof"` // Для пересогласования (вкл/выкл видео)
}

func (*SignalingMessage_Offer) isSignalingMessage_Payload() {}

func (*SignalingMessage_Answer) isSignalingMessage_Payload() {}

func (*SignalingMessage_Candidate) isSignalingMessage_Payload() {}

func (*SignalingMessage_Hangup) isSignalingMessage_Payload() {}

func (*SignalingMessage_Negotiation) isSignalingMessage_Payload() {}

// CallOffer содержит SDP "предложение".
type CallOffer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Sdp   string                 `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	// НОВОЕ ПОЛЕ: Карта с метаданными звонка.
	// Позволяет GUI передавать дополнительную информацию, не меняя протокол.
	// Например: {"has_video": "true", "caller_name": "Alice"}
	Metadata      map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallOffer) Reset() {
	*x = CallOffer{}
	mi := &file_signaling_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallOffer) ProtoMessage() {}

func (x *CallOffer) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallOffer.ProtoReflect.Descriptor instead.
func (*CallOffer) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{1}
}

func (x *CallOffer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

func (x *CallOffer) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// CallAnswer содержит SDP "ответ".
type CallAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sdp           string                 `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallAnswer) Reset() {
	*x = CallAnswer{}
	mi := &file_signaling_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallAnswer) ProtoMessage() {}

func (x *CallAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallAnswer.ProtoReflect.Descriptor instead.
func (*CallAnswer) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{2}
}

func (x *CallAnswer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

// ICECandidate содержит информацию для установки прямого соединения.
type ICECandidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Candidate     string                 `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"` // Переименовано для ясности
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ICECandidate) Reset() {
	*x = ICECandidate{}
	mi := &file_signaling_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ICECandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICECandidate) ProtoMessage() {}

func (x *ICECandidate) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICECandidate.ProtoReflect.Descriptor instead.
func (*ICECandidate) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{3}
}

func (x *ICECandidate) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

// CallHangup - простое сообщение для завершения звонка.
type CallHangup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        CallHangup_Reason      `protobuf:"varint,1,opt,name=reason,proto3,enum=protocol.CallHangup_Reason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallHangup) Reset() {
	*x = CallHangup{}
	mi := &file_signaling_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallHangup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallHangup) ProtoMessage() {}

func (x *CallHangup) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallHangup.ProtoReflect.Descriptor instead.
func (*CallHangup) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{4}
}

func (x *CallHangup) GetReason() CallHangup_Reason {
	if x != nil {
		return x.Reason
	}
	return CallHangup_REASON_UNSPECIFIED
}

// CallNegotiation используется для изменения параметров звонка "на лету".
type CallNegotiation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sdp           string                 `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallNegotiation) Reset() {
	*x = CallNegotiation{}
	mi := &file_signaling_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallNegotiation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallNegotiation) ProtoMessage() {}

func (x *CallNegotiation) ProtoReflect() protoreflect.Message {
	mi := &file_signaling_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallNegotiation.ProtoReflect.Descriptor instead.
func (*CallNegotiation) Descriptor() ([]byte, []int) {
	return file_signaling_proto_rawDescGZIP(), []int{5}
}

func (x *CallNegotiation) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

var File_signaling_proto protoreflect.FileDescriptor

const file_signaling_proto_rawDesc = "" +
	"\n" +
	"\x0fsignaling.proto\x12\bprotocol\"\xba\x02\n" +
	"\x10SignalingMessage\x12\x17\n" +
	"\acall_id\x18\x01 \x01(\tR\x06callId\x12+\n" +
	"\x05offer\x18\x02 \x01(\v2\x13.protocol.CallOfferH\x00R\x05offer\x12.\n" +
	"\x06answer\x18\x03 \x01(\v2\x14.protocol.CallAnswerH\x00R\x06answer\x126\n" +
	"\tcandidate\x18\x04 \x01(\v2\x16.protocol.ICECandidateH\x00R\tcandidate\x12.\n" +
	"\x06hangup\x18\x05 \x01(\v2\x14.protocol.CallHangupH\x00R\x06hangup\x12=\n" +
	"\vnegotiation\x18\x06 \x01(\v2\x19.protocol.CallNegotiationH\x00R\vnegotiationB\t\n" +
	"\apayload\"\x99\x01\n" +
	"\tCallOffer\x12\x10\n" +
	"\x03sdp\x18\x01 \x01(\tR\x03sdp\x12=\n" +
	"\bmetadata\x18\x02 \x03(\v2!.protocol.CallOffer.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x1e\n" +
	"\n" +
	"CallAnswer\x12\x10\n" +
	"\x03sdp\x18\x01 \x01(\tR\x03sdp\",\n" +
	"\fICECandidate\x12\x1c\n" +
	"\tcandidate\x18\x01 \x01(\tR\tcandidate\"\x96\x01\n" +
	"\n" +
	"CallHangup\x123\n" +
	"\x06reason\x18\x01 \x01(\x0e2\x1b.protocol.CallHangup.ReasonR\x06reason\"S\n" +
	"\x06Reason\x12\x16\n" +
	"\x12REASON_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bREJECTED\x10\x01\x12\v\n" +
	"\aHUNG_UP\x10\x02\x12\v\n" +
	"\aTIMEOUT\x10\x03\x12\t\n" +
	"\x05ERROR\x10\x04\"#\n" +
	"\x0fCallNegotiation\x12\x10\n" +
	"\x03sdp\x18\x01 \x01(\tR\x03sdpB\x04Z\x02./b\x06proto3"

var (
	file_signaling_proto_rawDescOnce sync.Once
	file_signaling_proto_rawDescData []byte
)

func file_signaling_proto_rawDescGZIP() []byte {
	file_signaling_proto_rawDescOnce.Do(func() {
		file_signaling_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_signaling_proto_rawDesc), len(file_signaling_proto_rawDesc)))
	})
	return file_signaling_proto_rawDescData
}

var file_signaling_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_signaling_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_signaling_proto_goTypes = []any{
	(CallHangup_Reason)(0),   // 0: protocol.CallHangup.Reason
	(*SignalingMessage)(nil), // 1: protocol.SignalingMessage
	(*CallOffer)(nil),        // 2: protocol.CallOffer
	(*CallAnswer)(nil),       // 3: protocol.CallAnswer
	(*ICECandidate)(nil),     // 4: protocol.ICECandidate
	(*CallHangup)(nil),       // 5: protocol.CallHangup
	(*CallNegotiation)(nil),  // 6: protocol.CallNegotiation
	nil,                      // 7: protocol.CallOffer.MetadataEntry
}
var file_signaling_proto_depIdxs = []int32{
	2, // 0: protocol.SignalingMessage.offer:type_name -> protocol.CallOffer
	3, // 1: protocol.SignalingMessage.answer:type_name -> protocol.CallAnswer
	4, // 2: protocol.SignalingMessage.candidate:type_name -> protocol.ICECandidate
	5, // 3: protocol.SignalingMessage.hangup:type_name -> protocol.CallHangup
	6, // 4: protocol.SignalingMessage.negotiation:type_name -> protocol.CallNegotiation
	7, // 5: protocol.CallOffer.metadata:type_name -> protocol.CallOffer.MetadataEntry
	0, // 6: protocol.CallHangup.reason:type_name -> protocol.CallHangup.Reason
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_signaling_proto_init() }
func file_signaling_proto_init() {
	if File_signaling_proto != nil {
		return
	}
	file_signaling_proto_msgTypes[0].OneofWrappers = []any{
		(*SignalingMessage_Offer)(nil),
		(*SignalingMessage_Answer)(nil),
		(*SignalingMessage_Candidate)(nil),
		(*SignalingMessage_Hangup)(nil),
		(*SignalingMessage_Negotiation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_signaling_proto_rawDesc), len(file_signaling_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_signaling_proto_goTypes,
		DependencyIndexes: file_signaling_proto_depIdxs,
		EnumInfos:         file_signaling_proto_enumTypes,
		MessageInfos:      file_signaling_proto_msgTypes,
	}.Build()
	File_signaling_proto = out.File
	file_signaling_proto_goTypes = nil
	file_signaling_proto_depIdxs = nil
}
