// command.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: command.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DiscloseProfile - это ответ на "пинг", содержащий публичную информацию
// о пользователе. Передается внутри SignedCommand для доказательства подлинности.
type DiscloseProfile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Profile       *ProfilePayload        `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscloseProfile) Reset() {
	*x = DiscloseProfile{}
	mi := &file_command_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscloseProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscloseProfile) ProtoMessage() {}

func (x *DiscloseProfile) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscloseProfile.ProtoReflect.Descriptor instead.
func (*DiscloseProfile) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{0}
}

func (x *DiscloseProfile) GetProfile() *ProfilePayload {
	if x != nil {
		return x.Profile
	}
	return nil
}

// SignedCommand - это внешний конверт для любой команды, изменяющей состояние.
// Он обеспечивает аутентичность и целостность.
type SignedCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Публичный ключ автора команды. Его подпись мы будем проверять.
	AuthorIdentity *IdentityPublicKey `protobuf:"bytes,1,opt,name=author_identity,json=authorIdentity,proto3" json:"author_identity,omitempty"`
	// Сериализованный объект Command. Именно эти байты подписываются.
	CommandData []byte `protobuf:"bytes,2,opt,name=command_data,json=commandData,proto3" json:"command_data,omitempty"`
	// Цифровая подпись для command_data, созданная приватным ключом автора.
	Signature     []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedCommand) Reset() {
	*x = SignedCommand{}
	mi := &file_command_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedCommand) ProtoMessage() {}

func (x *SignedCommand) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedCommand.ProtoReflect.Descriptor instead.
func (*SignedCommand) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{1}
}

func (x *SignedCommand) GetAuthorIdentity() *IdentityPublicKey {
	if x != nil {
		return x.AuthorIdentity
	}
	return nil
}

func (x *SignedCommand) GetCommandData() []byte {
	if x != nil {
		return x.CommandData
	}
	return nil
}

func (x *SignedCommand) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Command - это сама команда, которая подписывается.
type Command struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Уникальный идентификатор "контекста" общения (чата 1:1 или группы),
	// к которому относится эта команда.
	// Для чата 1:1 это может быть, например, отсортированный и хешированный
	// набор публичных ключей участников. Для группы - случайный UUID,
	// сгенерированный при создании.
	ContextId string `protobuf:"bytes,1,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// Порядковый номер команды от этого автора в рамках этого контекста.
	// Начинается с 1. Используется для строгой упорядоченности команд
	// и как главная защита от Replay-атак.
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Полезная нагрузка - само действие. `oneof` гарантирует, что команда
	// может быть только одного типа.
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*Command_InitiateContext
	//	*Command_DiscloseProfile
	//	*Command_AcknowledgeContext
	//	*Command_AddMembers
	//	*Command_RemoveMembers
	//	*Command_PromoteAdmins
	Payload       isCommand_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_command_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{2}
}

func (x *Command) GetContextId() string {
	if x != nil {
		return x.ContextId
	}
	return ""
}

func (x *Command) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Command) GetPayload() isCommand_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Command) GetInitiateContext() *InitiateContext {
	if x != nil {
		if x, ok := x.Payload.(*Command_InitiateContext); ok {
			return x.InitiateContext
		}
	}
	return nil
}

func (x *Command) GetDiscloseProfile() *DiscloseProfile {
	if x != nil {
		if x, ok := x.Payload.(*Command_DiscloseProfile); ok {
			return x.DiscloseProfile
		}
	}
	return nil
}

func (x *Command) GetAcknowledgeContext() *AcknowledgeContext {
	if x != nil {
		if x, ok := x.Payload.(*Command_AcknowledgeContext); ok {
			return x.AcknowledgeContext
		}
	}
	return nil
}

func (x *Command) GetAddMembers() *AddMembers {
	if x != nil {
		if x, ok := x.Payload.(*Command_AddMembers); ok {
			return x.AddMembers
		}
	}
	return nil
}

func (x *Command) GetRemoveMembers() *RemoveMembers {
	if x != nil {
		if x, ok := x.Payload.(*Command_RemoveMembers); ok {
			return x.RemoveMembers
		}
	}
	return nil
}

func (x *Command) GetPromoteAdmins() *PromoteAdmins {
	if x != nil {
		if x, ok := x.Payload.(*Command_PromoteAdmins); ok {
			return x.PromoteAdmins
		}
	}
	return nil
}

type isCommand_Payload interface {
	isCommand_Payload()
}

type Command_InitiateContext struct {
	// === Команды, общие для всех контекстов ===
	InitiateContext *InitiateContext `protobuf:"bytes,10,opt,name=initiate_context,json=initiateContext,proto3,oneof"` // Начать новый чат (1:1 или группу)
}

type Command_DiscloseProfile struct {
	DiscloseProfile *DiscloseProfile `protobuf:"bytes,11,opt,name=disclose_profile,json=discloseProfile,proto3,oneof"` // НОВАЯ КОМАНДА: Раскрыть свой профиль в ответ на пинг
}

type Command_AcknowledgeContext struct {
	AcknowledgeContext *AcknowledgeContext `protobuf:"bytes,12,opt,name=acknowledge_context,json=acknowledgeContext,proto3,oneof"`
}

type Command_AddMembers struct {
	// === Команды, специфичные для групп ===
	AddMembers *AddMembers `protobuf:"bytes,20,opt,name=add_members,json=addMembers,proto3,oneof"`
}

type Command_RemoveMembers struct {
	RemoveMembers *RemoveMembers `protobuf:"bytes,21,opt,name=remove_members,json=removeMembers,proto3,oneof"`
}

type Command_PromoteAdmins struct {
	PromoteAdmins *PromoteAdmins `protobuf:"bytes,22,opt,name=promote_admins,json=promoteAdmins,proto3,oneof"`
}

func (*Command_InitiateContext) isCommand_Payload() {}

func (*Command_DiscloseProfile) isCommand_Payload() {}

func (*Command_AcknowledgeContext) isCommand_Payload() {}

func (*Command_AddMembers) isCommand_Payload() {}

func (*Command_RemoveMembers) isCommand_Payload() {}

func (*Command_PromoteAdmins) isCommand_Payload() {}

// InitiateContext используется для создания нового чата.
type InitiateContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список всех первоначальных участников контекста.
	InitialMembers []*IdentityPublicKey `protobuf:"bytes,1,rep,name=initial_members,json=initialMembers,proto3" json:"initial_members,omitempty"`
	// Политика чата (например, "только админы могут добавлять участников").
	// Можно определить позже.
	Policy             []byte          `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	SenderProfile      *ProfilePayload `protobuf:"bytes,3,opt,name=sender_profile,json=senderProfile,proto3" json:"sender_profile,omitempty"`
	EphemeralPublicKey []byte          `protobuf:"bytes,4,opt,name=ephemeral_public_key,json=ephemeralPublicKey,proto3" json:"ephemeral_public_key,omitempty"`
	ChosenCryptoSuite  string          `protobuf:"bytes,5,opt,name=chosen_crypto_suite,json=chosenCryptoSuite,proto3" json:"chosen_crypto_suite,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *InitiateContext) Reset() {
	*x = InitiateContext{}
	mi := &file_command_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitiateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateContext) ProtoMessage() {}

func (x *InitiateContext) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateContext.ProtoReflect.Descriptor instead.
func (*InitiateContext) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{3}
}

func (x *InitiateContext) GetInitialMembers() []*IdentityPublicKey {
	if x != nil {
		return x.InitialMembers
	}
	return nil
}

func (x *InitiateContext) GetPolicy() []byte {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *InitiateContext) GetSenderProfile() *ProfilePayload {
	if x != nil {
		return x.SenderProfile
	}
	return nil
}

func (x *InitiateContext) GetEphemeralPublicKey() []byte {
	if x != nil {
		return x.EphemeralPublicKey
	}
	return nil
}

func (x *InitiateContext) GetChosenCryptoSuite() string {
	if x != nil {
		return x.ChosenCryptoSuite
	}
	return ""
}

// AcknowledgeContext - это ответная команда для подтверждения участия
// в новом контексте (чате).
type AcknowledgeContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Профиль отвечающего, чтобы инициатор мог его сохранить.
	SenderProfile      *ProfilePayload `protobuf:"bytes,1,opt,name=sender_profile,json=senderProfile,proto3" json:"sender_profile,omitempty"`
	EphemeralPublicKey []byte          `protobuf:"bytes,2,opt,name=ephemeral_public_key,json=ephemeralPublicKey,proto3" json:"ephemeral_public_key,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AcknowledgeContext) Reset() {
	*x = AcknowledgeContext{}
	mi := &file_command_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeContext) ProtoMessage() {}

func (x *AcknowledgeContext) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeContext.ProtoReflect.Descriptor instead.
func (*AcknowledgeContext) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4}
}

func (x *AcknowledgeContext) GetSenderProfile() *ProfilePayload {
	if x != nil {
		return x.SenderProfile
	}
	return nil
}

func (x *AcknowledgeContext) GetEphemeralPublicKey() []byte {
	if x != nil {
		return x.EphemeralPublicKey
	}
	return nil
}

// AddMembers добавляет новых участников в существующий контекст (группу).
type AddMembers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MembersToAdd  []*IdentityPublicKey   `protobuf:"bytes,1,rep,name=members_to_add,json=membersToAdd,proto3" json:"members_to_add,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddMembers) Reset() {
	*x = AddMembers{}
	mi := &file_command_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMembers) ProtoMessage() {}

func (x *AddMembers) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMembers.ProtoReflect.Descriptor instead.
func (*AddMembers) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{5}
}

func (x *AddMembers) GetMembersToAdd() []*IdentityPublicKey {
	if x != nil {
		return x.MembersToAdd
	}
	return nil
}

// RemoveMembers удаляет участников из существующего контекста (группы).
type RemoveMembers struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MembersToRemove []*IdentityPublicKey   `protobuf:"bytes,1,rep,name=members_to_remove,json=membersToRemove,proto3" json:"members_to_remove,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RemoveMembers) Reset() {
	*x = RemoveMembers{}
	mi := &file_command_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMembers) ProtoMessage() {}

func (x *RemoveMembers) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMembers.ProtoReflect.Descriptor instead.
func (*RemoveMembers) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{6}
}

func (x *RemoveMembers) GetMembersToRemove() []*IdentityPublicKey {
	if x != nil {
		return x.MembersToRemove
	}
	return nil
}

// PromoteAdmins назначает участников администраторами.
type PromoteAdmins struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MembersToPromote []*IdentityPublicKey   `protobuf:"bytes,1,rep,name=members_to_promote,json=membersToPromote,proto3" json:"members_to_promote,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PromoteAdmins) Reset() {
	*x = PromoteAdmins{}
	mi := &file_command_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PromoteAdmins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteAdmins) ProtoMessage() {}

func (x *PromoteAdmins) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteAdmins.ProtoReflect.Descriptor instead.
func (*PromoteAdmins) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{7}
}

func (x *PromoteAdmins) GetMembersToPromote() []*IdentityPublicKey {
	if x != nil {
		return x.MembersToPromote
	}
	return nil
}

var File_command_proto protoreflect.FileDescriptor

const file_command_proto_rawDesc = "" +
	"\n" +
	"\rcommand.proto\x12\bprotocol\x1a\x0eidentity.proto\"E\n" +
	"\x0fDiscloseProfile\x122\n" +
	"\aprofile\x18\x01 \x01(\v2\x18.protocol.ProfilePayloadR\aprofile\"\x96\x01\n" +
	"\rSignedCommand\x12D\n" +
	"\x0fauthor_identity\x18\x01 \x01(\v2\x1b.protocol.IdentityPublicKeyR\x0eauthorIdentity\x12!\n" +
	"\fcommand_data\x18\x02 \x01(\fR\vcommandData\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\fR\tsignature\"\xfa\x03\n" +
	"\aCommand\x12\x1d\n" +
	"\n" +
	"context_id\x18\x01 \x01(\tR\tcontextId\x12'\n" +
	"\x0fsequence_number\x18\x02 \x01(\x04R\x0esequenceNumber\x12F\n" +
	"\x10initiate_context\x18\n" +
	" \x01(\v2\x19.protocol.InitiateContextH\x00R\x0finitiateContext\x12F\n" +
	"\x10disclose_profile\x18\v \x01(\v2\x19.protocol.DiscloseProfileH\x00R\x0fdiscloseProfile\x12O\n" +
	"\x13acknowledge_context\x18\f \x01(\v2\x1c.protocol.AcknowledgeContextH\x00R\x12acknowledgeContext\x127\n" +
	"\vadd_members\x18\x14 \x01(\v2\x14.protocol.AddMembersH\x00R\n" +
	"addMembers\x12@\n" +
	"\x0eremove_members\x18\x15 \x01(\v2\x17.protocol.RemoveMembersH\x00R\rremoveMembers\x12@\n" +
	"\x0epromote_admins\x18\x16 \x01(\v2\x17.protocol.PromoteAdminsH\x00R\rpromoteAdminsB\t\n" +
	"\apayload\"\x92\x02\n" +
	"\x0fInitiateContext\x12D\n" +
	"\x0finitial_members\x18\x01 \x03(\v2\x1b.protocol.IdentityPublicKeyR\x0einitialMembers\x12\x16\n" +
	"\x06policy\x18\x02 \x01(\fR\x06policy\x12?\n" +
	"\x0esender_profile\x18\x03 \x01(\v2\x18.protocol.ProfilePayloadR\rsenderProfile\x120\n" +
	"\x14ephemeral_public_key\x18\x04 \x01(\fR\x12ephemeralPublicKey\x12.\n" +
	"\x13chosen_crypto_suite\x18\x05 \x01(\tR\x11chosenCryptoSuite\"\x87\x01\n" +
	"\x12AcknowledgeContext\x12?\n" +
	"\x0esender_profile\x18\x01 \x01(\v2\x18.protocol.ProfilePayloadR\rsenderProfile\x120\n" +
	"\x14ephemeral_public_key\x18\x02 \x01(\fR\x12ephemeralPublicKey\"O\n" +
	"\n" +
	"AddMembers\x12A\n" +
	"\x0emembers_to_add\x18\x01 \x03(\v2\x1b.protocol.IdentityPublicKeyR\fmembersToAdd\"X\n" +
	"\rRemoveMembers\x12G\n" +
	"\x11members_to_remove\x18\x01 \x03(\v2\x1b.protocol.IdentityPublicKeyR\x0fmembersToRemove\"Z\n" +
	"\rPromoteAdmins\x12I\n" +
	"\x12members_to_promote\x18\x01 \x03(\v2\x1b.protocol.IdentityPublicKeyR\x10membersToPromoteB\x04Z\x02./b\x06proto3"

var (
	file_command_proto_rawDescOnce sync.Once
	file_command_proto_rawDescData []byte
)

func file_command_proto_rawDescGZIP() []byte {
	file_command_proto_rawDescOnce.Do(func() {
		file_command_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_command_proto_rawDesc), len(file_command_proto_rawDesc)))
	})
	return file_command_proto_rawDescData
}

var file_command_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_command_proto_goTypes = []any{
	(*DiscloseProfile)(nil),    // 0: protocol.DiscloseProfile
	(*SignedCommand)(nil),      // 1: protocol.SignedCommand
	(*Command)(nil),            // 2: protocol.Command
	(*InitiateContext)(nil),    // 3: protocol.InitiateContext
	(*AcknowledgeContext)(nil), // 4: protocol.AcknowledgeContext
	(*AddMembers)(nil),         // 5: protocol.AddMembers
	(*RemoveMembers)(nil),      // 6: protocol.RemoveMembers
	(*PromoteAdmins)(nil),      // 7: protocol.PromoteAdmins
	(*ProfilePayload)(nil),     // 8: protocol.ProfilePayload
	(*IdentityPublicKey)(nil),  // 9: protocol.IdentityPublicKey
}
var file_command_proto_depIdxs = []int32{
	8,  // 0: protocol.DiscloseProfile.profile:type_name -> protocol.ProfilePayload
	9,  // 1: protocol.SignedCommand.author_identity:type_name -> protocol.IdentityPublicKey
	3,  // 2: protocol.Command.initiate_context:type_name -> protocol.InitiateContext
	0,  // 3: protocol.Command.disclose_profile:type_name -> protocol.DiscloseProfile
	4,  // 4: protocol.Command.acknowledge_context:type_name -> protocol.AcknowledgeContext
	5,  // 5: protocol.Command.add_members:type_name -> protocol.AddMembers
	6,  // 6: protocol.Command.remove_members:type_name -> protocol.RemoveMembers
	7,  // 7: protocol.Command.promote_admins:type_name -> protocol.PromoteAdmins
	9,  // 8: protocol.InitiateContext.initial_members:type_name -> protocol.IdentityPublicKey
	8,  // 9: protocol.InitiateContext.sender_profile:type_name -> protocol.ProfilePayload
	8,  // 10: protocol.AcknowledgeContext.sender_profile:type_name -> protocol.ProfilePayload
	9,  // 11: protocol.AddMembers.members_to_add:type_name -> protocol.IdentityPublicKey
	9,  // 12: protocol.RemoveMembers.members_to_remove:type_name -> protocol.IdentityPublicKey
	9,  // 13: protocol.PromoteAdmins.members_to_promote:type_name -> protocol.IdentityPublicKey
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_command_proto_init() }
func file_command_proto_init() {
	if File_command_proto != nil {
		return
	}
	file_identity_proto_init()
	file_command_proto_msgTypes[2].OneofWrappers = []any{
		(*Command_InitiateContext)(nil),
		(*Command_DiscloseProfile)(nil),
		(*Command_AcknowledgeContext)(nil),
		(*Command_AddMembers)(nil),
		(*Command_RemoveMembers)(nil),
		(*Command_PromoteAdmins)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_command_proto_rawDesc), len(file_command_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_command_proto_goTypes,
		DependencyIndexes: file_command_proto_depIdxs,
		MessageInfos:      file_command_proto_msgTypes,
	}.Build()
	File_command_proto = out.File
	file_command_proto_goTypes = nil
	file_command_proto_depIdxs = nil
}
