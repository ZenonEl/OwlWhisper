// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: chat.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Envelope_ChatType int32

const (
	Envelope_PRIVATE Envelope_ChatType = 0 // Личное сообщение (1-на-1)
	Envelope_GROUP   Envelope_ChatType = 1 // Групповой чат
)

// Enum value maps for Envelope_ChatType.
var (
	Envelope_ChatType_name = map[int32]string{
		0: "PRIVATE",
		1: "GROUP",
	}
	Envelope_ChatType_value = map[string]int32{
		"PRIVATE": 0,
		"GROUP":   1,
	}
)

func (x Envelope_ChatType) Enum() *Envelope_ChatType {
	p := new(Envelope_ChatType)
	*p = x
	return p
}

func (x Envelope_ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Envelope_ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[0].Descriptor()
}

func (Envelope_ChatType) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[0]
}

func (x Envelope_ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Envelope_ChatType.Descriptor instead.
func (Envelope_ChatType) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0, 0}
}

// Envelope - "конверт" для каждого сообщения, передаваемого по сети.
type Envelope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`              // Уникальный ID конверта (UUID)
	SenderId      string                 `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`                 // PeerID отправителя
	TimestampUnix int64                  `protobuf:"varint,3,opt,name=timestamp_unix,json=timestampUnix,proto3" json:"timestamp_unix,omitempty"` // Время отправки
	ChatType      Envelope_ChatType      `protobuf:"varint,4,opt,name=chat_type,json=chatType,proto3,enum=protocol.Envelope_ChatType" json:"chat_type,omitempty"`
	ChatId        string                 `protobuf:"bytes,5,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"` // ID чата (для групп - ID группы, для личных - PeerID собеседника)
	// Types that are valid to be assigned to Payload:
	//
	//	*Envelope_Content
	//	*Envelope_ReadReceipts
	//	*Envelope_ProfileInfo
	//	*Envelope_ProfileRequest
	//	*Envelope_ProfileResponse
	Payload       isEnvelope_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_chat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Envelope) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *Envelope) GetTimestampUnix() int64 {
	if x != nil {
		return x.TimestampUnix
	}
	return 0
}

func (x *Envelope) GetChatType() Envelope_ChatType {
	if x != nil {
		return x.ChatType
	}
	return Envelope_PRIVATE
}

func (x *Envelope) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *Envelope) GetPayload() isEnvelope_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Envelope) GetContent() *Content {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_Content); ok {
			return x.Content
		}
	}
	return nil
}

func (x *Envelope) GetReadReceipts() *ReadReceipts {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_ReadReceipts); ok {
			return x.ReadReceipts
		}
	}
	return nil
}

func (x *Envelope) GetProfileInfo() *ProfileInfo {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_ProfileInfo); ok {
			return x.ProfileInfo
		}
	}
	return nil
}

func (x *Envelope) GetProfileRequest() *ProfileRequest {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_ProfileRequest); ok {
			return x.ProfileRequest
		}
	}
	return nil
}

func (x *Envelope) GetProfileResponse() *ProfileResponse {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_ProfileResponse); ok {
			return x.ProfileResponse
		}
	}
	return nil
}

type isEnvelope_Payload interface {
	isEnvelope_Payload()
}

type Envelope_Content struct {
	Content *Content `protobuf:"bytes,6,opt,name=content,proto3,oneof"` // Полезная нагрузка (текст, файл)
}

type Envelope_ReadReceipts struct {
	ReadReceipts *ReadReceipts `protobuf:"bytes,7,opt,name=read_receipts,json=readReceipts,proto3,oneof"` // Уведомление о прочтении
}

type Envelope_ProfileInfo struct {
	ProfileInfo *ProfileInfo `protobuf:"bytes,8,opt,name=profile_info,json=profileInfo,proto3,oneof"` // Полная информация о профиле (для "рукопожатия")
}

type Envelope_ProfileRequest struct {
	// ИЗМЕНЕНО: Наш "пинг" и "понг" для запроса профиля
	ProfileRequest *ProfileRequest `protobuf:"bytes,9,opt,name=profile_request,json=profileRequest,proto3,oneof"` // Запрос на получение профиля
}

type Envelope_ProfileResponse struct {
	ProfileResponse *ProfileResponse `protobuf:"bytes,10,opt,name=profile_response,json=profileResponse,proto3,oneof"` // Ответ с профилем
}

func (*Envelope_Content) isEnvelope_Payload() {}

func (*Envelope_ReadReceipts) isEnvelope_Payload() {}

func (*Envelope_ProfileInfo) isEnvelope_Payload() {}

func (*Envelope_ProfileRequest) isEnvelope_Payload() {}

func (*Envelope_ProfileResponse) isEnvelope_Payload() {}

// ... (Content, TextMessage, FileMetadata, ReadReceipts без изменений) ...
type Content struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Content_Text
	//	*Content_File
	Type          isContent_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_chat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *Content) GetType() isContent_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Content) GetText() *TextMessage {
	if x != nil {
		if x, ok := x.Type.(*Content_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *Content) GetFile() *FileMetadata {
	if x != nil {
		if x, ok := x.Type.(*Content_File); ok {
			return x.File
		}
	}
	return nil
}

type isContent_Type interface {
	isContent_Type()
}

type Content_Text struct {
	Text *TextMessage `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Content_File struct {
	File *FileMetadata `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

func (*Content_Text) isContent_Type() {}

func (*Content_File) isContent_Type() {}

type TextMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Body             string                 `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	ReplyToMessageId string                 `protobuf:"bytes,2,opt,name=reply_to_message_id,json=replyToMessageId,proto3" json:"reply_to_message_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TextMessage) Reset() {
	*x = TextMessage{}
	mi := &file_chat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage) ProtoMessage() {}

func (x *TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage.ProtoReflect.Descriptor instead.
func (*TextMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *TextMessage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *TextMessage) GetReplyToMessageId() string {
	if x != nil {
		return x.ReplyToMessageId
	}
	return ""
}

type FileMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	SizeBytes     int64                  `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	MimeType      string                 `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	HashSha256    string                 `protobuf:"bytes,4,opt,name=hash_sha256,json=hashSha256,proto3" json:"hash_sha256,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	mi := &file_chat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *FileMetadata) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileMetadata) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *FileMetadata) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FileMetadata) GetHashSha256() string {
	if x != nil {
		return x.HashSha256
	}
	return ""
}

type ReadReceipts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageIds    []string               `protobuf:"bytes,1,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadReceipts) Reset() {
	*x = ReadReceipts{}
	mi := &file_chat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadReceipts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReceipts) ProtoMessage() {}

func (x *ReadReceipts) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReceipts.ProtoReflect.Descriptor instead.
func (*ReadReceipts) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *ReadReceipts) GetMessageIds() []string {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// ProfileInfo - информация о профиле пользователя для обмена между клиентами.
type ProfileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nickname      string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Discriminator string                 `protobuf:"bytes,2,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
	DisplayName   string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	AvatarHash    string                 `protobuf:"bytes,4,opt,name=avatar_hash,json=avatarHash,proto3" json:"avatar_hash,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileInfo) Reset() {
	*x = ProfileInfo{}
	mi := &file_chat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileInfo) ProtoMessage() {}

func (x *ProfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileInfo.ProtoReflect.Descriptor instead.
func (*ProfileInfo) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *ProfileInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ProfileInfo) GetDiscriminator() string {
	if x != nil {
		return x.Discriminator
	}
	return ""
}

func (x *ProfileInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileInfo) GetAvatarHash() string {
	if x != nil {
		return x.AvatarHash
	}
	return ""
}

func (x *ProfileInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// НОВОЕ: Запрос профиля. Может быть пустым, сам факт получения
// этого сообщения является запросом.
type ProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	mi := &file_chat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

// НОВОЕ: Ответ на запрос профиля.
type ProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Profile       *ProfileInfo           `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"` // Содержит актуальный профиль пользователя
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	mi := &file_chat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{7}
}

func (x *ProfileResponse) GetProfile() *ProfileInfo {
	if x != nil {
		return x.Profile
	}
	return nil
}

var File_chat_proto protoreflect.FileDescriptor

const file_chat_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"chat.proto\x12\bprotocol\"\xa6\x04\n" +
	"\bEnvelope\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12\x1b\n" +
	"\tsender_id\x18\x02 \x01(\tR\bsenderId\x12%\n" +
	"\x0etimestamp_unix\x18\x03 \x01(\x03R\rtimestampUnix\x128\n" +
	"\tchat_type\x18\x04 \x01(\x0e2\x1b.protocol.Envelope.ChatTypeR\bchatType\x12\x17\n" +
	"\achat_id\x18\x05 \x01(\tR\x06chatId\x12-\n" +
	"\acontent\x18\x06 \x01(\v2\x11.protocol.ContentH\x00R\acontent\x12=\n" +
	"\rread_receipts\x18\a \x01(\v2\x16.protocol.ReadReceiptsH\x00R\freadReceipts\x12:\n" +
	"\fprofile_info\x18\b \x01(\v2\x15.protocol.ProfileInfoH\x00R\vprofileInfo\x12C\n" +
	"\x0fprofile_request\x18\t \x01(\v2\x18.protocol.ProfileRequestH\x00R\x0eprofileRequest\x12F\n" +
	"\x10profile_response\x18\n" +
	" \x01(\v2\x19.protocol.ProfileResponseH\x00R\x0fprofileResponse\"\"\n" +
	"\bChatType\x12\v\n" +
	"\aPRIVATE\x10\x00\x12\t\n" +
	"\x05GROUP\x10\x01B\t\n" +
	"\apayload\"l\n" +
	"\aContent\x12+\n" +
	"\x04text\x18\x01 \x01(\v2\x15.protocol.TextMessageH\x00R\x04text\x12,\n" +
	"\x04file\x18\x02 \x01(\v2\x16.protocol.FileMetadataH\x00R\x04fileB\x06\n" +
	"\x04type\"P\n" +
	"\vTextMessage\x12\x12\n" +
	"\x04body\x18\x01 \x01(\tR\x04body\x12-\n" +
	"\x13reply_to_message_id\x18\x02 \x01(\tR\x10replyToMessageId\"\x87\x01\n" +
	"\fFileMetadata\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x02 \x01(\x03R\tsizeBytes\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x12\x1f\n" +
	"\vhash_sha256\x18\x04 \x01(\tR\n" +
	"hashSha256\"/\n" +
	"\fReadReceipts\x12\x1f\n" +
	"\vmessage_ids\x18\x01 \x03(\tR\n" +
	"messageIds\"\x91\x02\n" +
	"\vProfileInfo\x12\x1a\n" +
	"\bnickname\x18\x01 \x01(\tR\bnickname\x12$\n" +
	"\rdiscriminator\x18\x02 \x01(\tR\rdiscriminator\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12\x1f\n" +
	"\vavatar_hash\x18\x04 \x01(\tR\n" +
	"avatarHash\x12?\n" +
	"\bmetadata\x18\x05 \x03(\v2#.protocol.ProfileInfo.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x10\n" +
	"\x0eProfileRequest\"B\n" +
	"\x0fProfileResponse\x12/\n" +
	"\aprofile\x18\x01 \x01(\v2\x15.protocol.ProfileInfoR\aprofileB\x04Z\x02./b\x06proto3"

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData []byte
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)))
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_chat_proto_goTypes = []any{
	(Envelope_ChatType)(0),  // 0: protocol.Envelope.ChatType
	(*Envelope)(nil),        // 1: protocol.Envelope
	(*Content)(nil),         // 2: protocol.Content
	(*TextMessage)(nil),     // 3: protocol.TextMessage
	(*FileMetadata)(nil),    // 4: protocol.FileMetadata
	(*ReadReceipts)(nil),    // 5: protocol.ReadReceipts
	(*ProfileInfo)(nil),     // 6: protocol.ProfileInfo
	(*ProfileRequest)(nil),  // 7: protocol.ProfileRequest
	(*ProfileResponse)(nil), // 8: protocol.ProfileResponse
	nil,                     // 9: protocol.ProfileInfo.MetadataEntry
}
var file_chat_proto_depIdxs = []int32{
	0,  // 0: protocol.Envelope.chat_type:type_name -> protocol.Envelope.ChatType
	2,  // 1: protocol.Envelope.content:type_name -> protocol.Content
	5,  // 2: protocol.Envelope.read_receipts:type_name -> protocol.ReadReceipts
	6,  // 3: protocol.Envelope.profile_info:type_name -> protocol.ProfileInfo
	7,  // 4: protocol.Envelope.profile_request:type_name -> protocol.ProfileRequest
	8,  // 5: protocol.Envelope.profile_response:type_name -> protocol.ProfileResponse
	3,  // 6: protocol.Content.text:type_name -> protocol.TextMessage
	4,  // 7: protocol.Content.file:type_name -> protocol.FileMetadata
	9,  // 8: protocol.ProfileInfo.metadata:type_name -> protocol.ProfileInfo.MetadataEntry
	6,  // 9: protocol.ProfileResponse.profile:type_name -> protocol.ProfileInfo
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	file_chat_proto_msgTypes[0].OneofWrappers = []any{
		(*Envelope_Content)(nil),
		(*Envelope_ReadReceipts)(nil),
		(*Envelope_ProfileInfo)(nil),
		(*Envelope_ProfileRequest)(nil),
		(*Envelope_ProfileResponse)(nil),
	}
	file_chat_proto_msgTypes[1].OneofWrappers = []any{
		(*Content_Text)(nil),
		(*Content_File)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		EnumInfos:         file_chat_proto_enumTypes,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
