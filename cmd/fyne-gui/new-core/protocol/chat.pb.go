// Путь: cmd/fyne-gui/new-core/protocol/chat.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: chat.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageEntity_Type int32

const (
	MessageEntity_MENTION     MessageEntity_Type = 0
	MessageEntity_HASHTAG     MessageEntity_Type = 1
	MessageEntity_BOT_COMMAND MessageEntity_Type = 2
	MessageEntity_URL         MessageEntity_Type = 3
	MessageEntity_EMAIL       MessageEntity_Type = 4
	MessageEntity_BOLD        MessageEntity_Type = 5
	MessageEntity_ITALIC      MessageEntity_Type = 6
	MessageEntity_CODE        MessageEntity_Type = 7
	MessageEntity_PRE         MessageEntity_Type = 8
)

// Enum value maps for MessageEntity_Type.
var (
	MessageEntity_Type_name = map[int32]string{
		0: "MENTION",
		1: "HASHTAG",
		2: "BOT_COMMAND",
		3: "URL",
		4: "EMAIL",
		5: "BOLD",
		6: "ITALIC",
		7: "CODE",
		8: "PRE",
	}
	MessageEntity_Type_value = map[string]int32{
		"MENTION":     0,
		"HASHTAG":     1,
		"BOT_COMMAND": 2,
		"URL":         3,
		"EMAIL":       4,
		"BOLD":        5,
		"ITALIC":      6,
		"CODE":        7,
		"PRE":         8,
	}
)

func (x MessageEntity_Type) Enum() *MessageEntity_Type {
	p := new(MessageEntity_Type)
	*p = x
	return p
}

func (x MessageEntity_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageEntity_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[0].Descriptor()
}

func (MessageEntity_Type) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[0]
}

func (x MessageEntity_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageEntity_Type.Descriptor instead.
func (MessageEntity_Type) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2, 0}
}

// ChatContent - это обертка для всего, что может появиться в ленте чата.
type ChatContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*ChatContent_Text
	//	*ChatContent_File
	//	*ChatContent_Receipts
	//	*ChatContent_Edit
	//	*ChatContent_Delete
	Payload       isChatContent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatContent) Reset() {
	*x = ChatContent{}
	mi := &file_chat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatContent) ProtoMessage() {}

func (x *ChatContent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatContent.ProtoReflect.Descriptor instead.
func (*ChatContent) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *ChatContent) GetPayload() isChatContent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ChatContent) GetText() *TextMessage {
	if x != nil {
		if x, ok := x.Payload.(*ChatContent_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *ChatContent) GetFile() *FileMetadata {
	if x != nil {
		if x, ok := x.Payload.(*ChatContent_File); ok {
			return x.File
		}
	}
	return nil
}

func (x *ChatContent) GetReceipts() *ReadReceipts {
	if x != nil {
		if x, ok := x.Payload.(*ChatContent_Receipts); ok {
			return x.Receipts
		}
	}
	return nil
}

func (x *ChatContent) GetEdit() *MessageEdit {
	if x != nil {
		if x, ok := x.Payload.(*ChatContent_Edit); ok {
			return x.Edit
		}
	}
	return nil
}

func (x *ChatContent) GetDelete() *MessageDelete {
	if x != nil {
		if x, ok := x.Payload.(*ChatContent_Delete); ok {
			return x.Delete
		}
	}
	return nil
}

type isChatContent_Payload interface {
	isChatContent_Payload()
}

type ChatContent_Text struct {
	Text *TextMessage `protobuf:"bytes,1,opt,name=text,proto3,oneof"` // Обычное текстовое сообщение
}

type ChatContent_File struct {
	File *FileMetadata `protobuf:"bytes,2,opt,name=file,proto3,oneof"` // Анонс файла для скачивания
}

type ChatContent_Receipts struct {
	Receipts *ReadReceipts `protobuf:"bytes,3,opt,name=receipts,proto3,oneof"` // Уведомления о прочтении
}

type ChatContent_Edit struct {
	Edit *MessageEdit `protobuf:"bytes,4,opt,name=edit,proto3,oneof"` // Редактирование предыдущего сообщения
}

type ChatContent_Delete struct {
	Delete *MessageDelete `protobuf:"bytes,5,opt,name=delete,proto3,oneof"` // Удаление предыдущего сообщения
}

func (*ChatContent_Text) isChatContent_Payload() {}

func (*ChatContent_File) isChatContent_Payload() {}

func (*ChatContent_Receipts) isChatContent_Payload() {}

func (*ChatContent_Edit) isChatContent_Payload() {}

func (*ChatContent_Delete) isChatContent_Payload() {}

// TextMessage представляет собой простое текстовое сообщение.
type TextMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Body             string                 `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`                                                     // Текст сообщения
	ReplyToMessageId string                 `protobuf:"bytes,2,opt,name=reply_to_message_id,json=replyToMessageId,proto3" json:"reply_to_message_id,omitempty"` // ID сообщения, на которое отвечаем (опционально)
	Entities         []*MessageEntity       `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`                                             // Для форматирования (жирный, курсив, ссылки)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TextMessage) Reset() {
	*x = TextMessage{}
	mi := &file_chat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage) ProtoMessage() {}

func (x *TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage.ProtoReflect.Descriptor instead.
func (*TextMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *TextMessage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *TextMessage) GetReplyToMessageId() string {
	if x != nil {
		return x.ReplyToMessageId
	}
	return ""
}

func (x *TextMessage) GetEntities() []*MessageEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

// MessageEntity описывает форматирование части текста.
// (Аналогично API Telegram)
type MessageEntity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          MessageEntity_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=protocol.MessageEntity_Type" json:"type,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // Смещение в UTF-16 кодовых единицах
	Length        int32                  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"` // Длина форматированного участка
	Url           string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`        // Для ссылок
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageEntity) Reset() {
	*x = MessageEntity{}
	mi := &file_chat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEntity) ProtoMessage() {}

func (x *MessageEntity) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEntity.ProtoReflect.Descriptor instead.
func (*MessageEntity) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *MessageEntity) GetType() MessageEntity_Type {
	if x != nil {
		return x.Type
	}
	return MessageEntity_MENTION
}

func (x *MessageEntity) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *MessageEntity) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *MessageEntity) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// ReadReceipts - уведомление о прочтении одного или нескольких сообщений.
type ReadReceipts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageIds    []string               `protobuf:"bytes,1,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadReceipts) Reset() {
	*x = ReadReceipts{}
	mi := &file_chat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadReceipts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReceipts) ProtoMessage() {}

func (x *ReadReceipts) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReceipts.ProtoReflect.Descriptor instead.
func (*ReadReceipts) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *ReadReceipts) GetMessageIds() []string {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// MessageEdit - команда на редактирование сообщения.
type MessageEdit struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TargetMessageId string                 `protobuf:"bytes,1,opt,name=target_message_id,json=targetMessageId,proto3" json:"target_message_id,omitempty"` // Какое сообщение редактируем
	NewContent      *TextMessage           `protobuf:"bytes,2,opt,name=new_content,json=newContent,proto3" json:"new_content,omitempty"`                  // Новое содержимое
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MessageEdit) Reset() {
	*x = MessageEdit{}
	mi := &file_chat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEdit) ProtoMessage() {}

func (x *MessageEdit) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEdit.ProtoReflect.Descriptor instead.
func (*MessageEdit) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *MessageEdit) GetTargetMessageId() string {
	if x != nil {
		return x.TargetMessageId
	}
	return ""
}

func (x *MessageEdit) GetNewContent() *TextMessage {
	if x != nil {
		return x.NewContent
	}
	return nil
}

// MessageDelete - команда на удаление сообщения.
type MessageDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageIds    []string               `protobuf:"bytes,1,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageDelete) Reset() {
	*x = MessageDelete{}
	mi := &file_chat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDelete) ProtoMessage() {}

func (x *MessageDelete) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDelete.ProtoReflect.Descriptor instead.
func (*MessageDelete) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *MessageDelete) GetMessageIds() []string {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// FileMetadata - "Анонс" файла.
// Это сообщение появляется в чате, чтобы показать плашку с файлом.
type FileMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransferId    string                 `protobuf:"bytes,1,opt,name=transfer_id,json=transferId,proto3" json:"transfer_id,omitempty"` // Уникальный ID для этой передачи (генерируется GUI, UUID)
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`                       // Оригинальное имя файла
	SizeBytes     int64                  `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`   // Полный размер файла в байтах
	HashSha256    string                 `protobuf:"bytes,4,opt,name=hash_sha256,json=hashSha256,proto3" json:"hash_sha256,omitempty"` // Хеш всего файла для проверки целостности
	MimeType      string                 `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`       // MIME-тип файла (например, "image/jpeg")
	Seeders       []string               `protobuf:"bytes,6,rep,name=seeders,proto3" json:"seeders,omitempty"`                         // Список PeerID тех, кто имеет полную копию
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	mi := &file_chat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

func (x *FileMetadata) GetTransferId() string {
	if x != nil {
		return x.TransferId
	}
	return ""
}

func (x *FileMetadata) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileMetadata) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *FileMetadata) GetHashSha256() string {
	if x != nil {
		return x.HashSha256
	}
	return ""
}

func (x *FileMetadata) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FileMetadata) GetSeeders() []string {
	if x != nil {
		return x.Seeders
	}
	return nil
}

var File_chat_proto protoreflect.FileDescriptor

const file_chat_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"chat.proto\x12\bprotocol\"\x89\x02\n" +
	"\vChatContent\x12+\n" +
	"\x04text\x18\x01 \x01(\v2\x15.protocol.TextMessageH\x00R\x04text\x12,\n" +
	"\x04file\x18\x02 \x01(\v2\x16.protocol.FileMetadataH\x00R\x04file\x124\n" +
	"\breceipts\x18\x03 \x01(\v2\x16.protocol.ReadReceiptsH\x00R\breceipts\x12+\n" +
	"\x04edit\x18\x04 \x01(\v2\x15.protocol.MessageEditH\x00R\x04edit\x121\n" +
	"\x06delete\x18\x05 \x01(\v2\x17.protocol.MessageDeleteH\x00R\x06deleteB\t\n" +
	"\apayload\"\x85\x01\n" +
	"\vTextMessage\x12\x12\n" +
	"\x04body\x18\x01 \x01(\tR\x04body\x12-\n" +
	"\x13reply_to_message_id\x18\x02 \x01(\tR\x10replyToMessageId\x123\n" +
	"\bentities\x18\x03 \x03(\v2\x17.protocol.MessageEntityR\bentities\"\xf3\x01\n" +
	"\rMessageEntity\x120\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1c.protocol.MessageEntity.TypeR\x04type\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\x12\x16\n" +
	"\x06length\x18\x03 \x01(\x05R\x06length\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\"n\n" +
	"\x04Type\x12\v\n" +
	"\aMENTION\x10\x00\x12\v\n" +
	"\aHASHTAG\x10\x01\x12\x0f\n" +
	"\vBOT_COMMAND\x10\x02\x12\a\n" +
	"\x03URL\x10\x03\x12\t\n" +
	"\x05EMAIL\x10\x04\x12\b\n" +
	"\x04BOLD\x10\x05\x12\n" +
	"\n" +
	"\x06ITALIC\x10\x06\x12\b\n" +
	"\x04CODE\x10\a\x12\a\n" +
	"\x03PRE\x10\b\"/\n" +
	"\fReadReceipts\x12\x1f\n" +
	"\vmessage_ids\x18\x01 \x03(\tR\n" +
	"messageIds\"q\n" +
	"\vMessageEdit\x12*\n" +
	"\x11target_message_id\x18\x01 \x01(\tR\x0ftargetMessageId\x126\n" +
	"\vnew_content\x18\x02 \x01(\v2\x15.protocol.TextMessageR\n" +
	"newContent\"0\n" +
	"\rMessageDelete\x12\x1f\n" +
	"\vmessage_ids\x18\x01 \x03(\tR\n" +
	"messageIds\"\xc2\x01\n" +
	"\fFileMetadata\x12\x1f\n" +
	"\vtransfer_id\x18\x01 \x01(\tR\n" +
	"transferId\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x03 \x01(\x03R\tsizeBytes\x12\x1f\n" +
	"\vhash_sha256\x18\x04 \x01(\tR\n" +
	"hashSha256\x12\x1b\n" +
	"\tmime_type\x18\x05 \x01(\tR\bmimeType\x12\x18\n" +
	"\aseeders\x18\x06 \x03(\tR\aseedersB\x04Z\x02./b\x06proto3"

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData []byte
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)))
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_chat_proto_goTypes = []any{
	(MessageEntity_Type)(0), // 0: protocol.MessageEntity.Type
	(*ChatContent)(nil),     // 1: protocol.ChatContent
	(*TextMessage)(nil),     // 2: protocol.TextMessage
	(*MessageEntity)(nil),   // 3: protocol.MessageEntity
	(*ReadReceipts)(nil),    // 4: protocol.ReadReceipts
	(*MessageEdit)(nil),     // 5: protocol.MessageEdit
	(*MessageDelete)(nil),   // 6: protocol.MessageDelete
	(*FileMetadata)(nil),    // 7: protocol.FileMetadata
}
var file_chat_proto_depIdxs = []int32{
	2, // 0: protocol.ChatContent.text:type_name -> protocol.TextMessage
	7, // 1: protocol.ChatContent.file:type_name -> protocol.FileMetadata
	4, // 2: protocol.ChatContent.receipts:type_name -> protocol.ReadReceipts
	5, // 3: protocol.ChatContent.edit:type_name -> protocol.MessageEdit
	6, // 4: protocol.ChatContent.delete:type_name -> protocol.MessageDelete
	3, // 5: protocol.TextMessage.entities:type_name -> protocol.MessageEntity
	0, // 6: protocol.MessageEntity.type:type_name -> protocol.MessageEntity.Type
	2, // 7: protocol.MessageEdit.new_content:type_name -> protocol.TextMessage
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	file_chat_proto_msgTypes[0].OneofWrappers = []any{
		(*ChatContent_Text)(nil),
		(*ChatContent_File)(nil),
		(*ChatContent_Receipts)(nil),
		(*ChatContent_Edit)(nil),
		(*ChatContent_Delete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		EnumInfos:         file_chat_proto_enumTypes,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
