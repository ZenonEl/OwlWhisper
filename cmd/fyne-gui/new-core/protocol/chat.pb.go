// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: chat.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatMessage_ChatType int32

const (
	ChatMessage_PRIVATE ChatMessage_ChatType = 0 // Личное сообщение (1-на-1)
	ChatMessage_GROUP   ChatMessage_ChatType = 1 // Групповой чат
)

// Enum value maps for ChatMessage_ChatType.
var (
	ChatMessage_ChatType_name = map[int32]string{
		0: "PRIVATE",
		1: "GROUP",
	}
	ChatMessage_ChatType_value = map[string]int32{
		"PRIVATE": 0,
		"GROUP":   1,
	}
)

func (x ChatMessage_ChatType) Enum() *ChatMessage_ChatType {
	p := new(ChatMessage_ChatType)
	*p = x
	return p
}

func (x ChatMessage_ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMessage_ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_proto_enumTypes[0].Descriptor()
}

func (ChatMessage_ChatType) Type() protoreflect.EnumType {
	return &file_chat_proto_enumTypes[0]
}

func (x ChatMessage_ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMessage_ChatType.Descriptor instead.
func (ChatMessage_ChatType) EnumDescriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1, 0}
}

// Envelope - это "конверт", в который заворачивается каждое
// сообщение, передаваемое по сети.
type Envelope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageId     string                 `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`              // Уникальный ID конверта (UUID)
	SenderId      string                 `protobuf:"bytes,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`                 // PeerID отправителя
	TimestampUnix int64                  `protobuf:"varint,3,opt,name=timestamp_unix,json=timestampUnix,proto3" json:"timestamp_unix,omitempty"` // Время отправки
	// Содержимое сообщения. oneof гарантирует, что внутри будет
	// что-то одно. Мы разделили сообщения на две категории:
	// для чатов (прямых и групповых) и для управления контактами.
	//
	// Types that are valid to be assigned to Payload:
	//
	//	*Envelope_ChatMessage
	//	*Envelope_ContactMessage
	//	*Envelope_SignalingMessage
	Payload       isEnvelope_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	mi := &file_chat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Envelope) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *Envelope) GetTimestampUnix() int64 {
	if x != nil {
		return x.TimestampUnix
	}
	return 0
}

func (x *Envelope) GetPayload() isEnvelope_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Envelope) GetChatMessage() *ChatMessage {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_ChatMessage); ok {
			return x.ChatMessage
		}
	}
	return nil
}

func (x *Envelope) GetContactMessage() *ContactMessage {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_ContactMessage); ok {
			return x.ContactMessage
		}
	}
	return nil
}

func (x *Envelope) GetSignalingMessage() *SignalingMessage {
	if x != nil {
		if x, ok := x.Payload.(*Envelope_SignalingMessage); ok {
			return x.SignalingMessage
		}
	}
	return nil
}

type isEnvelope_Payload interface {
	isEnvelope_Payload()
}

type Envelope_ChatMessage struct {
	ChatMessage *ChatMessage `protobuf:"bytes,4,opt,name=chat_message,json=chatMessage,proto3,oneof"` // Сообщение, относящееся к чату
}

type Envelope_ContactMessage struct {
	ContactMessage *ContactMessage `protobuf:"bytes,5,opt,name=contact_message,json=contactMessage,proto3,oneof"` // Сообщение для управления контактами
}

type Envelope_SignalingMessage struct {
	SignalingMessage *SignalingMessage `protobuf:"bytes,6,opt,name=signaling_message,json=signalingMessage,proto3,oneof"` // Сообщение для WebRTC
}

func (*Envelope_ChatMessage) isEnvelope_Payload() {}

func (*Envelope_ContactMessage) isEnvelope_Payload() {}

func (*Envelope_SignalingMessage) isEnvelope_Payload() {}

type ChatMessage struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	ChatType ChatMessage_ChatType   `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3,enum=protocol.ChatMessage_ChatType" json:"chat_type,omitempty"`
	ChatId   string                 `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"` // ID чата (для групп - ID группы, для личных - PeerID собеседника)
	// Types that are valid to be assigned to Content:
	//
	//	*ChatMessage_Text
	//	*ChatMessage_FileAnnouncement
	//	*ChatMessage_FileRequest
	//	*ChatMessage_FileStatus
	//	*ChatMessage_ReadReceipts
	Content       isChatMessage_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_chat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *ChatMessage) GetChatType() ChatMessage_ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatMessage_PRIVATE
}

func (x *ChatMessage) GetChatId() string {
	if x != nil {
		return x.ChatId
	}
	return ""
}

func (x *ChatMessage) GetContent() isChatMessage_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ChatMessage) GetText() *TextMessage {
	if x != nil {
		if x, ok := x.Content.(*ChatMessage_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *ChatMessage) GetFileAnnouncement() *FileMetadata {
	if x != nil {
		if x, ok := x.Content.(*ChatMessage_FileAnnouncement); ok {
			return x.FileAnnouncement
		}
	}
	return nil
}

func (x *ChatMessage) GetFileRequest() *FileDownloadRequest {
	if x != nil {
		if x, ok := x.Content.(*ChatMessage_FileRequest); ok {
			return x.FileRequest
		}
	}
	return nil
}

func (x *ChatMessage) GetFileStatus() *FileTransferStatus {
	if x != nil {
		if x, ok := x.Content.(*ChatMessage_FileStatus); ok {
			return x.FileStatus
		}
	}
	return nil
}

func (x *ChatMessage) GetReadReceipts() *ReadReceipts {
	if x != nil {
		if x, ok := x.Content.(*ChatMessage_ReadReceipts); ok {
			return x.ReadReceipts
		}
	}
	return nil
}

type isChatMessage_Content interface {
	isChatMessage_Content()
}

type ChatMessage_Text struct {
	Text *TextMessage `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type ChatMessage_FileAnnouncement struct {
	FileAnnouncement *FileMetadata `protobuf:"bytes,4,opt,name=file_announcement,json=fileAnnouncement,proto3,oneof"` // Анонс файла
}

type ChatMessage_FileRequest struct {
	FileRequest *FileDownloadRequest `protobuf:"bytes,6,opt,name=file_request,json=fileRequest,proto3,oneof"` // Запрос на скачивание
}

type ChatMessage_FileStatus struct {
	FileStatus *FileTransferStatus `protobuf:"bytes,7,opt,name=file_status,json=fileStatus,proto3,oneof"` // Статус передачи
}

type ChatMessage_ReadReceipts struct {
	ReadReceipts *ReadReceipts `protobuf:"bytes,5,opt,name=read_receipts,json=readReceipts,proto3,oneof"`
}

func (*ChatMessage_Text) isChatMessage_Content() {}

func (*ChatMessage_FileAnnouncement) isChatMessage_Content() {}

func (*ChatMessage_FileRequest) isChatMessage_Content() {}

func (*ChatMessage_FileStatus) isChatMessage_Content() {}

func (*ChatMessage_ReadReceipts) isChatMessage_Content() {}

type TextMessage struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Body             string                 `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	ReplyToMessageId string                 `protobuf:"bytes,2,opt,name=reply_to_message_id,json=replyToMessageId,proto3" json:"reply_to_message_id,omitempty"` // ID сообщения, на которое отвечаем
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TextMessage) Reset() {
	*x = TextMessage{}
	mi := &file_chat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage) ProtoMessage() {}

func (x *TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage.ProtoReflect.Descriptor instead.
func (*TextMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *TextMessage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *TextMessage) GetReplyToMessageId() string {
	if x != nil {
		return x.ReplyToMessageId
	}
	return ""
}

type ReadReceipts struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MessageIds    []string               `protobuf:"bytes,1,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"` // ID прочитанных сообщений
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadReceipts) Reset() {
	*x = ReadReceipts{}
	mi := &file_chat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadReceipts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReceipts) ProtoMessage() {}

func (x *ReadReceipts) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReceipts.ProtoReflect.Descriptor instead.
func (*ReadReceipts) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *ReadReceipts) GetMessageIds() []string {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

// ContactMessage - это обертка для всех сообщений, связанных
// с добавлением, верификацией и управлением контактами.
type ContactMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*ContactMessage_ProfileRequest
	//	*ContactMessage_ProfileResponse
	//	*ContactMessage_ContactRequest
	//	*ContactMessage_ContactAccept
	Type          isContactMessage_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContactMessage) Reset() {
	*x = ContactMessage{}
	mi := &file_chat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactMessage) ProtoMessage() {}

func (x *ContactMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactMessage.ProtoReflect.Descriptor instead.
func (*ContactMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *ContactMessage) GetType() isContactMessage_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ContactMessage) GetProfileRequest() *ProfileRequest {
	if x != nil {
		if x, ok := x.Type.(*ContactMessage_ProfileRequest); ok {
			return x.ProfileRequest
		}
	}
	return nil
}

func (x *ContactMessage) GetProfileResponse() *ProfileResponse {
	if x != nil {
		if x, ok := x.Type.(*ContactMessage_ProfileResponse); ok {
			return x.ProfileResponse
		}
	}
	return nil
}

func (x *ContactMessage) GetContactRequest() *ContactRequest {
	if x != nil {
		if x, ok := x.Type.(*ContactMessage_ContactRequest); ok {
			return x.ContactRequest
		}
	}
	return nil
}

func (x *ContactMessage) GetContactAccept() *ContactAccept {
	if x != nil {
		if x, ok := x.Type.(*ContactMessage_ContactAccept); ok {
			return x.ContactAccept
		}
	}
	return nil
}

type isContactMessage_Type interface {
	isContactMessage_Type()
}

type ContactMessage_ProfileRequest struct {
	ProfileRequest *ProfileRequest `protobuf:"bytes,1,opt,name=profile_request,json=profileRequest,proto3,oneof"` // "Пинг" - запрос профиля
}

type ContactMessage_ProfileResponse struct {
	ProfileResponse *ProfileResponse `protobuf:"bytes,2,opt,name=profile_response,json=profileResponse,proto3,oneof"` // "Понг" - ответ с профилем
}

type ContactMessage_ContactRequest struct {
	ContactRequest *ContactRequest `protobuf:"bytes,3,opt,name=contact_request,json=contactRequest,proto3,oneof"` // Запрос на добавление в контакты
}

type ContactMessage_ContactAccept struct {
	ContactAccept *ContactAccept `protobuf:"bytes,4,opt,name=contact_accept,json=contactAccept,proto3,oneof"` // Подтверждение добавления
}

func (*ContactMessage_ProfileRequest) isContactMessage_Type() {}

func (*ContactMessage_ProfileResponse) isContactMessage_Type() {}

func (*ContactMessage_ContactRequest) isContactMessage_Type() {}

func (*ContactMessage_ContactAccept) isContactMessage_Type() {}

// ProfileInfo - публичная часть профиля пользователя.
type ProfileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nickname      string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Discriminator string                 `protobuf:"bytes,2,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
	DisplayName   string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	AvatarHash    string                 `protobuf:"bytes,4,opt,name=avatar_hash,json=avatarHash,proto3" json:"avatar_hash,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Доп. информация (версия клиента и т.д.)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileInfo) Reset() {
	*x = ProfileInfo{}
	mi := &file_chat_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileInfo) ProtoMessage() {}

func (x *ProfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileInfo.ProtoReflect.Descriptor instead.
func (*ProfileInfo) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *ProfileInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ProfileInfo) GetDiscriminator() string {
	if x != nil {
		return x.Discriminator
	}
	return ""
}

func (x *ProfileInfo) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ProfileInfo) GetAvatarHash() string {
	if x != nil {
		return x.AvatarHash
	}
	return ""
}

func (x *ProfileInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// "Пинг": запрос на получение профиля.
type ProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	mi := &file_chat_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

// "Понг": ответ с профилем.
type ProfileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Profile       *ProfileInfo           `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileResponse) Reset() {
	*x = ProfileResponse{}
	mi := &file_chat_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResponse) ProtoMessage() {}

func (x *ProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResponse.ProtoReflect.Descriptor instead.
func (*ProfileResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{7}
}

func (x *ProfileResponse) GetProfile() *ProfileInfo {
	if x != nil {
		return x.Profile
	}
	return nil
}

// НОВОЕ: Запрос на добавление в контакты.
// Содержит профиль отправителя, чтобы получатель знал, кого добавляет.
type ContactRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderProfile *ProfileInfo           `protobuf:"bytes,1,opt,name=sender_profile,json=senderProfile,proto3" json:"sender_profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContactRequest) Reset() {
	*x = ContactRequest{}
	mi := &file_chat_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactRequest) ProtoMessage() {}

func (x *ContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactRequest.ProtoReflect.Descriptor instead.
func (*ContactRequest) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{8}
}

func (x *ContactRequest) GetSenderProfile() *ProfileInfo {
	if x != nil {
		return x.SenderProfile
	}
	return nil
}

// НОВОЕ: Подтверждение запроса на добавление.
// Также содержит профиль для финальной синхронизации.
type ContactAccept struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderProfile *ProfileInfo           `protobuf:"bytes,1,opt,name=sender_profile,json=senderProfile,proto3" json:"sender_profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContactAccept) Reset() {
	*x = ContactAccept{}
	mi := &file_chat_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContactAccept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactAccept) ProtoMessage() {}

func (x *ContactAccept) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactAccept.ProtoReflect.Descriptor instead.
func (*ContactAccept) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{9}
}

func (x *ContactAccept) GetSenderProfile() *ProfileInfo {
	if x != nil {
		return x.SenderProfile
	}
	return nil
}

var File_chat_proto protoreflect.FileDescriptor

const file_chat_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"chat.proto\x12\bprotocol\x1a\x13file_transfer.proto\x1a\x0fsignaling.proto\"\xc4\x02\n" +
	"\bEnvelope\x12\x1d\n" +
	"\n" +
	"message_id\x18\x01 \x01(\tR\tmessageId\x12\x1b\n" +
	"\tsender_id\x18\x02 \x01(\tR\bsenderId\x12%\n" +
	"\x0etimestamp_unix\x18\x03 \x01(\x03R\rtimestampUnix\x12:\n" +
	"\fchat_message\x18\x04 \x01(\v2\x15.protocol.ChatMessageH\x00R\vchatMessage\x12C\n" +
	"\x0fcontact_message\x18\x05 \x01(\v2\x18.protocol.ContactMessageH\x00R\x0econtactMessage\x12I\n" +
	"\x11signaling_message\x18\x06 \x01(\v2\x1a.protocol.SignalingMessageH\x00R\x10signalingMessageB\t\n" +
	"\apayload\"\xca\x03\n" +
	"\vChatMessage\x12;\n" +
	"\tchat_type\x18\x01 \x01(\x0e2\x1e.protocol.ChatMessage.ChatTypeR\bchatType\x12\x17\n" +
	"\achat_id\x18\x02 \x01(\tR\x06chatId\x12+\n" +
	"\x04text\x18\x03 \x01(\v2\x15.protocol.TextMessageH\x00R\x04text\x12E\n" +
	"\x11file_announcement\x18\x04 \x01(\v2\x16.protocol.FileMetadataH\x00R\x10fileAnnouncement\x12B\n" +
	"\ffile_request\x18\x06 \x01(\v2\x1d.protocol.FileDownloadRequestH\x00R\vfileRequest\x12?\n" +
	"\vfile_status\x18\a \x01(\v2\x1c.protocol.FileTransferStatusH\x00R\n" +
	"fileStatus\x12=\n" +
	"\rread_receipts\x18\x05 \x01(\v2\x16.protocol.ReadReceiptsH\x00R\freadReceipts\"\"\n" +
	"\bChatType\x12\v\n" +
	"\aPRIVATE\x10\x00\x12\t\n" +
	"\x05GROUP\x10\x01B\t\n" +
	"\acontent\"P\n" +
	"\vTextMessage\x12\x12\n" +
	"\x04body\x18\x01 \x01(\tR\x04body\x12-\n" +
	"\x13reply_to_message_id\x18\x02 \x01(\tR\x10replyToMessageId\"/\n" +
	"\fReadReceipts\x12\x1f\n" +
	"\vmessage_ids\x18\x01 \x03(\tR\n" +
	"messageIds\"\xac\x02\n" +
	"\x0eContactMessage\x12C\n" +
	"\x0fprofile_request\x18\x01 \x01(\v2\x18.protocol.ProfileRequestH\x00R\x0eprofileRequest\x12F\n" +
	"\x10profile_response\x18\x02 \x01(\v2\x19.protocol.ProfileResponseH\x00R\x0fprofileResponse\x12C\n" +
	"\x0fcontact_request\x18\x03 \x01(\v2\x18.protocol.ContactRequestH\x00R\x0econtactRequest\x12@\n" +
	"\x0econtact_accept\x18\x04 \x01(\v2\x17.protocol.ContactAcceptH\x00R\rcontactAcceptB\x06\n" +
	"\x04type\"\x91\x02\n" +
	"\vProfileInfo\x12\x1a\n" +
	"\bnickname\x18\x01 \x01(\tR\bnickname\x12$\n" +
	"\rdiscriminator\x18\x02 \x01(\tR\rdiscriminator\x12!\n" +
	"\fdisplay_name\x18\x03 \x01(\tR\vdisplayName\x12\x1f\n" +
	"\vavatar_hash\x18\x04 \x01(\tR\n" +
	"avatarHash\x12?\n" +
	"\bmetadata\x18\x05 \x03(\v2#.protocol.ProfileInfo.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x10\n" +
	"\x0eProfileRequest\"B\n" +
	"\x0fProfileResponse\x12/\n" +
	"\aprofile\x18\x01 \x01(\v2\x15.protocol.ProfileInfoR\aprofile\"N\n" +
	"\x0eContactRequest\x12<\n" +
	"\x0esender_profile\x18\x01 \x01(\v2\x15.protocol.ProfileInfoR\rsenderProfile\"M\n" +
	"\rContactAccept\x12<\n" +
	"\x0esender_profile\x18\x01 \x01(\v2\x15.protocol.ProfileInfoR\rsenderProfileB\x04Z\x02./b\x06proto3"

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData []byte
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)))
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_chat_proto_goTypes = []any{
	(ChatMessage_ChatType)(0),   // 0: protocol.ChatMessage.ChatType
	(*Envelope)(nil),            // 1: protocol.Envelope
	(*ChatMessage)(nil),         // 2: protocol.ChatMessage
	(*TextMessage)(nil),         // 3: protocol.TextMessage
	(*ReadReceipts)(nil),        // 4: protocol.ReadReceipts
	(*ContactMessage)(nil),      // 5: protocol.ContactMessage
	(*ProfileInfo)(nil),         // 6: protocol.ProfileInfo
	(*ProfileRequest)(nil),      // 7: protocol.ProfileRequest
	(*ProfileResponse)(nil),     // 8: protocol.ProfileResponse
	(*ContactRequest)(nil),      // 9: protocol.ContactRequest
	(*ContactAccept)(nil),       // 10: protocol.ContactAccept
	nil,                         // 11: protocol.ProfileInfo.MetadataEntry
	(*SignalingMessage)(nil),    // 12: protocol.SignalingMessage
	(*FileMetadata)(nil),        // 13: protocol.FileMetadata
	(*FileDownloadRequest)(nil), // 14: protocol.FileDownloadRequest
	(*FileTransferStatus)(nil),  // 15: protocol.FileTransferStatus
}
var file_chat_proto_depIdxs = []int32{
	2,  // 0: protocol.Envelope.chat_message:type_name -> protocol.ChatMessage
	5,  // 1: protocol.Envelope.contact_message:type_name -> protocol.ContactMessage
	12, // 2: protocol.Envelope.signaling_message:type_name -> protocol.SignalingMessage
	0,  // 3: protocol.ChatMessage.chat_type:type_name -> protocol.ChatMessage.ChatType
	3,  // 4: protocol.ChatMessage.text:type_name -> protocol.TextMessage
	13, // 5: protocol.ChatMessage.file_announcement:type_name -> protocol.FileMetadata
	14, // 6: protocol.ChatMessage.file_request:type_name -> protocol.FileDownloadRequest
	15, // 7: protocol.ChatMessage.file_status:type_name -> protocol.FileTransferStatus
	4,  // 8: protocol.ChatMessage.read_receipts:type_name -> protocol.ReadReceipts
	7,  // 9: protocol.ContactMessage.profile_request:type_name -> protocol.ProfileRequest
	8,  // 10: protocol.ContactMessage.profile_response:type_name -> protocol.ProfileResponse
	9,  // 11: protocol.ContactMessage.contact_request:type_name -> protocol.ContactRequest
	10, // 12: protocol.ContactMessage.contact_accept:type_name -> protocol.ContactAccept
	11, // 13: protocol.ProfileInfo.metadata:type_name -> protocol.ProfileInfo.MetadataEntry
	6,  // 14: protocol.ProfileResponse.profile:type_name -> protocol.ProfileInfo
	6,  // 15: protocol.ContactRequest.sender_profile:type_name -> protocol.ProfileInfo
	6,  // 16: protocol.ContactAccept.sender_profile:type_name -> protocol.ProfileInfo
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	file_file_transfer_proto_init()
	file_signaling_proto_init()
	file_chat_proto_msgTypes[0].OneofWrappers = []any{
		(*Envelope_ChatMessage)(nil),
		(*Envelope_ContactMessage)(nil),
		(*Envelope_SignalingMessage)(nil),
	}
	file_chat_proto_msgTypes[1].OneofWrappers = []any{
		(*ChatMessage_Text)(nil),
		(*ChatMessage_FileAnnouncement)(nil),
		(*ChatMessage_FileRequest)(nil),
		(*ChatMessage_FileStatus)(nil),
		(*ChatMessage_ReadReceipts)(nil),
	}
	file_chat_proto_msgTypes[4].OneofWrappers = []any{
		(*ContactMessage_ProfileRequest)(nil),
		(*ContactMessage_ProfileResponse)(nil),
		(*ContactMessage_ContactRequest)(nil),
		(*ContactMessage_ContactAccept)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		EnumInfos:         file_chat_proto_enumTypes,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
