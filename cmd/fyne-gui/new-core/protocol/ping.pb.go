// Путь: internal/protocol/ping.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: ping.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PingEnvelope - это обертка для простых, неподписанных и нешифрованных
// сообщений, используемых для обнаружения и запроса информации.
type PingEnvelope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*PingEnvelope_ProfileRequest
	Payload       isPingEnvelope_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingEnvelope) Reset() {
	*x = PingEnvelope{}
	mi := &file_ping_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingEnvelope) ProtoMessage() {}

func (x *PingEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_ping_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingEnvelope.ProtoReflect.Descriptor instead.
func (*PingEnvelope) Descriptor() ([]byte, []int) {
	return file_ping_proto_rawDescGZIP(), []int{0}
}

func (x *PingEnvelope) GetPayload() isPingEnvelope_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PingEnvelope) GetProfileRequest() *ProfileRequest {
	if x != nil {
		if x, ok := x.Payload.(*PingEnvelope_ProfileRequest); ok {
			return x.ProfileRequest
		}
	}
	return nil
}

type isPingEnvelope_Payload interface {
	isPingEnvelope_Payload()
}

type PingEnvelope_ProfileRequest struct {
	ProfileRequest *ProfileRequest `protobuf:"bytes,1,opt,name=profile_request,json=profileRequest,proto3,oneof"` // В будущем здесь могут быть другие типы "пингов"
}

func (*PingEnvelope_ProfileRequest) isPingEnvelope_Payload() {}

// ProfileRequest - это "пинг" с просьбой прислать в ответ
// подписанную команду DiscloseProfile.
type ProfileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Нам нужно передать информацию об отправителе, чтобы получатель
	// знал, кому отвечать и мог проверить его в будущем.
	SenderIdentity *IdentityPublicKey `protobuf:"bytes,1,opt,name=sender_identity,json=senderIdentity,proto3" json:"sender_identity,omitempty"`
	SenderPeerId   string             `protobuf:"bytes,2,opt,name=sender_peer_id,json=senderPeerId,proto3" json:"sender_peer_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	mi := &file_ping_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ping_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_ping_proto_rawDescGZIP(), []int{1}
}

func (x *ProfileRequest) GetSenderIdentity() *IdentityPublicKey {
	if x != nil {
		return x.SenderIdentity
	}
	return nil
}

func (x *ProfileRequest) GetSenderPeerId() string {
	if x != nil {
		return x.SenderPeerId
	}
	return ""
}

var File_ping_proto protoreflect.FileDescriptor

const file_ping_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"ping.proto\x12\bprotocol\x1a\x0eidentity.proto\"^\n" +
	"\fPingEnvelope\x12C\n" +
	"\x0fprofile_request\x18\x01 \x01(\v2\x18.protocol.ProfileRequestH\x00R\x0eprofileRequestB\t\n" +
	"\apayload\"|\n" +
	"\x0eProfileRequest\x12D\n" +
	"\x0fsender_identity\x18\x01 \x01(\v2\x1b.protocol.IdentityPublicKeyR\x0esenderIdentity\x12$\n" +
	"\x0esender_peer_id\x18\x02 \x01(\tR\fsenderPeerIdB\x04Z\x02./b\x06proto3"

var (
	file_ping_proto_rawDescOnce sync.Once
	file_ping_proto_rawDescData []byte
)

func file_ping_proto_rawDescGZIP() []byte {
	file_ping_proto_rawDescOnce.Do(func() {
		file_ping_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ping_proto_rawDesc), len(file_ping_proto_rawDesc)))
	})
	return file_ping_proto_rawDescData
}

var file_ping_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ping_proto_goTypes = []any{
	(*PingEnvelope)(nil),      // 0: protocol.PingEnvelope
	(*ProfileRequest)(nil),    // 1: protocol.ProfileRequest
	(*IdentityPublicKey)(nil), // 2: protocol.IdentityPublicKey
}
var file_ping_proto_depIdxs = []int32{
	1, // 0: protocol.PingEnvelope.profile_request:type_name -> protocol.ProfileRequest
	2, // 1: protocol.ProfileRequest.sender_identity:type_name -> protocol.IdentityPublicKey
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ping_proto_init() }
func file_ping_proto_init() {
	if File_ping_proto != nil {
		return
	}
	file_identity_proto_init()
	file_ping_proto_msgTypes[0].OneofWrappers = []any{
		(*PingEnvelope_ProfileRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ping_proto_rawDesc), len(file_ping_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ping_proto_goTypes,
		DependencyIndexes: file_ping_proto_depIdxs,
		MessageInfos:      file_ping_proto_msgTypes,
	}.Build()
	File_ping_proto = out.File
	file_ping_proto_goTypes = nil
	file_ping_proto_depIdxs = nil
}
