// identity.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: identity.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Определяет тип криптографического ключа, используемого для идентификации.
type KeyType int32

const (
	KeyType_KEY_TYPE_UNSPECIFIED KeyType = 0
	KeyType_ED25519              KeyType = 1 // В будущем можем добавить и другие типы, например, для пост-квантовой криптографии.
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "KEY_TYPE_UNSPECIFIED",
		1: "ED25519",
	}
	KeyType_value = map[string]int32{
		"KEY_TYPE_UNSPECIFIED": 0,
		"ED25519":              1,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_identity_proto_enumTypes[0].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_identity_proto_enumTypes[0]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_identity_proto_rawDescGZIP(), []int{0}
}

// IdentityPublicKey представляет собой публичный ключ, который является
// уникальным идентификатором пользователя в сети.
type IdentityPublicKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KeyType       KeyType                `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=protocol.KeyType" json:"key_type,omitempty"`
	PublicKey     []byte                 `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // Сырые байты публичного ключа.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityPublicKey) Reset() {
	*x = IdentityPublicKey{}
	mi := &file_identity_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityPublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityPublicKey) ProtoMessage() {}

func (x *IdentityPublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_identity_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityPublicKey.ProtoReflect.Descriptor instead.
func (*IdentityPublicKey) Descriptor() ([]byte, []int) {
	return file_identity_proto_rawDescGZIP(), []int{0}
}

func (x *IdentityPublicKey) GetKeyType() KeyType {
	if x != nil {
		return x.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (x *IdentityPublicKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type ProfilePayload struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Nickname string                 `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// Дискриминатор нам больше не нужен, т.к. PeerID и PublicKey
	// являются уникальными идентификаторами. Но можем оставить для красоты.
	Discriminator string `protobuf:"bytes,2,opt,name=discriminator,proto3" json:"discriminator,omitempty"`
	// В будущем: версия клиента, хэш аватара и т.д.
	SupportedCryptoSuites []string `protobuf:"bytes,3,rep,name=supported_crypto_suites,json=supportedCryptoSuites,proto3" json:"supported_crypto_suites,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProfilePayload) Reset() {
	*x = ProfilePayload{}
	mi := &file_identity_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfilePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePayload) ProtoMessage() {}

func (x *ProfilePayload) ProtoReflect() protoreflect.Message {
	mi := &file_identity_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePayload.ProtoReflect.Descriptor instead.
func (*ProfilePayload) Descriptor() ([]byte, []int) {
	return file_identity_proto_rawDescGZIP(), []int{1}
}

func (x *ProfilePayload) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ProfilePayload) GetDiscriminator() string {
	if x != nil {
		return x.Discriminator
	}
	return ""
}

func (x *ProfilePayload) GetSupportedCryptoSuites() []string {
	if x != nil {
		return x.SupportedCryptoSuites
	}
	return nil
}

var File_identity_proto protoreflect.FileDescriptor

const file_identity_proto_rawDesc = "" +
	"\n" +
	"\x0eidentity.proto\x12\bprotocol\"`\n" +
	"\x11IdentityPublicKey\x12,\n" +
	"\bkey_type\x18\x01 \x01(\x0e2\x11.protocol.KeyTypeR\akeyType\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\fR\tpublicKey\"\x8a\x01\n" +
	"\x0eProfilePayload\x12\x1a\n" +
	"\bnickname\x18\x01 \x01(\tR\bnickname\x12$\n" +
	"\rdiscriminator\x18\x02 \x01(\tR\rdiscriminator\x126\n" +
	"\x17supported_crypto_suites\x18\x03 \x03(\tR\x15supportedCryptoSuites*0\n" +
	"\aKeyType\x12\x18\n" +
	"\x14KEY_TYPE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aED25519\x10\x01B\x04Z\x02./b\x06proto3"

var (
	file_identity_proto_rawDescOnce sync.Once
	file_identity_proto_rawDescData []byte
)

func file_identity_proto_rawDescGZIP() []byte {
	file_identity_proto_rawDescOnce.Do(func() {
		file_identity_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_identity_proto_rawDesc), len(file_identity_proto_rawDesc)))
	})
	return file_identity_proto_rawDescData
}

var file_identity_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_identity_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_identity_proto_goTypes = []any{
	(KeyType)(0),              // 0: protocol.KeyType
	(*IdentityPublicKey)(nil), // 1: protocol.IdentityPublicKey
	(*ProfilePayload)(nil),    // 2: protocol.ProfilePayload
}
var file_identity_proto_depIdxs = []int32{
	0, // 0: protocol.IdentityPublicKey.key_type:type_name -> protocol.KeyType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_identity_proto_init() }
func file_identity_proto_init() {
	if File_identity_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_identity_proto_rawDesc), len(file_identity_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_identity_proto_goTypes,
		DependencyIndexes: file_identity_proto_depIdxs,
		EnumInfos:         file_identity_proto_enumTypes,
		MessageInfos:      file_identity_proto_msgTypes,
	}.Build()
	File_identity_proto = out.File
	file_identity_proto_goTypes = nil
	file_identity_proto_depIdxs = nil
}
