package main

import (
	"context"
	"crypto/sha256"
	"fmt"
	"os/exec"
	"strings"
	"time"

	"OwlWhisper/internal/core"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/ipfs/go-cid"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/multiformats/go-multihash"
)

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type AppState int

const (
	StateInitializing AppState = iota
	StateProfileInput
	StateCoreStarting
	StateReady
	StateError
)

// TUIApp –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
type TUIApp struct {
	core          *core.CoreController
	contacts      map[string]string // nickname -> peerID
	nicknames     map[string]string // peerID -> nickname
	state         AppState
	profile       string
	peerID        string
	discriminator string
	contentID     string // ContentID –¥–ª—è –ø–æ–∏—Å–∫–∞
	errorMsg      string
	inputBuffer   string
	commandMode   bool
	outputLines   []string
}

// String –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
func (s AppState) String() string {
	switch s {
	case StateInitializing:
		return "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
	case StateProfileInput:
		return "–í–≤–æ–¥ –ø—Ä–æ—Ñ–∏–ª—è"
	case StateCoreStarting:
		return "–ó–∞–ø—É—Å–∫ Core"
	case StateReady:
		return "–ì–æ—Ç–æ–≤"
	case StateError:
		return "–û—à–∏–±–∫–∞"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (a *TUIApp) Init() tea.Cmd {
	// –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø—Ä–æ—Ñ–∏–ª—è
	a.state = StateProfileInput
	return tea.EnterAltScreen
}

// handleKeyPress –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
func (a *TUIApp) handleKeyPress(msg tea.KeyMsg) (tea.Model, tea.Cmd) {
	switch a.state {
	case StateProfileInput:
		return a.handleProfileInput(msg)
	case StateReady:
		return a.handleCommandInput(msg)
	case StateError:
		if msg.String() != "" {
			return a, tea.Quit
		}
	}
	return a, nil
}

// handleProfileInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ—Ñ–∏–ª—è
func (a *TUIApp) handleProfileInput(msg tea.KeyMsg) (tea.Model, tea.Cmd) {
	switch msg.String() {
	case "enter":
		trimmed := strings.TrimSpace(a.inputBuffer)
		if trimmed != "" {
			a.profile = trimmed
			a.state = StateCoreStarting
			return a, a.startCore()
		}
		// –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
		return a, nil
	case "backspace":
		if len(a.inputBuffer) > 0 {
			a.inputBuffer = a.inputBuffer[:len(a.inputBuffer)-1]
		}
	case "ctrl+v":
		// –í—Å—Ç–∞–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
		return a, a.pasteFromClipboard()
	case "ctrl+c":
		return a, tea.Quit
	default:
		if len(msg.String()) == 1 {
			a.inputBuffer += msg.String()
		}
	}
	return a, nil
}

// handleCommandInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥
func (a *TUIApp) handleCommandInput(msg tea.KeyMsg) (tea.Model, tea.Cmd) {
	switch msg.String() {
	case "enter":
		trimmed := strings.TrimSpace(a.inputBuffer)
		if trimmed != "" {
			// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
			cmd := a.executeCommand(trimmed)
			a.inputBuffer = ""
			return a, cmd
		}
		// –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
		return a, nil
	case "backspace":
		if len(a.inputBuffer) > 0 {
			a.inputBuffer = a.inputBuffer[:len(a.inputBuffer)-1]
		}
	case "ctrl+v":
		// –í—Å—Ç–∞–≤–∫–∞ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
		return a, a.pasteFromClipboard()
	case "ctrl+c":
		return a, tea.Quit
	default:
		if len(msg.String()) == 1 {
			a.inputBuffer += msg.String()
		}
	}
	return a, nil
}

// Update –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
func (a *TUIApp) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		return a.handleKeyPress(msg)
	case tea.WindowSizeMsg:
		return a, nil
	case errorMsg:
		a.errorMsg = msg.err.Error()
		a.state = StateError
		return a, nil
	case coreStartedMsg:
		a.core = msg.controller
		a.peerID = msg.peerID
		a.discriminator = msg.discriminator
		a.contentID = msg.contentID // –û–±–Ω–æ–≤–ª—è–µ–º contentID
		a.state = StateReady
		return a, nil
	case outputMsg:
		a.outputLines = append(a.outputLines, msg.line)
		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤—ã–≤–æ–¥–∞
		if len(a.outputLines) > 20 {
			a.outputLines = a.outputLines[len(a.outputLines)-20:]
		}
		return a, nil
	case pasteMsg:
		// –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞
		a.inputBuffer += msg.text
		return a, nil
	}
	return a, nil
}

// View –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func (a *TUIApp) View() string {
	switch a.state {
	case StateInitializing:
		return a.renderInitializing()
	case StateProfileInput:
		return a.renderProfileInput()
	case StateCoreStarting:
		return a.renderCoreStarting()
	case StateReady:
		return a.renderReady()
	case StateError:
		return a.renderError()
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
	}
}

// renderInitializing –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
func (a *TUIApp) renderInitializing() string {
	return `
ü¶â Owl Whisper TUI Client
========================

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
`
}

// renderProfileInput –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
func (a *TUIApp) renderProfileInput() string {
	return fmt.Sprintf(`
ü¶â Owl Whisper TUI Client
========================

–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è: %s‚ñà
(–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)

`, a.inputBuffer)
}

// renderCoreStarting –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –∑–∞–ø—É—Å–∫–∞ Core
func (a *TUIApp) renderCoreStarting() string {
	return fmt.Sprintf(`
ü¶â Owl Whisper TUI Client
========================

–ü—Ä–æ—Ñ–∏–ª—å: %s
–ó–∞–ø—É—Å–∫ Core...
`, a.profile)
}

// renderReady –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
func (a *TUIApp) renderReady() string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf(`
ü¶â Owl Whisper TUI Client
========================

–ü—Ä–æ—Ñ–∏–ª—å: %s#%s
Peer ID: %s
Content ID: %s
–°–æ—Å—Ç–æ—è–Ω–∏–µ: %s

`, a.profile, a.discriminator, a.peerID, a.contentID, a.state.String()))

	// –ö–æ–º–∞–Ω–¥—ã
	sb.WriteString(`
–ö–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞
/peers - –°–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
/contacts - –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
/find id <peer_id> - –ü–æ–∏—Å–∫ –ø–æ Peer ID
/find name <nickname#discriminator> - –ü–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
/add <peer_id> <nickname> - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
/msg <nickname> <—Ç–µ–∫—Å—Ç> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
/network - –°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∏—Ä—ã
/status - –°—Ç–∞—Ç—É—Å –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞
/diag - –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/quit - –í—ã—Ö–æ–¥

`)

	// –í—ã–≤–æ–¥
	if len(a.outputLines) > 0 {
		sb.WriteString("–í—ã–≤–æ–¥:\n")
		for _, line := range a.outputLines {
			sb.WriteString(line + "\n")
		}
	}

	// –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
	sb.WriteString(fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–Ω–∞—á–Ω–∏—Ç–µ —Å /): %s‚ñà", a.inputBuffer))

	return sb.String()
}

// renderError –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
func (a *TUIApp) renderError() string {
	return fmt.Sprintf(`
ü¶â Owl Whisper TUI Client
========================

‚ùå –û—à–∏–±–∫–∞: %s

–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...
`, a.errorMsg)
}

// startCore –∑–∞–ø—É—Å–∫–∞–µ—Ç Core
func (a *TUIApp) startCore() tea.Cmd {
	return func() tea.Msg {
		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
		keyBytes, err := a.generateNewKeyBytes()
		if err != nil {
			return errorMsg{err: fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: %w", err)}
		}

		// –°–æ–∑–¥–∞–µ–º Core –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
		ctx := context.Background()
		controller, err := core.NewCoreControllerWithKeyBytes(ctx, keyBytes)
		if err != nil {
			return errorMsg{err: fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Core: %w", err)}
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º Core
		if err := controller.Start(); err != nil {
			return errorMsg{err: fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Core: %w", err)}
		}

		// –ü–æ–ª—É—á–∞–µ–º Peer ID
		peerID := controller.GetMyID()

		// –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä
		discriminator := ""
		if len(peerID) >= 6 {
			discriminator = peerID[len(peerID)-6:]
		}

		// –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ DHT
		profileContentID := a.computeContentID(a.profile + "#" + discriminator)
		fmt.Printf("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ContentID –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: %s#%s\n", a.profile, discriminator)
		fmt.Printf("üîë –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π ContentID: %s\n", profileContentID)
		fmt.Printf("üì¢ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ DHT...\n")

		// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ–º
		fmt.Printf("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n")
		fmt.Printf("  - Peer ID: %s\n", peerID)
		fmt.Printf("  - Discriminator: %s\n", discriminator)
		fmt.Printf("  - Content ID: %s\n", profileContentID)
		fmt.Printf("  - Timestamp: %s\n", time.Now().Format("15:04:05"))

		// –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º –≤ DHT
		fmt.Printf("üì° –í—ã–∑—ã–≤–∞–µ–º controller.ProvideContent...\n")
		err = controller.ProvideContent(profileContentID)
		if err != nil {
			// –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –≤ DHT: %v\n", err)
			fmt.Printf("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: %T: %v\n", err, err)
		} else {
			fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω –≤ DHT!\n")
			fmt.Printf("üåê –¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–∏—Ä—ã –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –≤–∞—Å –ø–æ ContentID: %s\n", profileContentID)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å DHT –ø–æ—Å–ª–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
		fmt.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å DHT –ø–æ—Å–ª–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è...\n")
		if dhtSize := controller.GetDHTRoutingTableSize(); dhtSize > 0 {
			fmt.Printf("üìä DHT Routing Table: %d –ø–∏—Ä–æ–≤\n", dhtSize)
		} else {
			fmt.Printf("‚ö†Ô∏è DHT Routing Table –ø—É—Å—Ç–∞\n")
		}

		// –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ Core
		return coreStartedMsg{
			controller:    controller,
			peerID:        peerID,
			discriminator: discriminator,
			contentID:     profileContentID,
		}
	}
}

// cmdStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞
func (a *TUIApp) cmdStatus() tea.Cmd {
	return func() tea.Msg {
		debugMsg := "–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É /status"

		if a.core == nil {
			return outputMsg{line: debugMsg + "\n‚ùå Core –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
		}

		var sb strings.Builder
		sb.WriteString(debugMsg + "\nüìä –°—Ç–∞—Ç—É—Å –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:\n")

		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
		sb.WriteString(fmt.Sprintf("üë§ –ü—Ä–æ—Ñ–∏–ª—å: %s#%s\n", a.profile, a.discriminator))
		sb.WriteString(fmt.Sprintf("üÜî Peer ID: %s\n", a.peerID))
		sb.WriteString(fmt.Sprintf("üîë Content ID: %s\n", a.contentID))

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å DHT
		host := a.core.GetHost()
		if host != nil {
			// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏
			stats := a.core.GetNetworkStats()
			if len(stats) > 0 {
				sb.WriteString("\nüåê –°—Ç–∞—Ç—É—Å DHT:\n")
				for key, value := range stats {
					if key == "dht" {
						sb.WriteString(fmt.Sprintf("  %s: %v\n", key, value))
					}
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
		sb.WriteString("\nüì¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:\n")
		sb.WriteString("  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —Å–µ–±—è –∫–æ–º–∞–Ω–¥–æ–π:\n")
		sb.WriteString(fmt.Sprintf("  /find name %s#%s\n", a.profile, a.discriminator))

		// –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		sb.WriteString("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞:\n")
		sb.WriteString("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Core –¥–ª—è –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è\n")
		sb.WriteString("  2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ DHT –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Å–µ—Ä–≤–µ—Ä–∞\n")
		sb.WriteString("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap —É–∑–ª–∞–º\n")
		sb.WriteString("  4. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è\n")

		return outputMsg{line: sb.String()}
	}
}

// cmdNetwork –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∏—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
func (a *TUIApp) cmdNetwork() tea.Cmd {
	return func() tea.Msg {
		debugMsg := "–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É /network"

		if a.core == nil {
			return outputMsg{line: debugMsg + "\n‚ùå Core –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
		}

		var sb strings.Builder
		sb.WriteString(debugMsg + "\nüåê –°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏:\n")

		// –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç
		host := a.core.GetHost()
		if host == nil {
			return outputMsg{line: debugMsg + "\n‚ùå –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
		}

		// –í—Å–µ –ø–∏—Ä—ã –∏–∑ –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
		allPeers := host.Network().Peers()
		sb.WriteString(fmt.Sprintf("üìä –í—Å–µ–≥–æ –ø–∏—Ä–æ–≤ –≤ —Å–µ—Ç–∏: %d\n", len(allPeers)))

		if len(allPeers) > 0 {
			sb.WriteString("üîó –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∏—Ä—ã:\n")
			for _, p := range allPeers {
				sb.WriteString(fmt.Sprintf("  %s\n", p.String()))
			}
		}

		// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã
		protectedPeers := a.core.GetProtectedPeers()
		if len(protectedPeers) > 0 {
			sb.WriteString("üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã:\n")
			for _, p := range protectedPeers {
				sb.WriteString(fmt.Sprintf("  %s\n", p.String()))
			}
		}

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
		stats := a.core.GetNetworkStats()
		if len(stats) > 0 {
			sb.WriteString("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏:\n")
			for key, value := range stats {
				sb.WriteString(fmt.Sprintf("  %s: %v\n", key, value))
			}
		}

		return outputMsg{line: sb.String()}
	}
}

// pasteFromClipboard –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
func (a *TUIApp) pasteFromClipboard() tea.Cmd {
	return func() tea.Msg {
		// –í Linux –∏—Å–ø–æ–ª—å–∑—É–µ–º xclip –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É—Ñ–µ—Ä–∞
		cmd := exec.Command("xclip", "-o", "-selection", "clipboard")
		output, err := cmd.Output()
		if err != nil {
			return outputMsg{line: "‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞: " + err.Error()}
		}

		// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º
		text := strings.TrimSpace(string(output))
		if text != "" {
			return pasteMsg{text: text}
		}

		return outputMsg{line: "‚ö†Ô∏è –ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç"}
	}
}

// generateNewKeyBytes –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –±–∞–π—Ç—ã –∫–ª—é—á–∞
func (a *TUIApp) generateNewKeyBytes() ([]byte, error) {
	return core.GenerateKeyBytes()
}

// executeCommand –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É
func (a *TUIApp) executeCommand(cmd string) tea.Cmd {
	parts := strings.Fields(cmd)
	if len(parts) == 0 {
		return func() tea.Msg {
			return outputMsg{line: "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"}
		}
	}

	// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	debugMsg := fmt.Sprintf("–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: %s (—á–∞—Å—Ç–∏: %v)", cmd, parts)

	switch parts[0] {
	case "/help":
		return func() tea.Msg {
			return outputMsg{line: debugMsg + "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /help, /peers, /contacts, /find, /add, /msg, /network, /status, /dhtinfo, /quit"}
		}
	case "/peers":
		return a.cmdPeers()
	case "/contacts":
		return a.cmdContacts()
	case "/find":
		return a.cmdFind(parts[1:])
	case "/add":
		return a.cmdAdd(parts[1:])
	case "/msg":
		return a.cmdMsg(parts[1:])
	case "/network":
		return a.cmdNetwork()
	case "/status":
		return a.cmdStatus()
	case "/dhtinfo":
		return a.cmdDHTInfo()
	case "/diag":
		return a.cmdDiag()
	case "/quit":
		return tea.Quit
	default:
		return func() tea.Msg {
			return outputMsg{line: fmt.Sprintf("%s\n–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s", debugMsg, parts[0])}
		}
	}
}

// cmdPeers –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
func (a *TUIApp) cmdPeers() tea.Cmd {
	return func() tea.Msg {
		debugMsg := "–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É /peers"

		if a.core == nil {
			return outputMsg{line: debugMsg + "\n‚ùå Core –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
		}

		peers := a.core.GetConnectedPeers()
		if len(peers) == 0 {
			return outputMsg{line: debugMsg + "\nüìä –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤"}
		}

		var sb strings.Builder
		sb.WriteString(debugMsg + "\nüìä –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã:\n")
		for _, p := range peers {
			sb.WriteString(fmt.Sprintf("  %s\n", p.String()))
		}

		return outputMsg{line: sb.String()}
	}
}

// cmdContacts –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
func (a *TUIApp) cmdContacts() tea.Cmd {
	return func() tea.Msg {
		debugMsg := "–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É /contacts"

		if len(a.contacts) == 0 {
			return outputMsg{line: debugMsg + "\nüìã –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"}
		}

		var sb strings.Builder
		sb.WriteString(debugMsg + "\nüìã –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n")
		for nickname, peerID := range a.contacts {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
			online := "‚ùå"
			if a.core != nil {
				peers := a.core.GetConnectedPeers()
				for _, p := range peers {
					if p.String() == peerID {
						online = "‚úÖ"
						break
					}
				}
			}
			sb.WriteString(fmt.Sprintf("  %s %s (%s)\n", online, nickname, peerID))
		}

		return outputMsg{line: sb.String()}
	}
}

// cmdFind –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫
func (a *TUIApp) cmdFind(args []string) tea.Cmd {
	if len(args) < 2 {
		return func() tea.Msg {
			return outputMsg{line: "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find id <peer_id> –∏–ª–∏ /find name <nickname#discriminator>"}
		}
	}

	switch args[0] {
	case "id":
		if len(args) < 2 {
			return func() tea.Msg {
				return outputMsg{line: "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find id <peer_id>"}
			}
		}
		return a.findByPeerID(args[1])
	case "name":
		if len(args) < 2 {
			return func() tea.Msg {
				return outputMsg{line: "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find name <nickname#discriminator>"}
			}
		}
		return a.findByName(args[1])
	default:
		return func() tea.Msg {
			return outputMsg{line: "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find id <peer_id> –∏–ª–∏ /find name <nickname#discriminator>"}
		}
	}
}

// findByPeerID –∏—â–µ—Ç –ø–∏—Ä–∞ –ø–æ Peer ID
func (a *TUIApp) findByPeerID(peerIDStr string) tea.Cmd {
	return func() tea.Msg {
		debugMsg := fmt.Sprintf("–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ Peer ID: %s", peerIDStr)

		if a.core == nil {
			return outputMsg{line: debugMsg + "\n‚ùå Core –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
		}

		// –ü–∞—Ä—Å–∏–º Peer ID
		peerID, err := peer.Decode(peerIDStr)
		if err != nil {
			return outputMsg{line: fmt.Sprintf("%s\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Peer ID: %v", debugMsg, err)}
		}

		// –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
		fmt.Printf("üîç –ü–æ–∏—Å–∫ –ø–æ Peer ID: %s\n", peerIDStr)
		fmt.Printf("üîë –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Peer ID: %s\n", peerID.String())
		fmt.Printf("üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–∏—Ä–∞ –≤ DHT...\n")
		fmt.Printf("‚è±Ô∏è –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ (—Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫)...\n")
		fmt.Printf("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º:\n")
		fmt.Printf("  - –ù–∞—à Peer ID: %s\n", a.peerID)
		fmt.Printf("  - –ù–∞—à Content ID: %s\n", a.contentID)
		fmt.Printf("  - Timestamp: %s\n", time.Now().Format("15:04:05"))
		fmt.Printf("  - Core —Å—Ç–∞—Ç—É—Å: %s\n", a.state.String())

		// –ò—â–µ–º –ø–∏—Ä–∞
		fmt.Printf("üì° –í—ã–∑—ã–≤–∞–µ–º a.core.FindPeer...\n")
		addrInfo, err := a.core.FindPeer(peerID)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–∞: %v\n", err)
			fmt.Printf("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: %T: %v\n", err, err)
			fmt.Printf("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n")
			fmt.Printf("  - –ü–∏—Ä –æ—Ñ–ª–∞–π–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DHT\n")
			fmt.Printf("  - DHT –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É\n")
			fmt.Printf("  - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é\n")
			return outputMsg{line: fmt.Sprintf("%s\n‚ùå –ü–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", debugMsg, err)}
		}

		// –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		fmt.Printf("‚úÖ –ü–∏—Ä –Ω–∞–π–¥–µ–Ω: %s\n", addrInfo.ID.String())
		fmt.Printf("üìç –ê–¥—Ä–µ—Å–∞ –ø–∏—Ä–∞: %v\n", addrInfo.Addrs)
		fmt.Printf("üîç –î–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞:\n")
		fmt.Printf("  - Peer ID: %s\n", addrInfo.ID.String())
		fmt.Printf("  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤: %d\n", len(addrInfo.Addrs))
		fmt.Printf("  - Timestamp: %s\n", time.Now().Format("15:04:05"))

		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –ø–∏—Ä—É
		// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Core

		return outputMsg{line: fmt.Sprintf("%s\n‚úÖ –ü–∏—Ä –Ω–∞–π–¥–µ–Ω: %s\nüìç –ê–¥—Ä–µ—Å: %v", debugMsg, addrInfo.ID.String(), addrInfo.Addrs)}
	}
}

// findByName –∏—â–µ—Ç –ø–∏—Ä–∞ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
func (a *TUIApp) findByName(nameWithDisc string) tea.Cmd {
	return func() tea.Msg {
		debugMsg := fmt.Sprintf("–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É: %s", nameWithDisc)

		if a.core == nil {
			return outputMsg{line: debugMsg + "\n‚ùå Core –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
		}

		// –í—ã—á–∏—Å–ª—è–µ–º ContentID –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞
		contentID := a.computeContentID(nameWithDisc)
		debugMsg += fmt.Sprintf("\nüîç –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π ContentID: %s", contentID)

		// –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
		fmt.Printf("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É: %s\n", nameWithDisc)
		fmt.Printf("üîë –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π ContentID: %s\n", contentID)
		fmt.Printf("üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ DHT...\n")
		fmt.Printf("‚è±Ô∏è –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ (—Ç–∞–π–º–∞—É—Ç 60 —Å–µ–∫)...\n")
		fmt.Printf("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º:\n")
		fmt.Printf("  - –ù–∞—à Peer ID: %s\n", a.peerID)
		fmt.Printf("  - –ù–∞—à Content ID: %s\n", a.contentID)
		fmt.Printf("  - Timestamp: %s\n", time.Now().Format("15:04:05"))
		fmt.Printf("  - Core —Å—Ç–∞—Ç—É—Å: %s\n", a.state.String())

		// –ò—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
		providers, err := a.core.FindProvidersForContent(contentID)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: %v\n", err)
			fmt.Printf("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n")
			fmt.Printf("  - –ü–∏—Ä –Ω–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª —Å–µ–±—è –≤ DHT\n")
			fmt.Printf("  - DHT –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É\n")
			fmt.Printf("  - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é\n")
			return outputMsg{line: fmt.Sprintf("%s\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: %v", debugMsg, err)}
		}

		fmt.Printf("üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: %d\n", len(providers))

		if len(providers) == 0 {
			fmt.Printf("‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ContentID: %s\n", contentID)
			fmt.Printf("üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n")
			fmt.Printf("  - –ü–∏—Ä –Ω–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª —Å–µ–±—è –≤ DHT\n")
			fmt.Printf("  - DHT –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É\n")
			fmt.Printf("  - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é\n")
			return outputMsg{line: fmt.Sprintf("%s\n‚ùå –ü–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", debugMsg)}
		}

		// –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
		provider := providers[0]
		fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: %s\n", provider.ID.String())
		fmt.Printf("üìç –ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: %v\n", provider.Addrs)

		// –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
		fmt.Printf("üîç –î–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:\n")
		fmt.Printf("  - Peer ID: %s\n", provider.ID.String())
		fmt.Printf("  - Short Peer ID: %s\n", provider.ID.ShortString())
		fmt.Printf("  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤: %d\n", len(provider.Addrs))
		fmt.Printf("  - Timestamp: %s\n", time.Now().Format("15:04:05"))
		fmt.Printf("  - Content ID –¥–ª—è –ø–æ–∏—Å–∫–∞: %s\n", contentID)

		// TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
		fmt.Printf("üîó TODO: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É %s\n", provider.ID.ShortString())

		return outputMsg{line: fmt.Sprintf("%s\n‚úÖ –ü–∏—Ä –Ω–∞–π–¥–µ–Ω: %s", debugMsg, provider.ID.String())}
	}
}

// computeContentID –≤—ã—á–∏—Å–ª—è–µ—Ç ContentID –∏–∑ –Ω–∏–∫–Ω–µ–π–º–∞
func (a *TUIApp) computeContentID(nameWithDisc string) string {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π CIDv1 –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ö—ç—à–∞
	hash := sha256.Sum256([]byte(nameWithDisc))

	// –°–æ–∑–¥–∞–µ–º multihash
	mh, err := multihash.Encode(hash[:], multihash.SHA2_256)
	if err != nil {
		// Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ö—ç—à –µ—Å–ª–∏ multihash –Ω–µ —É–¥–∞–ª—Å—è
		return fmt.Sprintf("%x", hash)
	}

	// –°–æ–∑–¥–∞–µ–º CIDv1 —Å –∫–æ–¥–µ–∫–æ–º raw
	cidV1 := cid.NewCidV1(cid.Raw, mh)
	return cidV1.String()
}

// cmdAdd –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç
func (a *TUIApp) cmdAdd(args []string) tea.Cmd {
	if len(args) < 2 {
		return func() tea.Msg {
			return outputMsg{line: "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <peer_id> <nickname>"}
		}
	}

	return func() tea.Msg {
		debugMsg := fmt.Sprintf("–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É /add —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: %v", args)

		peerID := args[0]
		nickname := args[1]

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å Peer ID
		_, err := peer.Decode(peerID)
		if err != nil {
			return outputMsg{line: fmt.Sprintf("%s\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Peer ID: %v", debugMsg, err)}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
		a.contacts[nickname] = peerID
		a.nicknames[peerID] = nickname

		return outputMsg{line: fmt.Sprintf("%s\n‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω —Å Peer ID: %s", debugMsg, nickname, peerID)}
	}
}

// cmdMsg –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func (a *TUIApp) cmdMsg(args []string) tea.Cmd {
	if len(args) < 2 {
		return func() tea.Msg {
			return outputMsg{line: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /msg <nickname> <—Ç–µ–∫—Å—Ç>"}
		}
	}

	return func() tea.Msg {
		nickname := args[0]
		message := strings.Join(args[1:], " ")

		// –ù–∞—Ö–æ–¥–∏–º Peer ID
		peerID, exists := a.contacts[nickname]
		if !exists {
			return outputMsg{line: fmt.Sprintf("–ö–æ–Ω—Ç–∞–∫—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω", nickname)}
		}

		if a.core == nil {
			return outputMsg{line: "Core –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
		}

		// –ü–∞—Ä—Å–∏–º Peer ID
		peer, err := peer.Decode(peerID)
		if err != nil {
			return outputMsg{line: fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π Peer ID: %v", err)}
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		err = a.core.Send(peer, []byte(message))
		if err != nil {
			return outputMsg{line: fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)}
		}

		return outputMsg{line: fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %s", nickname)}
	}
}

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è bubbletea
type errorMsg struct {
	err error
}

type coreStartedMsg struct {
	controller    *core.CoreController
	peerID        string
	discriminator string
	contentID     string // Added contentID to the struct
}

type outputMsg struct {
	line string
}

// cmdDHTInfo –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DHT –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
func (a *TUIApp) cmdDHTInfo() tea.Cmd {
	return func() tea.Msg {
		debugMsg := "–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É /dhtinfo"

		if a.core == nil {
			return outputMsg{line: debugMsg + "\n‚ùå Core –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
		}

		var sb strings.Builder
		sb.WriteString(debugMsg + "\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DHT:\n")

		// –†–∞–∑–º–µ—Ä DHT routing table
		rtSize := a.core.GetDHTRoutingTableSize()
		sb.WriteString(fmt.Sprintf("üìà –†–∞–∑–º–µ—Ä routing table: %d –ø–∏—Ä–æ–≤\n", rtSize))

		// –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
		if rtSize == 0 {
			sb.WriteString("‚ö†Ô∏è DHT routing table –ø—É—Å—Ç–∞ - —É–∑–µ–ª –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É\n")
		} else if rtSize < 10 {
			sb.WriteString("üîÑ DHT routing table –º–∞–ª–∞ - —É–∑–µ–ª –µ—â–µ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞–µ—Ç—Å—è\n")
		} else if rtSize < 50 {
			sb.WriteString("‚úÖ DHT routing table –≤ –Ω–æ—Ä–º–µ - —É–∑–µ–ª –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É\n")
		} else {
			sb.WriteString("üöÄ DHT routing table –±–æ–ª—å—à–∞—è - —É–∑–µ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤\n")
		}

		// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
		sb.WriteString("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n")
		if rtSize < 10 {
			sb.WriteString("  - –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ 1-2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ DHT\n")
			sb.WriteString("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap —É–∑–ª–∞–º\n")
		} else {
			sb.WriteString("  - DHT –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n")
			sb.WriteString("  - –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫\n")
		}

		return outputMsg{line: sb.String()}
	}
}

// cmdDiag –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
func (a *TUIApp) cmdDiag() tea.Cmd {
	return func() tea.Msg {
		debugMsg := "–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É /diag"

		if a.core == nil {
			return outputMsg{line: debugMsg + "\n‚ùå Core –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
		}

		var sb strings.Builder
		sb.WriteString(debugMsg + "\n")
		sb.WriteString("--- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OWL WHISPER ---\n")

		// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
		sb.WriteString(fmt.Sprintf("PeerID: %s\n", a.peerID))
		sb.WriteString(fmt.Sprintf("ContentID: %s\n", a.contentID))
		sb.WriteString(fmt.Sprintf("Timestamp: %s\n", time.Now().Format("15:04:05")))

		// DHT —Å—Ç–∞—Ç—É—Å
		sb.WriteString("\n--- DHT ---\n")
		rtSize := a.core.GetDHTRoutingTableSize()
		sb.WriteString(fmt.Sprintf("Routing Table Size: %d peers\n", rtSize))

		// –°—Ç–∞—Ç—É—Å DHT
		if rtSize == 0 {
			sb.WriteString("‚ö†Ô∏è DHT –Ω–µ –≥–æ—Ç–æ–≤ - —É–∑–µ–ª –µ—â–µ —Ä–∞–∑–æ–≥—Ä–µ–≤–∞–µ—Ç—Å—è\n")
		} else if rtSize < 10 {
			sb.WriteString("üîÑ DHT —Ä–∞–∑–æ–≥—Ä–µ–≤–∞–µ—Ç—Å—è - –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ\n")
		} else if rtSize < 50 {
			sb.WriteString("‚úÖ DHT –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n")
		} else {
			sb.WriteString("üöÄ DHT –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤\n")
		}

		// –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		sb.WriteString("\n--- –°–û–ï–î–ò–ù–ï–ù–ò–Ø ---\n")
		peers := a.core.GetConnectedPeers()
		sb.WriteString(fmt.Sprintf("Active Connections (/peers): %d peers\n", len(peers)))

		// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã
		protectedPeers := a.core.GetProtectedPeers()
		sb.WriteString(fmt.Sprintf("Protected Peers (ConnMgr): %d peers\n", len(protectedPeers)))

		// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
		stats := a.core.GetNetworkStats()
		if len(stats) > 0 {
			sb.WriteString("\n--- –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–¢–ò ---\n")
			for key, value := range stats {
				sb.WriteString(fmt.Sprintf("  %s: %v\n", key, value))
			}
		}

		// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
		sb.WriteString("\n--- –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ---\n")
		if rtSize < 10 {
			sb.WriteString("  - –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ä–∞–∑–æ–≥—Ä–µ–≤–∞ DHT\n")
			sb.WriteString("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap —É–∑–ª–∞–º\n")
		} else if len(peers) == 0 {
			sb.WriteString("  - DHT –≥–æ—Ç–æ–≤, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n")
			sb.WriteString("  - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ - —Å–æ–∑–¥–∞—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n")
		} else {
			sb.WriteString("  - –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ\n")
			sb.WriteString("  - –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫ –∏ –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n")
		}

		return outputMsg{line: sb.String()}
	}
}
