package main

import (
	"fmt"
	"time"
)

// #cgo CFLAGS: -I../../internal/core
// #cgo LDFLAGS: -L../../dist -lowlwhisper
// #include "owlwhisper.h"
import "C"

func main() {
	fmt.Println("ü¶â –¢–µ—Å—Ç–∏—Ä—É–µ–º Owl Whisper shared library")
	fmt.Println("==================================================")

	// –ó–∞–ø—É—Å–∫–∞–µ–º
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫...")
	result := C.StartOwlWhisper()
	if result == 0 {
		fmt.Println("‚úÖ Owl Whisper –∑–∞–ø—É—â–µ–Ω")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
		return
	}

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
	time.Sleep(2 * time.Second)

	// –ü–æ–ª—É—á–∞–µ–º Peer ID
	fmt.Println("üë§ –ü–æ–ª—É—á–∞–µ–º Peer ID...")
	peerID := C.GetMyPeerID()
	if peerID != nil {
		goPeerID := C.GoString(peerID)
		fmt.Printf("   Peer ID: %s\n", goPeerID)
		C.FreeString(peerID)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
	fmt.Println("üåê –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å...")
	status := C.GetConnectionStatus()
	if status != nil {
		goStatus := C.GoString(status)
		fmt.Printf("   –°—Ç–∞—Ç—É—Å: %s\n", goStatus)
		C.FreeString(status)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	fmt.Println("üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")
	testMsg := C.CString("–¢–µ—Å—Ç –æ—Ç Go!")
	result = C.SendMessage(testMsg)
	if result == 0 {
		fmt.Println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
	}

	// –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
	time.Sleep(2 * time.Second)

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
	fmt.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
	result = C.StopOwlWhisper()
	if result == 0 {
		fmt.Println("‚úÖ Owl Whisper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
	}

	fmt.Println("üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
