package main

import (
	"encoding/base64"
	"fmt"
	"time"
	"unsafe"
)

/*
#cgo CFLAGS: -I../../internal/core
#cgo LDFLAGS: -L../../dist -lowlwhisper
#include "owlwhisper.h"
#include <stdlib.h>
#include <string.h>
*/
import "C"

func main() {
	fmt.Println("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
	fmt.Println("======================================================")

	// –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã –∫–ª—é—á–∞
	fmt.Println("\nüîë –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—ã—Ä—ã–µ –±–∞–π—Ç—ã –∫–ª—é—á–∞...")

	keyData := C.GenerateNewKeyBytes()
	if keyData == nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞")
		return
	}
	defer C.FreeString(keyData)

	keyStr := C.GoString(keyData)
	fmt.Printf("‚úÖ Base64-encoded –∫–ª—é—á: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(keyStr))
	fmt.Printf("üîç –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤: %s...\n", keyStr[:20])

	// –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∫–ª—é—á–æ–º
	fmt.Println("\nüöÄ –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º Owl Whisper...")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ –±–∞–π—Ç—ã
	keyBytes, err := base64.StdEncoding.DecodeString(keyStr)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: %d –±–∞–π—Ç\n", len(keyBytes))
	fmt.Printf("üîç –ü–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç (hex): %x\n", keyBytes[:16])

	result := C.StartOwlWhisperWithKey((*C.char)(unsafe.Pointer(&keyBytes[0])), C.int(len(keyBytes)))
	if result != 0 {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Owl Whisper")
		return
	}

	fmt.Println("‚úÖ Owl Whisper –∑–∞–ø—É—â–µ–Ω!")

	// –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	fmt.Println("\nüîç –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")

	// –ü–æ–ª—É—á–∞–µ–º Peer ID
	peerID := C.GetMyPeerID()
	if peerID != nil {
		myPeerID := C.GoString(peerID)
		fmt.Printf("‚úÖ –ú–æ–π Peer ID: %s\n", myPeerID)
		C.FreeString(peerID)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	status := C.GetConnectionStatus()
	if status != nil {
		statusStr := C.GoString(status)
		fmt.Printf("‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %s\n", statusStr)
		C.FreeString(status)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
	peers := C.GetPeers()
	if peers != nil {
		peersStr := C.GoString(peers)
		fmt.Printf("‚úÖ –°–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤: %s\n", peersStr)
		C.FreeString(peers)
	}

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
	fmt.Println("\n‚è≥ –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏...")
	time.Sleep(10 * time.Second)

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
	fmt.Println("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")

	statusFinal := C.GetConnectionStatus()
	if statusFinal != nil {
		statusStr := C.GoString(statusFinal)
		fmt.Printf("üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %s\n", statusStr)
		C.FreeString(statusFinal)
	}

	fmt.Println("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("üí° –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ segmentation fault!")
	fmt.Println("üí° –ù–ï –≤—ã–∑—ã–≤–∞–µ–º StopOwlWhisper - —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
}
