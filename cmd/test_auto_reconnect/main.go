package main

import (
	"C"
	"fmt"
	"time"
)

/*
#cgo CFLAGS: -I../../internal/core
#cgo LDFLAGS: -L../../dist -lowlwhisper
#include "owlwhisper.h"
#include <stdlib.h>
#include <string.h>
*/

func main() {
	fmt.Println("üîÑ –¢–ï–°–¢ –ê–í–¢–û–ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
	fmt.Println("==============================")

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
	fmt.Println("\nüîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á...")
	keyBytes := C.GenerateNewKeyBytes()
	if keyBytes == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á")
		return
	}
	defer C.FreeString(keyBytes)

	keyStr := C.GoString(keyBytes)
	fmt.Printf("‚úÖ –ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: %d –±–∞–π—Ç\n", len(keyStr))

	// –ó–∞–ø—É—Å–∫–∞–µ–º OwlWhisper
	fmt.Println("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º OwlWhisper...")
	result := C.StartOwlWhisperWithKey(C.CString(keyStr), C.int(len(keyStr)))
	if result != 0 {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å OwlWhisper")
		return
	}
	fmt.Println("‚úÖ OwlWhisper –∑–∞–ø—É—â–µ–Ω")

	// –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏
	fmt.Println("\n‚è≥ –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏ (15 —Å–µ–∫—É–Ω–¥)...")
	time.Sleep(15 * time.Second)

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à PeerID
	fmt.Println("\nüë§ –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à PeerID...")
	myPeerID := C.GetMyPeerID()
	if myPeerID == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PeerID")
		return
	}
	defer C.FreeString(myPeerID)

	myID := C.GoString(myPeerID)
	fmt.Printf("‚úÖ –ù–∞—à PeerID: %s\n", myID)

	// üîÑ –¢–ï–°–¢–ò–†–£–ï–ú –ê–í–¢–û–ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
	fmt.Println("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	fmt.Println("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
	isEnabled := C.IsAutoReconnectEnabled()
	if isEnabled == 1 {
		fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	} else {
		fmt.Println("‚ùå –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
	}

	// –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	fmt.Println("\n‚è∏Ô∏è –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
	disableResult := C.DisableAutoReconnect()
	if disableResult == 0 {
		fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		isEnabled = C.IsAutoReconnectEnabled()
		if isEnabled == 0 {
			fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
		} else {
			fmt.Println("‚ùå –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å")
		}
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
	}

	// –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	fmt.Println("\nüîÑ –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
	enableResult := C.EnableAutoReconnect()
	if enableResult == 0 {
		fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		isEnabled = C.IsAutoReconnectEnabled()
		if isEnabled == 1 {
			fmt.Println("‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ")
		} else {
			fmt.Println("‚ùå –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –≤–∫–ª—é—á–∏–ª–æ—Å—å")
		}
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ä–∞ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	fmt.Println("\nüîí –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Ä–∞ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
	addResult := C.AddProtectedPeer(myPeerID)
	if addResult == 0 {
		fmt.Println("‚úÖ –ü–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
		fmt.Println("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
		attempts := C.GetReconnectAttempts(myPeerID)
		fmt.Printf("üìã –ü–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %d\n", attempts)

		// –£–¥–∞–ª—è–µ–º –ø–∏—Ä–∞ –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
		fmt.Println("\nüîì –£–¥–∞–ª—è–µ–º –ø–∏—Ä–∞ –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö...")
		removeResult := C.RemoveProtectedPeer(myPeerID)
		if removeResult == 0 {
			fmt.Println("‚úÖ –ü–∏—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö")
		} else {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∏—Ä–∞")
		}
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–∏—Ä–∞ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	fmt.Println("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")

	// –õ–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	limits := C.GetConnectionLimits()
	if limits != nil {
		limitsStr := C.GoString(limits)
		fmt.Printf("üìã –õ–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %s\n", limitsStr)
		C.FreeString(limits)
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
	networkStats := C.GetNetworkStats()
	if networkStats != nil {
		statsStr := C.GoString(networkStats)
		fmt.Printf("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏: %s\n", statsStr)
		C.FreeString(networkStats)
	}

	fmt.Println("\nüéâ –¢–µ—Å—Ç –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
