package main

/*
#cgo CFLAGS: -I../../internal/core
#cgo LDFLAGS: -L../../dist -lowlwhisper
#include "owlwhisper.h"
#include <stdlib.h>
#include <stdio.h>
*/
import "C"
import (
	"fmt"
	"strings"
	"unsafe"
)

func main() {
	fmt.Println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
	fmt.Println(strings.Repeat("=", 60))

	// 1. –ó–∞–ø—É—Å–∫–∞–µ–º Core
	fmt.Println("\n1Ô∏è‚É£ –ó–∞–ø—É—Å–∫ Core...")
	result := C.StartOwlWhisper()
	if result != 0 {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Core")
		return
	}
	fmt.Println("‚úÖ Core —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

	// 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à Peer ID
	fmt.Println("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ Peer ID...")
	myPeerID := C.GetMyPeerID()
	if myPeerID == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Peer ID")
		return
	}
	myPeerIDStr := C.GoString(myPeerID)
	fmt.Printf("‚úÖ –ù–∞—à Peer ID: %s\n", myPeerIDStr)
	C.FreeString(myPeerID)

	// 3. –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º —Å–µ–±—è –∫–∞–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	fmt.Println("\n3Ô∏è‚É£ –ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
	testContentID := "test-content-123"
	contentIDC := C.CString(testContentID)
	defer C.free(unsafe.Pointer(contentIDC))

	success := C.ProvideContent(contentIDC)
	if success == 1 {
		fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç: %s\n", testContentID)
	} else {
		fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç: %s\n", testContentID)
	}

	// 4. –ò—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	fmt.Println("\n4Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
	providers := C.FindProvidersForContent(contentIDC)
	if providers == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
	} else {
		providersStr := C.GoString(providers)
		if providersStr == "" {
			fmt.Println("‚ÑπÔ∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞)")
		} else {
			fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: %s\n", providersStr)
		}
		C.FreeString(providers)
	}

	// 5. –ò—â–µ–º –ø–∏—Ä–∞ –ø–æ Peer ID
	fmt.Println("\n5Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–∏—Ä–∞ –ø–æ Peer ID...")
	peerIDC := C.CString(myPeerIDStr)
	defer C.free(unsafe.Pointer(peerIDC))

	peerInfo := C.FindPeer(peerIDC)
	if peerInfo == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∏—Ä–∞")
	} else {
		peerInfoStr := C.GoString(peerInfo)
		if peerInfoStr == "" {
			fmt.Println("‚ÑπÔ∏è –ü–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DHT (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ä–∞)")
		} else {
			fmt.Printf("‚úÖ –ü–∏—Ä –Ω–∞–π–¥–µ–Ω: %s\n", peerInfoStr)
		}
		C.FreeString(peerInfo)
	}

	// 6. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏
	fmt.Println("\n6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏...")
	networkStats := C.GetNetworkStats()
	if networkStats == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏")
	} else {
		statsStr := C.GoString(networkStats)
		fmt.Printf("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏: %s\n", statsStr)
		C.FreeString(networkStats)
	}

	// 7. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Core
	fmt.Println("\n7Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Core...")
	stopResult := C.StopOwlWhisper()
	if stopResult != 1 {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Core")
		return
	}
	fmt.Println("‚úÖ Core —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

	fmt.Println("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println(strings.Repeat("=", 60))
}
