package main

import (
	"fmt"
	"time"
)

// #cgo CFLAGS: -I../../internal/core
// #cgo LDFLAGS: -L../../dist -lowlwhisper
// #include "owlwhisper.h"
import "C"

func main() {
	fmt.Println("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é")
	fmt.Println("==============================================")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
	fmt.Println("üîá –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏...")
	C.SetLogLevel(0) // SILENT

	// –ó–∞–ø—É—Å–∫–∞–µ–º
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫...")
	result := C.StartOwlWhisper()
	if result == 0 {
		fmt.Println("‚úÖ Owl Whisper –∑–∞–ø—É—â–µ–Ω")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞")
		return
	}

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
	time.Sleep(2 * time.Second)

	// –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
	fmt.Println("\nüë§ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å...")
	profile1 := C.GetMyProfile()
	if profile1 != nil {
		goProfile1 := C.GoString(profile1)
		fmt.Printf("   –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: %s\n", goProfile1)
		C.FreeString(profile1)
	}

	// –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
	fmt.Println("\nüìù –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å...")
	testNickname := C.CString("TestUser123")
	result = C.UpdateMyProfile(testNickname)
	if result == 0 {
		fmt.Println("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
	}

	// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
	fmt.Println("\nüë§ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å...")
	profile2 := C.GetMyProfile()
	if profile2 != nil {
		goProfile2 := C.GoString(profile2)
		fmt.Printf("   –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: %s\n", goProfile2)
		C.FreeString(profile2)
	}

	// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º GetConnectionStatus
	fmt.Println("\nüåê –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
	status := C.GetConnectionStatus()
	if status != nil {
		goStatus := C.GoString(status)
		fmt.Printf("   –°—Ç–∞—Ç—É—Å: %s\n", goStatus)
		C.FreeString(status)
	}

	// –¢–µ—Å—Ç 5: –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ FreeString (—Ç–µ—Å—Ç –Ω–∞ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏)
	fmt.Println("\nüîÑ –¢–µ—Å—Ç 5: –ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é...")
	for i := 0; i < 100; i++ {
		profile := C.GetMyProfile()
		if profile != nil {
			C.FreeString(profile)
		}
		
		peers := C.GetPeers()
		if peers != nil {
			C.FreeString(peers)
		}
		
		connStatus := C.GetConnectionStatus()
		if connStatus != nil {
			C.FreeString(connStatus)
		}
		
		if i%20 == 0 {
			fmt.Printf("   –ü—Ä–æ–≥—Ä–µ—Å—Å: %d/100\n", i)
		}
	}
	fmt.Println("‚úÖ –ú–∞—Å—Å–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫")

	// –¢–µ—Å—Ç 6: –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
	fmt.Println("\nüë§ –¢–µ—Å—Ç 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...")
	finalProfile := C.GetMyProfile()
	if finalProfile != nil {
		goFinalProfile := C.GoString(finalProfile)
		fmt.Printf("   –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: %s\n", goFinalProfile)
		C.FreeString(finalProfile)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
	fmt.Println("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
	result = C.StopOwlWhisper()
	if result == 0 {
		fmt.Println("‚úÖ Owl Whisper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
	}

	fmt.Println("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
}