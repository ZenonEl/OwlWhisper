package main

import (
	"crypto/rand"
	"fmt"
	"time"
	"unsafe"

	"github.com/libp2p/go-libp2p/core/crypto"
)

// #cgo CFLAGS: -I../../internal/core
// #cgo LDFLAGS: -L../../dist -lowlwhisper
// #include "owlwhisper.h"
import "C"

func main() {
	fmt.Println("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—ä–µ–∫—Ü–∏—é –∫–ª—é—á–µ–π –≤ Core")
	fmt.Println("=====================================")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
	fmt.Println("üîá –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏...")
	C.SetLogLevel(0) // SILENT

	// –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
	fmt.Println("\nüîë –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞...")
	newPrivKey, _, err := crypto.GenerateKeyPairWithReader(crypto.Ed25519, 2048, rand.Reader)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: %v\n", err)
		return
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–ª—é—á –≤ –±–∞–π—Ç—ã
	keyBytes, err := crypto.MarshalPrivateKey(newPrivKey)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–∞: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —Ä–∞–∑–º–µ—Ä–æ–º %d –±–∞–π—Ç\n", len(keyBytes))

	// –¢–µ—Å—Ç 2: –ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
	fmt.Println("\nüöÄ –¢–µ—Å—Ç 2: –ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º...")
	result := C.StartOwlWhisperWithKey((*C.char)(unsafe.Pointer(&keyBytes[0])), C.int(len(keyBytes)))
	if result == 0 {
		fmt.Println("‚úÖ Owl Whisper –∑–∞–ø—É—â–µ–Ω —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å –∫–ª—é—á–æ–º")
		return
	}

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(2 * time.Second)

	// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Peer ID
	fmt.Println("\nüë§ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Peer ID...")
	peerID := C.GetMyPeerID()
	if peerID != nil {
		goPeerID := C.GoString(peerID)
		fmt.Printf("   Peer ID: %s\n", goPeerID)
		C.FreeString(peerID)
	}

	// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	fmt.Println("\nüåê –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
	status := C.GetConnectionStatus()
	if status != nil {
		goStatus := C.GoString(status)
		fmt.Printf("   –°—Ç–∞—Ç—É—Å: %s\n", goStatus)
		C.FreeString(status)
	}

	// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
	fmt.Println("\nüë§ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...")
	profile := C.GetMyProfile()
	if profile != nil {
		goProfile := C.GoString(profile)
		fmt.Printf("   –ü—Ä–æ—Ñ–∏–ª—å: %s\n", goProfile)
		C.FreeString(profile)
	}

	// –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
	fmt.Println("\nüìù –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...")
	testNickname := C.CString("KeyInjectionTest")
	result = C.UpdateMyProfile(testNickname)
	if result == 0 {
		fmt.Println("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
	}

	// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
	fmt.Println("\nüë§ –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
	updatedProfile := C.GetMyProfile()
	if updatedProfile != nil {
		goUpdatedProfile := C.GoString(updatedProfile)
		fmt.Printf("   –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: %s\n", goUpdatedProfile)
		C.FreeString(updatedProfile)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
	fmt.Println("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
	result = C.StopOwlWhisper()
	if result == 0 {
		fmt.Println("‚úÖ Owl Whisper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
	}

	fmt.Println("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
}
