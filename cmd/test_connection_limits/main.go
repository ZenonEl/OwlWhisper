package main

import (
	"C"
	"fmt"
	"time"
)

/*
#cgo CFLAGS: -I../../internal/core
#cgo LDFLAGS: -L../../dist -lowlwhisper
#include "owlwhisper.h"
#include <stdlib.h>
#include <string.h>
*/

func main() {
	fmt.Println("üîí –¢–ï–°–¢ –õ–ò–ú–ò–¢–û–í –°–û–ï–î–ò–ù–ï–ù–ò–ô")
	fmt.Println("============================")

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
	fmt.Println("\nüîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á...")
	keyBytes := C.GenerateNewKeyBytes()
	if keyBytes == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á")
		return
	}
	defer C.FreeString(keyBytes)

	keyStr := C.GoString(keyBytes)
	fmt.Printf("‚úÖ –ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: %d –±–∞–π—Ç\n", len(keyStr))

	// –ó–∞–ø—É—Å–∫–∞–µ–º OwlWhisper
	fmt.Println("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º OwlWhisper...")
	result := C.StartOwlWhisperWithKey(C.CString(keyStr), C.int(len(keyStr)))
	if result != 0 {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å OwlWhisper")
		return
	}
	fmt.Println("‚úÖ OwlWhisper –∑–∞–ø—É—â–µ–Ω")

	// –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏
	fmt.Println("\n‚è≥ –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏ (15 —Å–µ–∫—É–Ω–¥)...")
	time.Sleep(15 * time.Second)

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à PeerID
	fmt.Println("\nüë§ –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à PeerID...")
	myPeerID := C.GetMyPeerID()
	if myPeerID == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PeerID")
		return
	}
	defer C.FreeString(myPeerID)

	myID := C.GoString(myPeerID)
	fmt.Printf("‚úÖ –ù–∞—à PeerID: %s\n", myID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	fmt.Println("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
	limits := C.GetConnectionLimits()
	if limits != nil {
		limitsStr := C.GoString(limits)
		fmt.Printf("üìã –õ–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %s\n", limitsStr)
		C.FreeString(limits)
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
	fmt.Println("\nüîí –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤...")
	protectedPeers := C.GetProtectedPeers()
	if protectedPeers != nil {
		protectedStr := C.GoString(protectedPeers)
		fmt.Printf("üìã –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: %s\n", protectedStr)
		C.FreeString(protectedPeers)
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤")
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞
	fmt.Println("\nüîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞...")
	addResult := C.AddProtectedPeer(myPeerID)
	if addResult == 0 {
		fmt.Println("‚úÖ PeerID –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
		fmt.Println("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞...")
		limits = C.GetConnectionLimits()
		if limits != nil {
			limitsStr := C.GoString(limits)
			fmt.Printf("üìã –õ–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %s\n", limitsStr)
			C.FreeString(limits)
		}

		// –£–¥–∞–ª—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –ø–∏—Ä
		fmt.Println("\nüîì –£–¥–∞–ª—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –ø–∏—Ä...")
		removeResult := C.RemoveProtectedPeer(myPeerID)
		if removeResult == 0 {
			fmt.Println("‚úÖ PeerID —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö")

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
			fmt.Println("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞...")
			limits = C.GetConnectionLimits()
			if limits != nil {
				limitsStr := C.GoString(limits)
				fmt.Printf("üìã –õ–∏–º–∏—Ç—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %s\n", limitsStr)
				C.FreeString(limits)
			}
		} else {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –ø–∏—Ä")
		}
	} else {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å PeerID –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏
	fmt.Println("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏...")
	networkStats := C.GetNetworkStats()
	if networkStats != nil {
		statsStr := C.GoString(networkStats)
		fmt.Printf("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏: %s\n", statsStr)
		C.FreeString(networkStats)
	}

	fmt.Println("\nüéâ –¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
