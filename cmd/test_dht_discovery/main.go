package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"OwlWhisper/internal/core"
)

func main() {
	fmt.Println("üåê –¢–ï–°–¢: DHT Discovery –∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Ç—å")
	fmt.Println("==========================================")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-sigChan
		fmt.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
		cancel()
	}()

	// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç
	fmt.Println("\nüöÄ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç...")
	client1, err := core.NewCoreController(ctx)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç: %v", err)
	}
	defer client1.Stop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç
	if err := client1.Start(); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç: %v", err)
	}
	fmt.Printf("‚úÖ –ü–µ—Ä–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω —Å PeerID: %s\n", client1.GetMyID())

	// –ñ–¥–µ–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bootstrap —É–∑–ª–∞–º
	fmt.Println("\n‚è≥ –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bootstrap —É–∑–ª–∞–º DHT...")
	time.Sleep(10 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å DHT
	fmt.Println("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å DHT...")
	peers1 := client1.GetPeers()
	fmt.Printf("üîç –ö–ª–∏–µ–Ω—Ç 1 –≤–∏–¥–∏—Ç %d –ø–∏—Ä–æ–≤ –≤ DHT: %v\n", len(peers1), peers1)

	// –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç
	fmt.Println("\nüöÄ –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç...")
	client2, err := core.NewCoreController(ctx)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç: %v", err)
	}
	defer client2.Stop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç
	if err := client2.Start(); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç: %v", err)
	}
	fmt.Printf("‚úÖ –í—Ç–æ—Ä–æ–π –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω —Å PeerID: %s\n", client2.GetMyID())

	// –ñ–¥–µ–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bootstrap —É–∑–ª–∞–º
	fmt.Println("\n‚è≥ –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫ bootstrap —É–∑–ª–∞–º...")
	time.Sleep(10 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å DHT –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	peers2 := client2.GetPeers()
	fmt.Printf("üîç –ö–ª–∏–µ–Ω—Ç 2 –≤–∏–¥–∏—Ç %d –ø–∏—Ä–æ–≤ –≤ DHT: %v\n", len(peers2), peers2)

	// –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ DHT
	fmt.Println("\nüîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ DHT...")

	// –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ DHT
	time.Sleep(15 * time.Second)

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
	fmt.Println("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ DHT...")
	peers1Final := client1.GetPeers()
	peers2Final := client2.GetPeers()

	fmt.Printf("üîç –ö–ª–∏–µ–Ω—Ç 1: %d –ø–∏—Ä–æ–≤ –≤ DHT\n", len(peers1Final))
	fmt.Printf("üîç –ö–ª–∏–µ–Ω—Ç 2: %d –ø–∏—Ä–æ–≤ –≤ DHT\n", len(peers2Final))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥—è—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞
	client1ID := client1.GetMyID()
	client2ID := client2.GetMyID()

	client1SeesClient2 := false
	client2SeesClient1 := false

	for _, peer := range peers1Final {
		if peer.String() == client2ID {
			client1SeesClient2 = true
			break
		}
	}

	for _, peer := range peers2Final {
		if peer.String() == client1ID {
			client2SeesClient1 = true
			break
		}
	}

	fmt.Printf("\nüîó –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DHT:\n")
	fmt.Printf("   –ö–ª–∏–µ–Ω—Ç 1 –≤–∏–¥–∏—Ç –ö–ª–∏–µ–Ω—Ç 2: %t\n", client1SeesClient2)
	fmt.Printf("   –ö–ª–∏–µ–Ω—Ç 2 –≤–∏–¥–∏—Ç –ö–ª–∏–µ–Ω—Ç 1: %t\n", client2SeesClient1)

	if client1SeesClient2 && client2SeesClient1 {
		fmt.Println("\nüéâ –£–°–ü–ï–•! –û–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ DHT!")
	} else if len(peers1Final) > 0 || len(peers2Final) > 0 {
		fmt.Println("\n‚úÖ –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•! DHT —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞")
		fmt.Println("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö DHT —Å–µ—Ç–∏")
	} else {
		fmt.Println("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: DHT –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bootstrap —É–∑–ª–∞–º")
	}

	fmt.Println("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
	fmt.Println("üí° –ï—Å–ª–∏ DHT —Ä–∞–±–æ—Ç–∞–µ—Ç - –∑–Ω–∞—á–∏—Ç –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
}
