package main

import (
	"C"
	"fmt"
	"time"
)

/*
#cgo CFLAGS: -I../../internal/core
#cgo LDFLAGS: -L../../dist -lowlwhisper
#include "owlwhisper.h"
#include <stdlib.h>
#include <string.h>
*/

func main() {
	fmt.Println("üîí –¢–ï–°–¢ –ó–ê–©–ò–©–ï–ù–ù–´–• –ü–ò–†–û–í")
	fmt.Println("==========================")

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
	fmt.Println("\nüîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á...")
	keyBytes := C.GenerateNewKeyBytes()
	if keyBytes == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á")
		return
	}
	defer C.FreeString(keyBytes)

	keyStr := C.GoString(keyBytes)
	fmt.Printf("‚úÖ –ö–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: %d –±–∞–π—Ç\n", len(keyStr))

	// –ó–∞–ø—É—Å–∫–∞–µ–º OwlWhisper
	fmt.Println("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º OwlWhisper...")
	result := C.StartOwlWhisperWithKey(C.CString(keyStr), C.int(len(keyStr)))
	if result != 0 {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å OwlWhisper")
		return
	}
	fmt.Println("‚úÖ OwlWhisper –∑–∞–ø—É—â–µ–Ω")

	// –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏
	fmt.Println("\n‚è≥ –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏ (15 —Å–µ–∫—É–Ω–¥)...")
	time.Sleep(15 * time.Second)

	// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à PeerID
	fmt.Println("\nüë§ –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à PeerID...")
	myPeerID := C.GetMyPeerID()
	if myPeerID == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PeerID")
		return
	}
	defer C.FreeString(myPeerID)

	myID := C.GoString(myPeerID)
	fmt.Printf("‚úÖ –ù–∞—à PeerID: %s\n", myID)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
	fmt.Println("\nüîí –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤...")
	protectedPeers := C.GetProtectedPeers()
	if protectedPeers == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤")
		return
	}
	defer C.FreeString(protectedPeers)

	protectedList := C.GoString(protectedPeers)
	fmt.Printf("üìã –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: %s\n", protectedList)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—à PeerID –∑–∞—â–∏—â–µ–Ω–Ω—ã–º (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å false)
	fmt.Println("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—â–∏—â–µ–Ω –ª–∏ –Ω–∞—à PeerID...")
	isProtected := C.IsProtectedPeer(C.CString(myID))
	if isProtected == 1 {
		fmt.Println("‚ùå –ù–∞—à PeerID –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º")
	} else {
		fmt.Println("‚úÖ –ù–∞—à PeerID –Ω–µ –∑–∞—â–∏—â–µ–Ω (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à PeerID –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ (—Ç–µ—Å—Ç)
	fmt.Println("\nüîí –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à PeerID –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ...")
	addResult := C.AddProtectedPeer(C.CString(myID))
	if addResult != 0 {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å PeerID –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ")
	} else {
		fmt.Println("‚úÖ PeerID –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
	fmt.Println("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã...")
	isProtected = C.IsProtectedPeer(C.CString(myID))
	if isProtected == 1 {
		fmt.Println("‚úÖ PeerID —Ç–µ–ø–µ—Ä—å –∑–∞—â–∏—â–µ–Ω")
	} else {
		fmt.Println("‚ùå PeerID –Ω–µ –∑–∞—â–∏—â–µ–Ω –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
	fmt.Println("\nüìã –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤...")
	protectedPeers = C.GetProtectedPeers()
	if protectedPeers == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫")
		return
	}
	defer C.FreeString(protectedPeers)

	protectedList = C.GoString(protectedPeers)
	fmt.Printf("üìã –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: %s\n", protectedList)

	// –£–¥–∞–ª—è–µ–º PeerID –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö
	fmt.Println("\nüîì –£–¥–∞–ª—è–µ–º PeerID –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö...")
	removeResult := C.RemoveProtectedPeer(C.CString(myID))
	if removeResult != 0 {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å PeerID –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö")
	} else {
		fmt.Println("‚úÖ PeerID —É–¥–∞–ª–µ–Ω –∏–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö")
	}

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
	fmt.Println("\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
	isProtected = C.IsProtectedPeer(C.CString(myID))
	if isProtected == 1 {
		fmt.Println("‚ùå PeerID –≤—Å–µ –µ—â–µ –∑–∞—â–∏—â–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
	} else {
		fmt.Println("‚úÖ PeerID –±–æ–ª—å—à–µ –Ω–µ –∑–∞—â–∏—â–µ–Ω")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
	fmt.Println("\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤...")
	protectedPeers = C.GetProtectedPeers()
	if protectedPeers == nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫")
		return
	}
	defer C.FreeString(protectedPeers)

	protectedList = C.GoString(protectedPeers)
	fmt.Printf("üìã –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: %s\n", protectedList)

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OwlWhisper
	fmt.Println("\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OwlWhisper...")
	C.StopOwlWhisper()
	fmt.Println("‚úÖ OwlWhisper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

	fmt.Println("\nüéâ –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
