package main

/*
#cgo CFLAGS: -I../../internal/core
#cgo LDFLAGS: -L../../dist -lowlwhisper
#include "owlwhisper.h"
#include <stdlib.h>
*/
import "C"
import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"unsafe"
)

func main() {
	fmt.Println("üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª—é—á–µ–π –≤ Core")
	fmt.Println("=====================================")

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
	fmt.Println("üîá –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏...")
	C.SetLogLevel(0) // SILENT

	// –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã –∫–ª—é—á–µ–π
	fmt.Println("\nüîë –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –ø–∞—Ä—ã –∫–ª—é—á–µ–π...")
	keyPairData := C.GenerateNewKeyPair()
	if keyPairData == nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	goKeyData := C.GoString(keyPairData)
	fmt.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞: %s\n", goKeyData[:50]+"...")

	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
	C.FreeString(keyPairData)

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
	jsonBytes, err := base64.StdEncoding.DecodeString(goKeyData)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: %v\n", err)
		return
	}

	// –ü–∞—Ä—Å–∏–º JSON
	var keyInfo map[string]interface{}
	err = json.Unmarshal(jsonBytes, &keyInfo)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v\n", err)
		return
	}

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
	fmt.Println("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–ª—é—á–µ:")
	fmt.Printf("   –¢–∏–ø –∫–ª—é—á–∞: %v\n", keyInfo["key_type"])
	fmt.Printf("   –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: %v –±–∞–π—Ç\n", keyInfo["key_length"])
	fmt.Printf("   Peer ID: %v\n", keyInfo["peer_id"])

	// –¢–µ—Å—Ç 2: –ó–∞–ø—É—Å–∫ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
	fmt.Println("\nüöÄ –¢–µ—Å—Ç 2: –ó–∞–ø—É—Å–∫ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º...")
	
	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ JSON (–æ–Ω –≤ base64)
	privateKeyBase64 := keyInfo["private_key"].(string)
	privateKeyBytes, err := base64.StdEncoding.DecodeString(privateKeyBase64)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: %v\n", err)
		return
	}
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∫–ª—é—á–æ–º
	result := C.StartOwlWhisperWithKey((*C.char)(unsafe.Pointer(&privateKeyBytes[0])), C.int(len(privateKeyBytes)))
	if result == 0 {
		fmt.Println("‚úÖ Owl Whisper –∑–∞–ø—É—â–µ–Ω —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º")
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º Peer ID
		peerID := C.GetMyPeerID()
		if peerID != nil {
			goPeerID := C.GoString(peerID)
			fmt.Printf("   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π Peer ID: %s\n", goPeerID)
			C.FreeString(peerID)
		}
		
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
		fmt.Println("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
		stopResult := C.StopOwlWhisper()
		if stopResult == 0 {
			fmt.Println("‚úÖ Owl Whisper –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		} else {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
		}
	} else {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º")
	}

	fmt.Println("\nüéâ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
} 