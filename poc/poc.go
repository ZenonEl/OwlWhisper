package main

import (
	"bufio"
	"context"
	"crypto/rand"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/crypto"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/routing"
	dutil "github.com/libp2p/go-libp2p/p2p/discovery/util"
	"github.com/libp2p/go-libp2p/p2p/host/autorelay"
	noise "github.com/libp2p/go-libp2p/p2p/security/noise"
	tls "github.com/libp2p/go-libp2p/p2p/security/tls"

	// –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
	quic "github.com/libp2p/go-libp2p/p2p/transport/quic"
	tcp "github.com/libp2p/go-libp2p/p2p/transport/tcp"
	webrtc "github.com/libp2p/go-libp2p/p2p/transport/webrtc"
	ws "github.com/libp2p/go-libp2p/p2p/transport/websocket"
)

const protocolID = "/p2p-chat/1.0.0"

func main() {
	rendezvous := flag.String("rendezvous", "my-super-secret-rendezvous-point", "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤")
	discoverMode := flag.Bool("discover", false, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤")
	flag.Parse()

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	priv, _, err := crypto.GenerateKeyPairWithReader(crypto.RSA, 2048, rand.Reader)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: %v", err)
	}

	// --- –°–±–æ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ Relay-—É–∑–ª–æ–≤ ---
	// –ù–∞—à–∏ "—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∫—Ä—É–≥–∏" - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–ª–µ–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö.
	staticRelaysStrings := []string{
		"/dns4/relay.dev.svcs.d.foundation/tcp/443/wss/p2p/12D3KooWCKd2fU1g4k15u3J5i6pGk26h3g68d3amEa2S71G5v1jS",
	}

	var allRelays []peer.AddrInfo
	for _, addrStr := range staticRelaysStrings {
		pi, err := peer.AddrInfoFromString(addrStr)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π relay-–∞–¥—Ä–µ—Å: %v", err)
			continue
		}
		allRelays = append(allRelays, *pi)
	}

	// –ò–°–ü–û–õ–¨–ó–£–ï–ú –õ–ò–ë–£, –ß–¢–û–ë–´ –ü–û–õ–£–ß–ò–¢–¨ –°–ü–ò–°–û–ö BOOTSTRAP-–£–ó–õ–û–í.
	// –û–Ω–∏ —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤ —Ä–æ–ª–∏ —Ä–µ–ª–µ–µ–≤.
	bootstrapPeers := dht.GetDefaultBootstrapPeerAddrInfos()
	allRelays = append(allRelays, bootstrapPeers...)

	log.Printf("üîó –í—Å–µ–≥–æ relay-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: %d (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ: %d + bootstrap: %d)",
		len(allRelays), len(staticRelaysStrings), len(bootstrapPeers))

	var kademliaDHT *dht.IpfsDHT

	// --- "–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è" –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö–æ—Å—Ç–∞ ---
	node, err := libp2p.New(
		libp2p.Identity(priv),
		libp2p.ListenAddrStrings(
			"/ip4/0.0.0.0/tcp/0",
			"/ip4/0.0.0.0/tcp/0/ws",
			"/ip4/0.0.0.0/udp/0/quic-v1",
			"/ip4/0.0.0.0/udp/0/webrtc-direct",
		),
		// –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
		libp2p.Transport(tcp.NewTCPTransport),
		libp2p.Transport(quic.NewTransport),
		libp2p.Transport(ws.New),
		libp2p.Transport(webrtc.New),
		// –î–≤–æ–π–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
		libp2p.Security(noise.ID, noise.New),
		libp2p.Security(tls.ID, tls.New),
		// –í—Å–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±—Ö–æ–¥–∞ NAT
		libp2p.NATPortMap(),
		libp2p.EnableHolePunching(),
		libp2p.EnableAutoNATv2(),
		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Relay
		libp2p.EnableRelay(),
		// –£–∑–µ–ª —Å–∞–º –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–ª–µ–π, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç, —á—Ç–æ –æ–Ω –∑–∞ NAT
		libp2p.EnableAutoRelayWithStaticRelays(allRelays),
		libp2p.EnableAutoRelayWithPeerSource(func(ctx context.Context, numPeers int) <-chan peer.AddrInfo {
			ch := make(chan peer.AddrInfo)
			go func() {
				defer close(ch)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ DHT
				if kademliaDHT == nil {
					return
				}

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º routing table —Å–∞–º–æ–≥–æ DHT –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ä–æ–≤.
				for _, pi := range kademliaDHT.RoutingTable().ListPeers() {
					if numPeers <= 0 {
						break
					}
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∞–¥—Ä–µ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏—Ä–∞
					addrs := kademliaDHT.Host().Peerstore().Addrs(pi)
					if len(addrs) > 0 {
						ch <- peer.AddrInfo{ID: pi, Addrs: addrs}
						numPeers--
					}
				}
			}()
			return ch
		},
			autorelay.WithBootDelay(2*time.Second), // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
			autorelay.WithMaxCandidates(10),        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
		),
	)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞: %v", err)
	}
	defer node.Close()

	log.Printf("[*] ID –Ω–∞—à–µ–≥–æ —É–∑–ª–∞: %s", node.ID())
	log.Println("[*] –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞:")
	for _, addr := range node.Addrs() {
		fmt.Printf("    - %s\n", addr)
	}
	fmt.Println()

	// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DHT –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è ---
	log.Println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DHT...")
	kademliaDHT, err = dht.New(ctx, node, dht.Mode(dht.ModeServer))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DHT: %v", err)
	}
	if err = kademliaDHT.Bootstrap(ctx); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ bootstrap DHT: %v", err)
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ bootstrap-–ø–∏—Ä–∞–º –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
	var wg sync.WaitGroup
	for _, peerAddr := range bootstrapPeers {
		wg.Add(1)
		go func(pi peer.AddrInfo) {
			defer wg.Done()
			ctxConnect, cancelConnect := context.WithTimeout(ctx, 15*time.Second)
			defer cancelConnect()
			if err := node.Connect(ctxConnect, pi); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap-–ø–∏—Ä—É %s: %s", pi.ID.ShortString(), err)
			} else {
				log.Printf("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap-–ø–∏—Ä—É: %s", pi.ID.ShortString())
			}
		}(peerAddr)
	}
	wg.Wait()

	// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: "–°–ª—É—à–∞—Ç–µ–ª—å" –∏–ª–∏ "–ò—Å–∫–∞—Ç–µ–ª—å" ---
	node.SetStreamHandler(protocolID, handleStream)
	routingDiscovery := routing.NewRoutingDiscovery(kademliaDHT)

	if !*discoverMode {
		// –†–µ–∂–∏–º "–°–ª—É—à–∞—Ç–µ–ª—è": –∞–Ω–æ–Ω—Å–∏—Ä—É–µ–º —Å–µ–±—è –≤ DHT
		log.Printf("–ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º —Å–µ–±—è –ø–æ rendezvous-—Å—Ç—Ä–æ–∫–µ: %s", *rendezvous)

		// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ relay-–∞–¥—Ä–µ—Å–æ–≤
		go func() {
			for {
				select {
				case <-ctx.Done():
					return
				default:
					dutil.Advertise(ctx, routingDiscovery, *rendezvous)
					log.Printf("üîÑ –ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ DHT: %s", *rendezvous)
					time.Sleep(15 * time.Second) // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
				}
			}
		}()

		log.Println("–£—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
	} else {
		// –†–µ–∂–∏–º "–ò—Å–∫–∞—Ç–µ–ª—è": –∏—â–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–∏—Ä–∞–º
		log.Printf("–ò—â–µ–º –ø–∏—Ä–æ–≤ –ø–æ rendezvous-—Å—Ç—Ä–æ–∫–µ: %s", *rendezvous)

		// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∏—Ä–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
		go func() {
			for {
				select {
				case <-ctx.Done():
					return
				default:
					peerChan, err := routingDiscovery.FindPeers(ctx, *rendezvous)
					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤: %v", err)
						time.Sleep(10 * time.Second)
						continue
					}

					for p := range peerChan {
						if p.ID == node.ID() {
							continue
						}
						log.Printf("–ù–∞–π–¥–µ–Ω –ø–∏—Ä: %s. –ê–¥—Ä–µ—Å–∞: %v", p.ID, p.Addrs)

						// --- –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ---
						// –ú—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º Connect –∏ –¥–æ–≤–µ—Ä—è–µ–º libp2p —Å–¥–µ–ª–∞—Ç—å –≤—Å—é –º–∞–≥–∏—é:
						// –æ–Ω —Å–∞–º –ø–æ–ø—Ä–æ–±—É–µ—Ç –ø—Ä—è–º—ã–µ –∞–¥—Ä–µ—Å–∞, —Å–∞–º —Å–¥–µ–ª–∞–µ—Ç hole punching,
						// —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç relay-–∞–¥—Ä–µ—Å (–µ—Å–ª–∏ "–°–ª—É—à–∞—Ç–µ–ª—å" —Å–º–æ–≥ –µ–≥–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å).
						// –î–∞–µ–º –µ–º—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, —Ç.–∫. relay –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º.
						ctxConnect, cancelConnect := context.WithTimeout(ctx, 90*time.Second)
						if err := node.Connect(ctxConnect, p); err != nil {
							log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", p.ID.ShortString(), err)
							cancelConnect()
							continue
						}
						cancelConnect()

						log.Printf("‚úÖ –£–°–ü–ï–®–ù–û–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï —Å %s!", p.ID.ShortString())
						log.Printf("   üîç –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º: %s", protocolID)

						// --- –í–û–¢ –û–ù–û, –†–ï–®–ï–ù–ò–ï ---
						// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∏–º–∞.
						// 30 —Å–µ–∫—É–Ω–¥ - —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π, –Ω–∞–¥–µ–∂–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.
						streamCtx, streamCancel := context.WithTimeout(ctx, 60*time.Second)
						stream, err := node.NewStream(streamCtx, p.ID, protocolID)
						streamCancel() // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–º–µ–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç

						if err != nil {
							log.Printf("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∏–º: %v", err)
							continue
						}

						log.Printf("   ‚úÖ –°—Ç—Ä–∏–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑: %s", stream.Conn().RemoteMultiaddr())
						log.Println("üéâ –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç!")
						runChat(stream, node)
						// –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ —á–∞—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
						// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥—Ä—É–≥–∞—è –ª–æ–≥–∏–∫–∞.
						return
					}

					time.Sleep(15 * time.Second) // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
				}
			}
		}()

		log.Println("–ü–æ–∏—Å–∫ –ø–∏—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ...")
	}

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)
	<-ch
	fmt.Println("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–∑–µ–ª...")
}

func handleStream(stream network.Stream) {
	remotePeer := stream.Conn().RemotePeer()
	log.Printf("üì° –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º –æ—Ç %s", remotePeer.ShortString())
	runChat(stream, nil)
}

func runChat(stream network.Stream, node host.Host) {
	// –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏
	reader := bufio.NewReader(stream)
	writer := bufio.NewWriter(stream)

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≥–æ—Ä—É—Ç–∏–Ω
	// out: –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ stdin –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ—Ç—å
	// done: –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
	out := make(chan string)
	done := make(chan struct{})

	// --- –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ —Å–µ—Ç–∏ –∏ –≤—ã–≤–æ–¥–∞ –≤ stdout ---
	go func() {
		defer close(done)
		for {
			str, err := reader.ReadString('\n')
			if err != nil {
				if err != io.EOF {
					log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç %s: %v", stream.Conn().RemotePeer().ShortString(), err)
				}
				return
			}
			fmt.Printf("\x1b[32m%s\x1b[0m> %s", stream.Conn().RemotePeer().ShortString(), str)
		}
	}()

	// --- –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Ç—å ---
	go func() {
		for {
			select {
			case <-done:
				return
			case msg := <-out:
				_, err := writer.WriteString(msg)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è %s: %v", stream.Conn().RemotePeer().ShortString(), err)
					return
				}
				err = writer.Flush()
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ flush –¥–ª—è %s: %v", stream.Conn().RemotePeer().ShortString(), err)
					return
				}
			}
		}
	}()

	// --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: —á—Ç–µ–Ω–∏–µ –∏–∑ stdin –≤ —Ç–µ–∫—É—â–µ–π –≥–æ—Ä—É—Ç–∏–Ω–µ ---
	stdReader := bufio.NewReader(os.Stdin)
	for {
		select {
		case <-done:
			log.Println("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
			return
		default:
			fmt.Print("> ")
			sendData, err := stdReader.ReadString('\n')
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è stdin: %v", err)
				return
			}
			out <- sendData
		}
	}
}
