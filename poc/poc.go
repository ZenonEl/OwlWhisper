package main

import (
	"bufio"
	"context"
	"crypto/rand"
	"errors"
	"flag"
	"fmt"
	"io"
	"log"
	"math"
	mrand "math/rand" // –ê–ª–∏–∞—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å crypto/rand
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/crypto"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	pstore "github.com/libp2p/go-libp2p/core/peerstore"
	"github.com/libp2p/go-libp2p/core/protocol"
	drouting "github.com/libp2p/go-libp2p/p2p/discovery/routing"
	dutil "github.com/libp2p/go-libp2p/p2p/discovery/util"
	"github.com/libp2p/go-libp2p/p2p/host/autorelay"
	noise "github.com/libp2p/go-libp2p/p2p/security/noise"
	tls "github.com/libp2p/go-libp2p/p2p/security/tls"

	// –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
	quic "github.com/libp2p/go-libp2p/p2p/transport/quic"
	tcp "github.com/libp2p/go-libp2p/p2p/transport/tcp"
	webrtc "github.com/libp2p/go-libp2p/p2p/transport/webrtc"
	ws "github.com/libp2p/go-libp2p/p2p/transport/websocket"

	"github.com/multiformats/go-multiaddr"
)

const protocolID = "/p2p-chat/1.0.0"

func dhtPeerSource(ctx context.Context, numPeers int) <-chan peer.AddrInfo {

	ch := make(chan peer.AddrInfo)

	go func() {

		defer close(ch)

		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ DHT –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–∏—Ä—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–ª–µ–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–µ–ª–µ–µ–≤
		staticRelays := []string{
			"/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN",
			"/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa",
			"/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb",
			"/dnsaddr/bootstrap.libp2p.io/p2p/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ",
		}

		for _, relayStr := range staticRelays {
			if numPeers <= 0 {
				break
			}

			pi, err := peer.AddrInfoFromString(relayStr)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ relay –∞–¥—Ä–µ—Å–∞ %s: %v", relayStr, err)
				continue
			}

			ch <- *pi
			numPeers--
		}

	}()

	return ch

}
func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è jitter
	mrand.Seed(time.Now().UnixNano())

	rendezvous := flag.String("rendezvous", "my-super-secret-rendezvous-point", "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤")
	discoverMode := flag.Bool("discover", false, "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤")
	flag.Parse()

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
	priv, _, err := crypto.GenerateKeyPairWithReader(crypto.RSA, 2048, rand.Reader)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: %v", err)
	}

	relayAddrsStrings := []string{
		"/ip4/139.178.68.125/tcp/4001/p2p/12D3KooWL1V2Wp155eQtKork2S51RNCyX55K2iA6Ln52a83f23tt",
		"/dns4/relay.dev.svcs.d.foundation/tcp/443/wss/p2p/12D3KooWCKd2fU1g4k15u3J5i6pGk26h3g68d3amEa2S71G5v1jS",
	}
	var staticRelays []peer.AddrInfo
	for _, addrStr := range relayAddrsStrings {
		pi, err := peer.AddrInfoFromString(addrStr)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π relay-–∞–¥—Ä–µ—Å: %v", err)
			continue
		}
		staticRelays = append(staticRelays, *pi)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ NAT –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
	node, err := libp2p.New(
		libp2p.Identity(priv),
		libp2p.ListenAddrStrings(
			// –ù–ï–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–¥ –≤–µ–±-—Ç—Ä–∞—Ñ–∏–∫
			"/ip4/0.0.0.0/tcp/8080/ws", // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π HTTP (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç root)
			"/ip4/0.0.0.0/tcp/8443/ws", // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π HTTPS (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç root)
			"/ip4/0.0.0.0/tcp/8888/ws", // –ï—â–µ –æ–¥–∏–Ω –≤–µ–±-–ø–æ—Ä—Ç
			"/ip4/0.0.0.0/tcp/9000/ws", // –ò –µ—â–µ –æ–¥–∏–Ω
			// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä—Ç—ã –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
			"/ip4/0.0.0.0/tcp/0/ws",            // WebSocket –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—Ç—É
			"/ip4/0.0.0.0/tcp/0",               // TCP –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—Ç—É
			"/ip4/0.0.0.0/udp/0/quic-v1",       // QUIC –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—Ç—É
			"/ip4/0.0.0.0/udp/0/webrtc-direct", // WebRTC –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
		),
		libp2p.Transport(tcp.NewTCPTransport),
		libp2p.Transport(webrtc.New), // –î–æ–±–∞–≤–ª—è–µ–º WebRTC –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
		libp2p.Transport(ws.New),
		libp2p.Transport(quic.NewTransport),
		// –î–≤–æ–π–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: Noise (–ª—É—á—à–µ –¥–ª—è NAT) + TLS
		libp2p.Security(noise.ID, noise.New),
		libp2p.Security(tls.ID, tls.New),
		// –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ NAT
		libp2p.NATPortMap(),
		libp2p.EnableHolePunching(),
		libp2p.EnableAutoNATv2(),
		libp2p.EnableNATService(),
		// Relay –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∞–µ–º –¥–ª—è –º–µ–∂—Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
		libp2p.EnableRelay(),        // allow using relays
		libp2p.EnableRelayService(), // only if you want to act as relay (requires extra perms)
		libp2p.EnableAutoRelayWithPeerSource(dhtPeerSource, autorelay.WithBootDelay(5*time.Second)), // –£–º–µ–Ω—å—à–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É
		//libp2p.EnableAutoRelayWithStaticRelays(staticRelays),
		// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º relay –¥–ª—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
		libp2p.ForceReachabilityPublic(),
	)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞: %v", err)
	}
	defer node.Close()

	fmt.Printf("[*] ID –Ω–∞—à–µ–≥–æ —É–∑–ª–∞: %s\n", node.ID())
	fmt.Println("[*] –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞:")
	for _, addr := range node.Addrs() {
		fmt.Printf("    - %s/p2p/%s\n", addr, node.ID())
	}
	fmt.Println()

	// –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥—Ä–µ—Å–∞—Ö
	fmt.Println("[*] –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥—Ä–µ—Å–∞—Ö:")
	for _, addr := range node.Addrs() {
		protocols := addr.Protocols()
		fmt.Printf("    %s:\n", addr)
		fmt.Printf("      - –ü—Ä–æ—Ç–æ–∫–æ–ª—ã: %v\n", protocols)
		fmt.Printf("      - IP: %s\n", addr.String())
	}
	fmt.Println()

	// Stream handler
	log.Printf("üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º stream handler –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: %s", protocolID)
	node.SetStreamHandler(protocolID, handleStream)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
	handlers := node.Mux().Protocols()
	log.Printf("üîß –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã: %v", handlers)

	// üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ hole punching
	// üîß –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ hole punching
	var globalRoutingDiscovery *drouting.RoutingDiscovery

	setupConnectionNotifier := func() {
		node.Network().Notify(&network.NotifyBundle{
			ConnectedF: func(n network.Network, conn network.Conn) {

				// üîÑ –ê–ö–¢–ò–í–ù–û –∞–Ω–æ–Ω—Å–∏—Ä—É–µ–º —Å–µ–±—è –∫–æ–≥–¥–∞ –≤–∏–¥–∏–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
				go func() {
					for i := 0; i < 5; i++ { // 5 –ø–æ–ø—ã—Ç–æ–∫
						select {
						case <-ctx.Done():
							return
						default:
							// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é routingDiscovery
							if globalRoutingDiscovery != nil {
								dutil.Advertise(ctx, globalRoutingDiscovery, *rendezvous)
							}
							time.Sleep(2 * time.Second)
						}
					}
				}()

				// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π hole punching
				go bidirectionalHolePunch(ctx, node, conn.RemotePeer())
			},
			DisconnectedF: func(n network.Network, conn network.Conn) {
			},
		})
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º setup –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è DHT
	setupConnectionNotifier()

	// DHT
	log.Println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DHT...")
	kademliaDHT, err := dht.New(ctx, node, dht.Mode(dht.ModeServer))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DHT: %v", err)
	}
	if err = kademliaDHT.Bootstrap(ctx); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ bootstrap DHT: %v", err)
	}

	// Connect to bootstrap peers
	var wg sync.WaitGroup
	for _, peerAddr := range dht.DefaultBootstrapPeers {
		pi, err := peer.AddrInfoFromString(peerAddr.String())
		if err != nil {
			log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç bootstrap-–∞–¥—Ä–µ—Å–∞ %s: %v", peerAddr, err)
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–∏—Ä
		}
		wg.Add(1)
		go func(pi peer.AddrInfo) {
			defer wg.Done()
			ctxConnect, cancelConnect := context.WithTimeout(ctx, 10*time.Second)
			defer cancelConnect()
			if err := node.Connect(ctxConnect, pi); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap-–ø–∏—Ä—É %s: %s", pi.ID, err)
			} else {
				log.Printf("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap-–ø–∏—Ä—É: %s", pi.ID)
			}
		}(*pi)
	}
	wg.Wait()

	routingDiscovery := drouting.NewRoutingDiscovery(kademliaDHT)
	globalRoutingDiscovery = routingDiscovery // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

	if !*discoverMode {
		log.Printf("–ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º —Å–µ–±—è –ø–æ rendezvous-—Å—Ç—Ä–æ–∫–µ: %s", *rendezvous)

		// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
		go func() {
			for {
				select {
				case <-ctx.Done():
					return
				default:
					dutil.Advertise(ctx, routingDiscovery, *rendezvous)
					log.Printf("–ê–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ DHT: %s", *rendezvous)
					time.Sleep(30 * time.Second) // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
				}
			}
		}()

		log.Println("–£—Å–ø–µ—à–Ω–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
	} else {
		log.Printf("–ò—â–µ–º –ø–∏—Ä–æ–≤ –ø–æ rendezvous-—Å—Ç—Ä–æ–∫–µ: %s", *rendezvous)

		// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∏—Ä–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏
		go func() {
			for {
				select {
				case <-ctx.Done():
					return
				default:
					peerChan, err := routingDiscovery.FindPeers(ctx, *rendezvous)
					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Ä–æ–≤: %v", err)
						time.Sleep(10 * time.Second)
						continue
					}

					// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Ä–æ–≤
					for p := range peerChan {
						if p.ID == node.ID() {
							continue
						}
						log.Printf("–ù–∞–π–¥–µ–Ω –ø–∏—Ä: %s. –ê–¥—Ä–µ—Å–∞: %v", p.ID, p.Addrs)

						if err := tryConnect(ctx, node, kademliaDHT, p, relayAddrsStrings); err == nil {
							log.Printf("‚úÖ –£–°–ü–ï–®–ù–û–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï —Å %s! –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º...", p.ID)
							log.Printf("   üîç –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º: %s", protocolID)

							// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
							conns := node.Network().ConnsToPeer(p.ID)
							if len(conns) > 0 {
								workingConn := conns[0]
								log.Printf("   üîó –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑: %s", workingConn.RemoteMultiaddr())
							}

							// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
							var stream network.Stream
							var err error

							// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º –° –ü–†–û–¢–û–ö–û–õ–û–ú —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —É–∑–µ–ª
							log.Printf("   üîç –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º: %s", protocolID)

							// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
							log.Printf("   üîç –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º –Ω–∞–ø—Ä—è–º—É—é...")
							stream, err = node.NewStream(ctx, p.ID, protocol.ID(protocolID))
							if err != nil {
								log.Printf("‚ùå –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)
								log.Printf("   üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: %T: %v", err, err)

								// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º relay –¥–ª—è –º–µ–∂—Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
								log.Printf("   üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º relay –¥–ª—è –º–µ–∂—Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")

								// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º relay –¥–ª—è –º–µ–∂—Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
								stream, err = createStreamViaRelay(ctx, node, p.ID, protocolID, relayAddrsStrings)
								if err != nil {
									log.Printf("   ‚ùå Relay —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: %v", err)

									// –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π relay —á–µ—Ä–µ–∑ bootstrap
									log.Printf("   üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π relay —á–µ—Ä–µ–∑ bootstrap...")
									stream, err = forceRelayConnection(ctx, node, p.ID, protocolID)
									if err != nil {
										log.Printf("   ‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π relay —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: %v", err)
										continue
									}
									log.Printf("   ‚úÖ –°—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π relay!")
								} else {
									log.Printf("   ‚úÖ –°—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ relay!")
								}
							}

							log.Printf("‚úÖ –°—Ç—Ä–∏–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
							log.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %s", stream.Conn().LocalMultiaddr())
							log.Printf("   üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: %s", stream.Conn().RemoteMultiaddr())
							log.Printf("   üîí –ü—Ä–æ—Ç–æ–∫–æ–ª: %s", stream.Protocol())

							// –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è multistream negotiation
							log.Printf("   üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª: %s", protocolID)
							stream.SetProtocol(protocolID)

							// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
							if stream.Protocol() == protocolID {
								log.Printf("   ‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", stream.Protocol())
							} else {
								log.Printf("   ‚ö†Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–µ–∫—É—â–∏–π: %s", stream.Protocol())
							}

							log.Println("üéâ –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç!")
							runChat(stream)
							return
						}
					}

					time.Sleep(15 * time.Second) // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
				}
			}
		}()

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
		select {
		case <-ctx.Done():
			return
		}
	}

	ch := make(chan os.Signal, 1)
	signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)
	<-ch
	fmt.Println("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–∑–µ–ª...")
}

func handleStream(stream network.Stream) {
	remotePeer := stream.Conn().RemotePeer()
	remoteAddr := stream.Conn().RemoteMultiaddr()
	localAddr := stream.Conn().LocalMultiaddr()

	log.Printf("üì° –ù–û–í–´–ô –°–¢–†–ò–ú: –æ—Ç %s", remotePeer)
	log.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %s", localAddr)
	log.Printf("   üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: %s", remoteAddr)
	log.Printf("   üîí –ü—Ä–æ—Ç–æ–∫–æ–ª: %s", stream.Protocol())
	log.Printf("   üîß –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: %s", protocolID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç
	if stream.Protocol() == protocolID {
		log.Printf("   ‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —á–∞—Ç")
		runChat(stream)
	} else {
		log.Printf("   ‚ùå –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! –û–∂–∏–¥–∞–ª–∏: %s, –ø–æ–ª—É—á–∏–ª–∏: %s", protocolID, stream.Protocol())
		log.Printf("   üîß –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª...")

		// –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª
		stream.SetProtocol(protocolID)
		if stream.Protocol() == protocolID {
			log.Printf("   ‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —á–∞—Ç")
			runChat(stream)
		} else {
			log.Printf("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º")
			stream.Close()
		}
	}
}

func runChat(stream network.Stream) {
	reader := bufio.NewReader(stream)
	writer := bufio.NewWriter(stream)

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	go func() {
		for {
			str, err := reader.ReadString('\n')
			if err != nil {
				if err != io.EOF {
					log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç %s: %v", stream.Conn().RemotePeer(), err)
				}
				return
			}
			fmt.Printf("\x1b[32m%s\x1b[0m> %s", stream.Conn().RemotePeer().ShortString(), str)
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ stdin
	go func() {
		stdReader := bufio.NewReader(os.Stdin)
		for {
			fmt.Print("> ")
			sendData, err := stdReader.ReadString('\n')
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è stdin: %v", err)
				return
			}
			_, err = writer.WriteString(sendData)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è %s: %v", stream.Conn().RemotePeer(), err)
				return
			}
			err = writer.Flush()
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ flush –¥–ª—è %s: %v", stream.Conn().RemotePeer(), err)
				return
			}
		}
	}()
}

// ---------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ----------

func dialWithTimeout(ctx context.Context, node host.Host, pi peer.AddrInfo, t time.Duration) error {
	ctxd, cancel := context.WithTimeout(ctx, t)
	defer cancel()
	return node.Connect(ctxd, pi)
}

func refreshPeerAddrs(ctx context.Context, kademliaDHT *dht.IpfsDHT, p peer.AddrInfo) (peer.AddrInfo, error) {
	if kademliaDHT == nil {
		return p, errors.New("dht is nil")
	}
	return kademliaDHT.FindPeer(ctx, p.ID)
}

func tryConnect(ctx context.Context, node host.Host, kademliaDHT *dht.IpfsDHT, p peer.AddrInfo, relayAddrs []string) error {
	log.Printf("[connect] üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∏—Ä—É %s", p.ID)
	log.Printf("[connect] üìç –ê–¥—Ä–µ—Å–∞ –ø–∏—Ä–∞: %v", p.Addrs)

	// 0: –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ DHT
	ctxDHT, cancelDHT := context.WithTimeout(ctx, 5*time.Second)
	if pi, err := refreshPeerAddrs(ctxDHT, kademliaDHT, p); err == nil {
		log.Printf("[connect] ‚úÖ DHT –æ–±–Ω–æ–≤–∏–ª –∞–¥—Ä–µ—Å–∞: %v", pi.Addrs)
		p = pi
	} else {
		log.Printf("[connect] ‚ö†Ô∏è DHT –Ω–µ —Å–º–æ–≥ –æ–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å–∞: %v", err)
	}
	cancelDHT()

	// 1: –ü—Ä—è–º—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	for _, t := range []time.Duration{2 * time.Second, 5 * time.Second} {
		if err := dialWithTimeout(ctx, node, p, t); err == nil {
			log.Println("[connect] –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
			return nil
		} else {
			log.Printf("[connect] direct dial (%s) -> %v", t, err)
		}
	}

	// 2: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π Hole Punching —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
	if len(p.Addrs) > 0 {
		node.Peerstore().AddAddrs(p.ID, p.Addrs, pstore.TempAddrTTL)

		// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ hole punching —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
		for _, timeout := range []time.Duration{5 * time.Second, 10 * time.Second, 15 * time.Second} {
			hpCtx, hpCancel := context.WithTimeout(ctx, timeout)

			// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			if err := node.Connect(hpCtx, p); err == nil {
				hpCancel()
				log.Printf("[connect] –£—Å–ø–µ—à–Ω—ã–π Hole Punch —Å —Ç–∞–π–º–∞—É—Ç–æ–º %v!", timeout)
				return nil
			} else {
				log.Printf("[connect] holepunch attempt (%v) -> %v", timeout, err)
			}
			hpCancel()

			// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
			time.Sleep(1 * time.Second)
		}
	}

	// 3: –î–∞–µ–º AutoRelay –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É
	time.Sleep(1 * time.Second)
	arCtx, arCancel := context.WithTimeout(ctx, 5*time.Second)
	if err := node.Connect(arCtx, p); err == nil {
		arCancel()
		log.Println("[connect] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AutoRelay!")
		return nil
	} else {
		log.Printf("[connect] post-auto-relay connect -> %v", err)
	}
	arCancel()

	// 4: –Ø–≤–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ Relay
	for _, r := range relayAddrs {
		ma, err := multiaddr.NewMultiaddr(r + "/p2p-circuit/p2p/" + p.ID.String())
		if err != nil {
			log.Printf("[relay] bad relay addr %s: %v", r, err)
			continue
		}
		pi := peer.AddrInfo{ID: p.ID, Addrs: []multiaddr.Multiaddr{ma}}
		if err := dialWithTimeout(ctx, node, pi, 12*time.Second); err == nil {
			log.Printf("[relay] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —è–≤–Ω—ã–π Relay: %s", r)
			return nil
		} else {
			log.Printf("[relay] dial via %s -> %v", r, err)
		}
	}

	// 5: –¶–∏–∫–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
	for i := 1; i <= 3; i++ {
		wait := time.Duration(math.Pow(2.0, float64(i))) * time.Second
		wait += time.Duration(mrand.Intn(1000)) * time.Millisecond // Jitter
		log.Printf("[retry] –ü–æ–ø—ã—Ç–∫–∞ #%d, –∂–¥–µ–º %v", i, wait)
		select {
		case <-time.After(wait):
		case <-ctx.Done():
			return ctx.Err()
		}

		if pi, err := refreshPeerAddrs(ctx, kademliaDHT, p); err == nil {
			p = pi
		}

		if err := dialWithTimeout(ctx, node, p, 8*time.Second); err == nil {
			log.Println("[retry] –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ!")
			return nil
		}
	}

	return errors.New("–≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
}

// ---------- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∏–º–∞ —á–µ—Ä–µ–∑ relay ----------

func createStreamViaRelay(ctx context.Context, node host.Host, peerID peer.ID, protocolID string, relayAddrs []string) (network.Stream, error) {
	log.Printf("[relay] üîÑ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ relay –¥–ª—è –ø–∏—Ä–∞ %s", peerID)

	// –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π relay
	for _, relayAddr := range relayAddrs {
		log.Printf("[relay] üîç –ü—Ä–æ–±—É–µ–º relay: %s", relayAddr)

		// –ü–∞—Ä—Å–∏–º relay –∞–¥—Ä–µ—Å
		relayInfo, err := peer.AddrInfoFromString(relayAddr)
		if err != nil {
			log.Printf("[relay] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ relay –∞–¥—Ä–µ—Å–∞: %v", err)
			continue
		}

		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ relay
		if err := node.Connect(ctx, *relayInfo); err != nil {
			log.Printf("[relay] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ relay %s: %v", relayInfo.ID, err)
			continue
		}

		log.Printf("[relay] ‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ relay: %s", relayInfo.ID)

		// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ relay
		relayStream, err := node.NewStream(ctx, peerID, protocol.ID(protocolID))
		if err != nil {
			log.Printf("[relay] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ relay %s: %v", relayInfo.ID, err)
			continue
		}

		log.Printf("[relay] ‚úÖ –°—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ relay %s!", relayInfo.ID)
		return relayStream, nil
	}

	return nil, errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–º –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω relay")
}

// ---------- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π relay —á–µ—Ä–µ–∑ bootstrap ----------

func forceRelayConnection(ctx context.Context, node host.Host, peerID peer.ID, protocolID string) (network.Stream, error) {
	log.Printf("[force-relay] üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π relay —á–µ—Ä–µ–∑ bootstrap –¥–ª—è –ø–∏—Ä–∞ %s", peerID)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º bootstrap –ø–∏—Ä—ã –∫–∞–∫ relay
	bootstrapPeers := []string{
		"/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN",
		"/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa",
		"/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb",
		"/dnsaddr/bootstrap.libp2p.io/p2p/QmaCpDMGvV2BGHeYERUEnRQAwe3N8SzbUtfsmvsqQLuvuJ",
	}

	for _, bootstrapAddr := range bootstrapPeers {
		log.Printf("[force-relay] üîç –ü—Ä–æ–±—É–µ–º bootstrap: %s", bootstrapAddr)

		// –ü–∞—Ä—Å–∏–º bootstrap –∞–¥—Ä–µ—Å
		bootstrapInfo, err := peer.AddrInfoFromString(bootstrapAddr)
		if err != nil {
			log.Printf("[force-relay] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bootstrap –∞–¥—Ä–µ—Å–∞: %v", err)
			continue
		}

		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ bootstrap
		if err := node.Connect(ctx, *bootstrapInfo); err != nil {
			log.Printf("[force-relay] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap %s: %v", bootstrapInfo.ID, err)
			continue
		}

		log.Printf("[force-relay] ‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ bootstrap: %s", bootstrapInfo.ID)

		// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ bootstrap –∫–∞–∫ relay
		relayStream, err := node.NewStream(ctx, peerID, protocol.ID(protocolID))
		if err != nil {
			log.Printf("[force-relay] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ bootstrap %s: %v", bootstrapInfo.ID, err)
			continue
		}

		log.Printf("[force-relay] ‚úÖ –°—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ bootstrap %s!", bootstrapInfo.ID)
		return relayStream, nil
	}

	return nil, errors.New("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–º –Ω–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω bootstrap")
}

// ---------- –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π hole punching ----------

func bidirectionalHolePunch(ctx context.Context, node host.Host, remotePeer peer.ID) {

	// –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–∏—Ä–∞
	remoteAddrs := node.Peerstore().Addrs(remotePeer)
	if len(remoteAddrs) == 0 {
		return
	}

	// –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π hole punching
	for _, timeout := range []time.Duration{3 * time.Second, 5 * time.Second, 8 * time.Second} {
		select {
		case <-ctx.Done():
			return
		default:
			// –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
			hpCtx, hpCancel := context.WithTimeout(ctx, timeout)

			// –°–æ–∑–¥–∞–µ–º AddrInfo –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
			addrInfo := peer.AddrInfo{
				ID:    remotePeer,
				Addrs: remoteAddrs,
			}

			if err := node.Connect(hpCtx, addrInfo); err == nil {
				hpCancel()

				// –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
				go tryCreateStreamAfterHolePunch(ctx, node, remotePeer)
				return
			} else {
			}

			hpCancel()
			time.Sleep(500 * time.Millisecond)
		}
	}

}

// ---------- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ hole punching ----------

func tryCreateStreamAfterHolePunch(ctx context.Context, node host.Host, remotePeer peer.ID) {

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	time.Sleep(1 * time.Second)

	// –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∏–º
	stream, err := node.NewStream(ctx, remotePeer, protocol.ID(protocolID))
	if err != nil {
		return
	}

	log.Printf("[post-holepunch] ‚úÖ –°—Ç—Ä–∏–º —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ hole punching!")
	log.Printf("[post-holepunch] üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %s", stream.Conn().LocalMultiaddr())
	log.Printf("[post-holepunch] üåê –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: %s", stream.Conn().RemoteMultiaddr())
	log.Printf("[post-holepunch] üîí –ü—Ä–æ—Ç–æ–∫–æ–ª: %s", stream.Protocol())

	// –ó–∞–ø—É—Å–∫–∞–µ–º —á–∞—Ç
	log.Println("[post-holepunch] üéâ –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç –ø–æ—Å–ª–µ hole punching!")
	runChat(stream)
}
