package main

import (
	"bufio"
	"context"
	"crypto/rand"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/ipfs/go-cid"
	"github.com/libp2p/go-libp2p"
	dht "github.com/libp2p/go-libp2p-kad-dht"
	"github.com/libp2p/go-libp2p/core/crypto"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
	"github.com/libp2p/go-libp2p/p2p/discovery/routing"
	dutil "github.com/libp2p/go-libp2p/p2p/discovery/util"
	"github.com/libp2p/go-libp2p/p2p/host/autorelay"
	noise "github.com/libp2p/go-libp2p/p2p/security/noise"
	tls "github.com/libp2p/go-libp2p/p2p/security/tls"
	"github.com/multiformats/go-multihash"

	quic "github.com/libp2p/go-libp2p/p2p/transport/quic"
	tcp "github.com/libp2p/go-libp2p/p2p/transport/tcp"
	webrtc "github.com/libp2p/go-libp2p/p2p/transport/webrtc"
	ws "github.com/libp2p/go-libp2p/p2p/transport/websocket"
)

const protocolID = "/p2p-chat/1.0.0"
const appPrefix = "owlwhisper" // –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è Rendezvous

// --- Helper-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CID –∏–∑ –Ω–∏–∫–∞ ---
func getCIDForNick(nick string) (cid.Cid, error) {
	pref := cid.Prefix{
		Version:  1,
		Codec:    cid.Raw,
		MhType:   multihash.SHA2_256,
		MhLength: -1,
	}
	c, err := pref.Sum([]byte(nick))
	if err != nil {
		return cid.Undef, err
	}
	return c, nil
}

func main() {
	// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ---
	myNick := flag.String("my-nick", "", "–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")

	findNick := flag.String("find-nick", "", "–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞")
	findPeerID := flag.String("find-peer-id", "", "Peer ID –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞")

	// –ë—É–ª–µ–≤—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
	useRendezvous := flag.Bool("find-rendezvous", true, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Rendezvous –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–∫—É")
	useCID := flag.Bool("find-cid", true, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CID –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∏–∫—É")

	forcePrivate := flag.Bool("forcePrivate", true, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞ NAT")
	forcePublic := flag.Bool("forcePublic", false, "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ NAT")

	flag.Parse()

	if *myNick == "" {
		log.Fatalln("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –Ω–∏–∫ —Å –ø–æ–º–æ—â—å—é —Ñ–ª–∞–≥–∞ -my-nick")
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –ø–æ–∏—Å–∫
	isDiscovering := *findNick != "" || *findPeerID != ""

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	priv, _, err := crypto.GenerateKeyPairWithReader(crypto.RSA, 2048, rand.Reader)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: %v", err)
	}

	// --- –°–±–æ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ Relay-—É–∑–ª–æ–≤ ---
	staticRelaysStrings := []string{
		"/dns4/relay.dev.svcs.d.foundation/tcp/443/wss/p2p/12D3KooWCKd2fU1g4k15u3J5i6pGk26h3g68d3amEa2S71G5v1jS",
	}
	var allRelays []peer.AddrInfo
	for _, addrStr := range staticRelaysStrings {
		pi, err := peer.AddrInfoFromString(addrStr)
		if err != nil {
			log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π relay-–∞–¥—Ä–µ—Å: %v", err)
			continue
		}
		allRelays = append(allRelays, *pi)
	}
	bootstrapPeers := dht.GetDefaultBootstrapPeerAddrInfos()
	allRelays = append(allRelays, bootstrapPeers...)
	log.Printf("üîó –í—Å–µ–≥–æ relay-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: %d (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ: %d + bootstrap: %d)",
		len(allRelays), len(staticRelaysStrings), len(bootstrapPeers))

	var kademliaDHT *dht.IpfsDHT

	// --- "–£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–∞—è" –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö–æ—Å—Ç–∞ ---
	opts := []libp2p.Option{
		libp2p.Identity(priv),
		libp2p.ListenAddrStrings(
			"/ip4/0.0.0.0/tcp/0",
			"/ip4/0.0.0.0/tcp/0/ws",
			"/ip4/0.0.0.0/udp/0/quic-v1",
			"/ip4/0.0.0.0/udp/0/webrtc-direct",
		),
		// –Ø–≤–Ω–æ –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã
		libp2p.Transport(tcp.NewTCPTransport),
		libp2p.Transport(quic.NewTransport),
		libp2p.Transport(ws.New),
		libp2p.Transport(webrtc.New),
		// –î–≤–æ–π–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
		libp2p.Security(noise.ID, noise.New),
		libp2p.Security(tls.ID, tls.New),
		// –í—Å–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±—Ö–æ–¥–∞ NAT
		libp2p.NATPortMap(),
		libp2p.EnableHolePunching(),
		libp2p.EnableAutoNATv2(),
		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Relay
		libp2p.EnableRelay(),
		// –£–∑–µ–ª —Å–∞–º –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–ª–µ–π, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç, —á—Ç–æ –æ–Ω –∑–∞ NAT
		libp2p.EnableAutoRelayWithStaticRelays(allRelays),
		libp2p.EnableAutoRelayWithPeerSource(func(ctx context.Context, numPeers int) <-chan peer.AddrInfo {
			ch := make(chan peer.AddrInfo)
			go func() {
				defer close(ch)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ DHT
				if kademliaDHT == nil {
					return
				}

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º routing table —Å–∞–º–æ–≥–æ DHT –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ä–æ–≤.
				for _, pi := range kademliaDHT.RoutingTable().ListPeers() {
					if numPeers <= 0 {
						break
					}
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∞–¥—Ä–µ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏—Ä–∞
					addrs := kademliaDHT.Host().Peerstore().Addrs(pi)
					if len(addrs) > 0 {
						ch <- peer.AddrInfo{ID: pi, Addrs: addrs}
						numPeers--
					}
				}
			}()
			return ch
		},
			autorelay.WithBootDelay(2*time.Second),
			autorelay.WithMaxCandidates(10),
		),
	}

	if *forcePrivate {
		opts = append(opts, libp2p.ForceReachabilityPrivate())
	} else if *forcePublic {
		opts = append(opts, libp2p.ForceReachabilityPublic())
	}

	node, err := libp2p.New(opts...)

	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞: %v", err)
	}
	defer node.Close()

	log.Printf("[*] ID –Ω–∞—à–µ–≥–æ —É–∑–ª–∞: %s", node.ID())
	log.Println("[*] –ù–∞—à–∏ –∞–¥—Ä–µ—Å–∞:")
	for _, addr := range node.Addrs() {
		fmt.Printf("    - %s\n", addr)
	}
	log.Printf("[*] –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º —Å–µ–±—è –ø–æ–¥ –Ω–∏–∫–æ–º: %s", *myNick)
	fmt.Println()

	// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DHT –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è ---
	log.Println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DHT...")
	kademliaDHT, err = dht.New(ctx, node, dht.Mode(dht.ModeServer))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DHT: %v", err)
	}
	if err = kademliaDHT.Bootstrap(ctx); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ bootstrap DHT: %v", err)
	}

	var wg sync.WaitGroup
	for _, peerAddr := range bootstrapPeers {
		wg.Add(1)
		go func(pi peer.AddrInfo) {
			defer wg.Done()
			ctxConnect, cancelConnect := context.WithTimeout(ctx, 15*time.Second)
			defer cancelConnect()
			if err := node.Connect(ctxConnect, pi); err != nil {
				log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ bootstrap-–ø–∏—Ä—É %s: %s", pi.ID.ShortString(), err)
			} else {
				log.Printf("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bootstrap-–ø–∏—Ä—É: %s", pi.ID.ShortString())
			}
		}(peerAddr)
	}
	wg.Wait()

	// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
	node.SetStreamHandler(protocolID, handleStream)
	routingDiscovery := routing.NewRoutingDiscovery(kademliaDHT)

	// --- –°–ª–æ–π –∞–Ω–æ–Ω—Å–∞ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω) ---
	go func() {
		rendezvousPoint := fmt.Sprintf("%s-%s", appPrefix, *myNick)
		myNickCID, err := getCIDForNick(*myNick)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CID –¥–ª—è —Å–≤–æ–µ–≥–æ –Ω–∏–∫–∞: %v", err)
			return // –ù–µ –º–æ–∂–µ–º –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ CID
		}

		ticker := time.NewTicker(20 * time.Second)
		defer ticker.Stop()
		for {
			log.Printf("üì¢ –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º —Å–µ–±—è –ø–æ Rendezvous: %s", rendezvousPoint)
			dutil.Advertise(ctx, routingDiscovery, rendezvousPoint)

			log.Printf("üì¢ –ê–Ω–æ–Ω—Å–∏—Ä—É–µ–º —Å–µ–±—è –ø–æ CID: %s", myNickCID)
			if err := kademliaDHT.Provide(ctx, myNickCID, true); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∞–Ω–æ–Ω—Å–∞ –ø–æ CID: %v", err)
			}

			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
			}
		}
	}()

	log.Println("‚úÖ –°–ª–æ–π –∞–Ω–æ–Ω—Å–∞ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")

	// --- –°–ª–æ–π –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ---
	if isDiscovering {
		peerChan := make(chan peer.AddrInfo)
		var searchWg sync.WaitGroup

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ Peer ID
		if *findPeerID != "" {
			searchWg.Add(1)
			go func() {
				defer searchWg.Done()
				log.Printf("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ Peer ID: %s", *findPeerID)
				peerID, err := peer.Decode(*findPeerID)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Peer ID: %v", err)
					return
				}

				// FindPeer –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω—ã–º, –¥–∞–µ–º –µ–º—É –≤—Ä–µ–º—è
				ctxFind, cancelFind := context.WithTimeout(ctx, 2*time.Minute)
				defer cancelFind()
				pi, err := kademliaDHT.FindPeer(ctxFind, peerID)
				if err != nil {
					log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∏—Ä –ø–æ Peer ID %s: %v", *findPeerID, err)
					return
				}
				log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω –ø–∏—Ä –ø–æ Peer ID: %s", pi.ID)
				peerChan <- pi
			}()
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –ù–∏–∫—É
		if *findNick != "" {
			// –ü–æ–∏—Å–∫ –ø–æ Rendezvous
			if *useRendezvous {
				searchWg.Add(1)
				go func() {
					defer searchWg.Done()
					rendezvousPoint := fmt.Sprintf("%s-%s", appPrefix, *findNick)
					log.Printf("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ Rendezvous: %s", rendezvousPoint)
					foundPeers, err := routingDiscovery.FindPeers(ctx, rendezvousPoint)
					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ Rendezvous: %v", err)
						return
					}
					for p := range foundPeers {
						if p.ID == node.ID() {
							continue
						}
						log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω –ø–∏—Ä —á–µ—Ä–µ–∑ Rendezvous: %s", p.ID)
						peerChan <- p
					}
				}()
			}
			// –ü–æ–∏—Å–∫ –ø–æ CID
			if *useCID {
				searchWg.Add(1)
				go func() {
					defer searchWg.Done()
					nickCID, err := getCIDForNick(*findNick)
					if err != nil {
						log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CID –¥–ª—è –ø–æ–∏—Å–∫–∞: %v", err)
						return
					}
					log.Printf("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ CID: %s", nickCID)
					providers := kademliaDHT.FindProvidersAsync(ctx, nickCID, 0)
					for p := range providers {
						if p.ID == node.ID() {
							continue
						}
						log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω –ø–∏—Ä —á–µ—Ä–µ–∑ CID: %s", p.ID)
						peerChan <- p
					}
				}()
			}
		}

		// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤
		go func() {
			searchWg.Wait()
			close(peerChan)
		}()

		// --- –õ–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º ---
		var connectedPeer peer.ID
		var connectedPeerLock sync.Mutex

		for p := range peerChan {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –ª–∏ –º—ã —É–∂–µ –∫ –∫–æ–º—É-—Ç–æ
			connectedPeerLock.Lock()
			if connectedPeer != "" {
				connectedPeerLock.Unlock()
				break
			}
			connectedPeerLock.Unlock()

			log.Printf("üåÄ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–∏—Ä—É: %s. –ê–¥—Ä–µ—Å–∞: %v", p.ID, p.Addrs)
			ctxConnect, cancelConnect := context.WithTimeout(ctx, 90*time.Second)
			if err := node.Connect(ctxConnect, p); err != nil {
				log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ %s: %v", p.ID.ShortString(), err)
				cancelConnect()
				continue
			}
			cancelConnect()

			log.Printf("‚úÖ –£–°–ü–ï–®–ù–û–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï —Å %s!", p.ID.ShortString())
			streamCtx, streamCancel := context.WithTimeout(ctx, 60*time.Second)
			stream, err := node.NewStream(streamCtx, p.ID, protocolID)
			streamCancel()

			if err != nil {
				log.Printf("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∏–º: %v", err)
				continue
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –º—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ø—ã—Ç–∫–∏
			connectedPeerLock.Lock()
			connectedPeer = p.ID
			connectedPeerLock.Unlock()

			log.Printf("   ‚úÖ –°—Ç—Ä–∏–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑: %s", stream.Conn().RemoteMultiaddr())
			log.Println("üéâ –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç!")
			runChat(stream)
			goto End // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —á–∞—Ç–∞
		}
	}

End:
	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C), –µ—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ—Å–ª–µ —á–∞—Ç–∞
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM)
	<-ch
	fmt.Println("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º —É–∑–µ–ª...")
}

func handleStream(stream network.Stream) {
	remotePeer := stream.Conn().RemotePeer()
	log.Printf("üì° –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º –æ—Ç %s", remotePeer.ShortString())
	runChat(stream)
}

func runChat(stream network.Stream) {
	reader := bufio.NewReader(stream)
	writer := bufio.NewWriter(stream)
	out := make(chan string)
	done := make(chan struct{})

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ —Å–µ—Ç–∏
	go func() {
		defer close(done)
		for {
			str, err := reader.ReadString('\n')
			if err != nil {
				if err != io.EOF {
					log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç %s: %v", stream.Conn().RemotePeer().ShortString(), err)
				}
				return
			}
			fmt.Printf("\x1b[32m%s\x1b[0m> %s", stream.Conn().RemotePeer().ShortString(), str)
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Ç—å
	go func() {
		for msg := range out {
			_, err := writer.WriteString(msg)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è %s: %v", stream.Conn().RemotePeer().ShortString(), err)
				return
			}
			err = writer.Flush()
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ flush –¥–ª—è %s: %v", stream.Conn().RemotePeer().ShortString(), err)
				return
			}
		}
	}()

	// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ stdin
	stdReader := bufio.NewReader(os.Stdin)
	for {
		select {
		case <-done:
			log.Println("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
			close(out)
			return
		default:
			fmt.Print("> ")
			sendData, err := stdReader.ReadString('\n')
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è stdin: %v", err)
				close(out)
				return
			}
			// –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
			select {
			case out <- sendData:
			case <-done:
			}
		}
	}
}
