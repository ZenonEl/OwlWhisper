package tests

import (
	"fmt"
	"sync"
	"testing"
	"time"

	"OwlWhisper/api"
)

// TestTwoClientsCommunication —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—â–µ–Ω–∏–µ –¥–≤—É—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ API
func TestTwoClientsCommunication(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	client1Config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_client1.db",
		LogLevel:       "debug",
		MaxMessageSize: 1024,
		HistoryLimit:   50,
	}

	client1, err := api.NewOwlWhisperAPI(client1Config)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç 1: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	client2Config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_client2.db",
		LogLevel:       "debug",
		MaxMessageSize: 1024,
		HistoryLimit:   50,
	}

	client2, err := api.NewOwlWhisperAPI(client2Config)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç 2: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞
	if err := client1.Start(); err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç 1: %v", err)
	}
	defer client1.Stop()

	if err := client2.Start(); err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç 2: %v", err)
	}
	defer client2.Stop()

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(3 * time.Second)

	// –ü–æ–ª—É—á–∞–µ–º PeerID –∫–ª–∏–µ–Ω—Ç–æ–≤
	client1ID := client1.GetMyPeerID()
	client2ID := client2.GetMyPeerID()

	t.Logf("üîå –ö–ª–∏–µ–Ω—Ç 1: %s", client1ID)
	t.Logf("üîå –ö–ª–∏–µ–Ω—Ç 2: %s", client2ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	status1 := client1.GetConnectionStatus()
	status2 := client2.GetConnectionStatus()

	t.Logf("üìä –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ 1: %+v", status1)
	t.Logf("üìä –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ 2: %+v", status2)

	// –ñ–¥–µ–º –ø–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç—ã –Ω–∞–π–¥—É—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ (—á–µ—Ä–µ–∑ DHT)
	t.Log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∏—Ä–æ–≤...")
	timeout := time.After(30 * time.Second)
	peersFound := false

	for !peersFound {
		select {
		case <-timeout:
			t.Log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∏—Ä–æ–≤")
			break
		default:
			peers1 := client1.GetConnectedPeers()
			peers2 := client2.GetConnectedPeers()

			if len(peers1) > 0 || len(peers2) > 0 {
				peersFound = true
				t.Logf("‚úÖ –ü–∏—Ä—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã! –ö–ª–∏–µ–Ω—Ç 1: %d, –ö–ª–∏–µ–Ω—Ç 2: %d", len(peers1), len(peers2))
			} else {
				time.Sleep(2 * time.Second)
			}
		}
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
	t.Log("üí¨ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...")

	var wg sync.WaitGroup
	wg.Add(2)

	// –ö–ª–∏–µ–Ω—Ç 1 —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	go func() {
		defer wg.Done()
		messageCount := 0
		timeout := time.After(20 * time.Second)

		for {
			select {
			case msg := <-client1.MessageChannel():
				messageCount++
				t.Logf("üì® –ö–ª–∏–µ–Ω—Ç 1 –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ %d: %s –æ—Ç %s", messageCount, msg.Text, msg.Sender)
				if messageCount >= 3 {
					return
				}
			case <-timeout:
				t.Log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 1")
				return
			}
		}
	}()

	// –ö–ª–∏–µ–Ω—Ç 2 —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	go func() {
		defer wg.Done()
		messageCount := 0
		timeout := time.After(20 * time.Second)

		for {
			select {
			case msg := <-client2.MessageChannel():
				messageCount++
				t.Logf("üì® –ö–ª–∏–µ–Ω—Ç 2 –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ %d: %s –æ—Ç %s", messageCount, msg.Text, msg.Sender)
				if messageCount >= 3 {
					return
				}
			case <-timeout:
				t.Log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 2")
				return
			}
		}
	}()

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ—Ä—É—Ç–∏–Ω
	time.Sleep(1 * time.Second)

	// –ö–ª–∏–µ–Ω—Ç 1 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ
	t.Log("üì§ –ö–ª–∏–µ–Ω—Ç 1 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ...")
	broadcastRequest := api.SendMessageRequest{
		Text:     "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 1!",
		ChatType: "broadcast",
	}

	if err := client1.SendMessage(broadcastRequest); err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ broadcast –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 1: %v", err)
	} else {
		t.Log("‚úÖ Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 1 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	time.Sleep(2 * time.Second)

	// –ö–ª–∏–µ–Ω—Ç 2 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ
	t.Log("üì§ –ö–ª–∏–µ–Ω—Ç 2 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ...")
	broadcastRequest = api.SendMessageRequest{
		Text:     "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 2!",
		ChatType: "broadcast",
	}

	if err := client2.SendMessage(broadcastRequest); err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ broadcast –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 2: %v", err)
	} else {
		t.Log("‚úÖ Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 2 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	time.Sleep(2 * time.Second)

	// –ö–ª–∏–µ–Ω—Ç 1 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É 2
	t.Log("üì§ –ö–ª–∏–µ–Ω—Ç 1 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É 2...")
	privateRequest := api.SendMessageRequest{
		Text:        "–ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 1",
		ChatType:    "private",
		RecipientID: client2ID,
	}

	if err := client1.SendMessage(privateRequest); err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 1: %v", err)
	} else {
		t.Log("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ 1 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
	wg.Wait()
	t.Log("‚úÖ –¢–µ—Å—Ç –æ–±—â–µ–Ω–∏—è –¥–≤—É—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	t.Log("üìö –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π...")

	history1, err := client1.GetHistory(10)
	if err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ 1: %v", err)
	} else {
		t.Logf("üìö –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞ 1: %d —Å–æ–æ–±—â–µ–Ω–∏–π", len(history1.Messages))
		for i, msg := range history1.Messages {
			t.Logf("  %d: %s - %s", i+1, msg.Sender, msg.Text)
		}
	}

	history2, err := client2.GetHistory(10)
	if err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ 2: %v", err)
	} else {
		t.Logf("üìö –ò—Å—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–∞ 2: %d —Å–æ–æ–±—â–µ–Ω–∏–π", len(history2.Messages))
		for i, msg := range history2.Messages {
			t.Logf("  %d: %s - %s", i+1, msg.Sender, msg.Text)
		}
	}
}

// TestMultipleClients —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
func TestMultipleClients(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
	clients := make([]api.OwlWhisperAPI, 3)
	configs := []*api.APIConfig{
		{
			EnableTUI:      false,
			DatabasePath:   "test_multi1.db",
			LogLevel:       "debug",
			MaxMessageSize: 1024,
			HistoryLimit:   50,
		},
		{
			EnableTUI:      false,
			DatabasePath:   "test_multi2.db",
			LogLevel:       "debug",
			MaxMessageSize: 1024,
			HistoryLimit:   50,
		},
		{
			EnableTUI:      false,
			DatabasePath:   "test_multi3.db",
			LogLevel:       "debug",
			MaxMessageSize: 1024,
			HistoryLimit:   50,
		},
	}

	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
	for i := 0; i < 3; i++ {
		client, err := api.NewOwlWhisperAPI(configs[i])
		if err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç %d: %v", i+1, err)
		}

		if err := client.Start(); err != nil {
			t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç %d: %v", i+1, err)
		}
		defer client.Stop()

		clients[i] = client
		t.Logf("‚úÖ –ö–ª–∏–µ–Ω—Ç %d –∑–∞–ø—É—â–µ–Ω: %s", i+1, client.GetMyPeerID())
	}

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(5 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
	t.Log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤...")
	for i, client := range clients {
		peers := client.GetConnectedPeers()
		t.Logf("üìä –ö–ª–∏–µ–Ω—Ç %d –≤–∏–¥–∏—Ç %d –ø–∏—Ä–æ–≤", i+1, len(peers))
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	t.Log("üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
	for i, client := range clients {
		request := api.SendMessageRequest{
			Text:     fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %d", i+1),
			ChatType: "broadcast",
		}

		if err := client.SendMessage(request); err != nil {
			t.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %d: %v", i+1, err)
		} else {
			t.Logf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ %d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", i+1)
		}

		time.Sleep(1 * time.Second)
	}

	// –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	time.Sleep(3 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	t.Log("üìö –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —É –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
	for i, client := range clients {
		history, err := client.GetHistory(10)
		if err != nil {
			t.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ %d: %v", i+1, err)
		} else {
			t.Logf("üìö –ö–ª–∏–µ–Ω—Ç %d: %d —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏", i+1, len(history.Messages))
		}
	}

	t.Log("‚úÖ –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// TestClientReconnection —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
func TestClientReconnection(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
	config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_reconnect.db",
		LogLevel:       "debug",
		MaxMessageSize: 1024,
		HistoryLimit:   50,
	}

	client, err := api.NewOwlWhisperAPI(config)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º
	if err := client.Start(); err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç: %v", err)
	}

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(3 * time.Second)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	request := api.SendMessageRequest{
		Text:     "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
		ChatType: "broadcast",
	}

	if err := client.SendMessage(request); err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
	t.Log("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç...")
	client.Stop()

	// –ñ–¥–µ–º
	time.Sleep(2 * time.Second)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞
	t.Log("üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç...")
	if err := client.Start(); err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç: %v", err)
	}
	defer client.Stop()

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(3 * time.Second)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	request = api.SendMessageRequest{
		Text:     "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
		ChatType: "broadcast",
	}

	if err := client.SendMessage(request); err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	} else {
		t.Log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
	history, err := client.GetHistory(10)
	if err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	} else {
		t.Logf("üìö –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %d —Å–æ–æ–±—â–µ–Ω–∏–π", len(history.Messages))
	}

	t.Log("‚úÖ –¢–µ—Å—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
}
