package tests

import (
	"sync"
	"testing"
	"time"

	"OwlWhisper/api"
)

// TestAPIBasicFunctionality —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å API
func TestAPIBasicFunctionality(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º API —Å —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
	config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_api.db",
		LogLevel:       "debug",
		MaxMessageSize: 1024,
		HistoryLimit:   50,
	}

	owlAPI, err := api.NewOwlWhisperAPI(config)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º API
	if err := owlAPI.Start(); err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API: %v", err)
	}
	defer owlAPI.Stop()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∑–∞–ø—É—â–µ–Ω
	peerID := owlAPI.GetMyPeerID()
	if peerID == "" {
		t.Error("PeerID –Ω–µ –ø–æ–ª—É—á–µ–Ω")
	}
	t.Logf("‚úÖ API –∑–∞–ø—É—â–µ–Ω —Å PeerID: %s", peerID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	status := owlAPI.GetConnectionStatus()
	if status.MyPeerID != peerID {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π PeerID –≤ —Å—Ç–∞—Ç—É—Å–µ: %s != %s", status.MyPeerID, peerID)
	}
	t.Logf("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %+v", status)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤
	peers := owlAPI.GetConnectedPeers()
	t.Logf("‚úÖ –°–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤: %d", len(peers))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
	history, err := owlAPI.GetHistory(10)
	if err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
	} else {
		t.Logf("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %d", len(history.Messages))
	}
}

// TestAPIMessageSending —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
func TestAPIMessageSending(t *testing.T) {
	config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_messages.db",
		LogLevel:       "debug",
		MaxMessageSize: 1024,
		HistoryLimit:   50,
	}

	owlAPI, err := api.NewOwlWhisperAPI(config)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API: %v", err)
	}

	if err := owlAPI.Start(); err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API: %v", err)
	}
	defer owlAPI.Stop()

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(2 * time.Second)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ
	request := api.SendMessageRequest{
		Text:     "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ API —Ç–µ—Å—Ç–∞",
		ChatType: "broadcast",
	}

	if err := owlAPI.SendMessage(request); err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ broadcast —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	} else {
		t.Log("‚úÖ Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–µ–±–µ)
	request = api.SendMessageRequest{
		Text:        "–ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
		ChatType:    "private",
		RecipientID: owlAPI.GetMyPeerID(),
	}

	if err := owlAPI.SendMessage(request); err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	} else {
		t.Log("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	// –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	time.Sleep(1 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
	history, err := owlAPI.GetHistory(10)
	if err != nil {
		t.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
	} else {
		t.Logf("‚úÖ –í –∏—Å—Ç–æ—Ä–∏–∏ %d —Å–æ–æ–±—â–µ–Ω–∏–π", len(history.Messages))
		for i, msg := range history.Messages {
			t.Logf("  %d: %s - %s", i+1, msg.Sender, msg.Text)
		}
	}
}

// TestAPIMessageChannels —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–∏—Ä–æ–≤
func TestAPIMessageChannels(t *testing.T) {
	config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_channels.db",
		LogLevel:       "debug",
		MaxMessageSize: 1024,
		HistoryLimit:   50,
	}

	owlAPI, err := api.NewOwlWhisperAPI(config)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API: %v", err)
	}

	if err := owlAPI.Start(); err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API: %v", err)
	}
	defer owlAPI.Stop()

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(2 * time.Second)

	var wg sync.WaitGroup
	wg.Add(2)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π
	go func() {
		defer wg.Done()
		messageCount := 0
		timeout := time.After(5 * time.Second)

		for {
			select {
			case msg := <-owlAPI.MessageChannel():
				messageCount++
				t.Logf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ %d: %s", messageCount, msg.Text)
				if messageCount >= 2 {
					return
				}
			case <-timeout:
				t.Log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
				return
			}
		}
	}()

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –ø–∏—Ä–æ–≤
	go func() {
		defer wg.Done()
		peerCount := 0
		timeout := time.After(5 * time.Second)

		for {
			select {
			case peers := <-owlAPI.PeerChannel():
				peerCount++
				t.Logf("üîå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏—Ä–æ–≤ %d: %d –ø–∏—Ä–æ–≤", peerCount, len(peers))
				if peerCount >= 3 {
					return
				}
			case <-timeout:
				t.Log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–∏—Ä–æ–≤")
				return
			}
		}
	}()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	time.Sleep(1 * time.Second)

	requests := []api.SendMessageRequest{
		{Text: "–°–æ–æ–±—â–µ–Ω–∏–µ 1 –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤", ChatType: "broadcast"},
		{Text: "–°–æ–æ–±—â–µ–Ω–∏–µ 2 –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤", ChatType: "broadcast"},
	}

	for i, request := range requests {
		if err := owlAPI.SendMessage(request); err != nil {
			t.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", i+1, err)
		} else {
			t.Logf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ %d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", i+1)
		}
		time.Sleep(500 * time.Millisecond)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
	wg.Wait()
	t.Log("‚úÖ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// TestAPIConfiguration —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
func TestAPIConfiguration(t *testing.T) {
	// –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	defaultConfig := api.DefaultAPIConfig()
	if defaultConfig.EnableTUI != true {
		t.Error("EnableTUI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true")
	}
	if defaultConfig.DatabasePath != "owlwhisper.db" {
		t.Error("DatabasePath –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–≤–µ—Ä–Ω—ã–π")
	}
	if defaultConfig.MaxMessageSize != 4096 {
		t.Error("MaxMessageSize –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–≤–µ—Ä–Ω—ã–π")
	}
	t.Log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")

	// –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	customConfig := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "custom_test.db",
		LogLevel:       "debug",
		MaxMessageSize: 2048,
		HistoryLimit:   25,
	}

	if customConfig.EnableTUI != false {
		t.Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")
	}
	if customConfig.MaxMessageSize != 2048 {
		t.Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π MaxMessageSize –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω")
	}
	t.Log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
}

// TestAPIMessageSizeLimit —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
func TestAPIMessageSizeLimit(t *testing.T) {
	config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_size_limit.db",
		LogLevel:       "debug",
		MaxMessageSize: 100, // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –ª–∏–º–∏—Ç
		HistoryLimit:   50,
	}

	owlAPI, err := api.NewOwlWhisperAPI(config)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API: %v", err)
	}

	if err := owlAPI.Start(); err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API: %v", err)
	}
	defer owlAPI.Stop()

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(2 * time.Second)

	// –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
	shortRequest := api.SendMessageRequest{
		Text:     "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
		ChatType: "broadcast",
	}

	if err := owlAPI.SendMessage(shortRequest); err != nil {
		t.Errorf("–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏: %v", err)
	} else {
		t.Log("‚úÖ –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
	}

	// –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞—é—â–µ–≥–æ –ª–∏–º–∏—Ç
	longText := ""
	for i := 0; i < 150; i++ {
		longText += "a"
	}
	longRequest := api.SendMessageRequest{
		Text:     longText,
		ChatType: "broadcast",
	}

	if err := owlAPI.SendMessage(longRequest); err == nil {
		t.Error("–î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
	} else {
		t.Log("‚úÖ –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
	}
}
