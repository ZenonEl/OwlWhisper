package tests

import (
	"fmt"
	"testing"
	"time"

	"OwlWhisper/api"
)

// TestFullWorkflow —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã API
func TestFullWorkflow(t *testing.T) {
	t.Log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã API...")

	// 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	t.Log("üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è...")
	config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_workflow.db",
		LogLevel:       "debug",
		MaxMessageSize: 2048,
		HistoryLimit:   100,
	}

	owlAPI, err := api.NewOwlWhisperAPI(config)
	if err != nil {
		t.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API: %v", err)
	}
	t.Log("‚úÖ API —Å–æ–∑–¥–∞–Ω")

	// 2. –ó–∞–ø—É—Å–∫
	t.Log("üìã –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ API...")
	if err := owlAPI.Start(); err != nil {
		t.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API: %v", err)
	}
	defer owlAPI.Stop()
	t.Log("‚úÖ API –∑–∞–ø—É—â–µ–Ω")

	// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	t.Log("üìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
	peerID := owlAPI.GetMyPeerID()
	if peerID == "" {
		t.Fatal("‚ùå PeerID –Ω–µ –ø–æ–ª—É—á–µ–Ω")
	}
	t.Logf("‚úÖ PeerID –ø–æ–ª—É—á–µ–Ω: %s", peerID)

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏
	time.Sleep(5 * time.Second)

	// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	t.Log("üìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
	status := owlAPI.GetConnectionStatus()
	if status.MyPeerID != peerID {
		t.Errorf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PeerID –≤ —Å—Ç–∞—Ç—É—Å–µ: %s != %s", status.MyPeerID, peerID)
	}
	t.Logf("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %+v", status)

	// 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
	t.Log("üìã –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
	messages := []api.SendMessageRequest{
		{Text: "–ü–µ—Ä–≤–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", ChatType: "broadcast"},
		{Text: "–í—Ç–æ—Ä–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", ChatType: "broadcast"},
		{Text: "–ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", ChatType: "private", RecipientID: peerID},
	}

	for i, request := range messages {
		if err := owlAPI.SendMessage(request); err != nil {
			t.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", i+1, err)
		} else {
			t.Logf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ %d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %s", i+1, request.Text)
		}
		time.Sleep(1 * time.Second)
	}

	// 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
	t.Log("üìã –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
	history, err := owlAPI.GetHistory(10)
	if err != nil {
		t.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
	} else {
		t.Logf("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞: %d —Å–æ–æ–±—â–µ–Ω–∏–π", len(history.Messages))
		for i, msg := range history.Messages {
			t.Logf("  %d: %s - %s", i+1, msg.Sender, msg.Text)
		}
	}

	// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∏—Ä–æ–≤
	t.Log("üìã –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∏—Ä–æ–≤...")
	peers := owlAPI.GetPeers()
	t.Logf("‚úÖ –°–ø–∏—Å–æ–∫ –ø–∏—Ä–æ–≤: %d", len(peers))
	for i, peer := range peers {
		t.Logf("  %d: %s (%s)", i+1, peer.Nickname, peer.Status)
	}

	// 8. –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–æ–≤
	t.Log("üìã –®–∞–≥ 8: –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–æ–≤...")
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
	messageReceived := make(chan bool, 1)
	go func() {
		timeout := time.After(10 * time.Second)
		select {
		case msg := <-owlAPI.MessageChannel():
			t.Logf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª: %s", msg.Text)
			messageReceived <- true
		case <-timeout:
			t.Log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª")
			messageReceived <- false
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–∏—Ä–æ–≤
	peerUpdateReceived := make(chan bool, 1)
	go func() {
		timeout := time.After(10 * time.Second)
		select {
		case peers := <-owlAPI.PeerChannel():
			t.Logf("üîå –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏—Ä–æ–≤ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª: %d", len(peers))
			peerUpdateReceived <- true
		case <-timeout:
			t.Log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏—Ä–æ–≤ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª")
			peerUpdateReceived <- false
		}
	}()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
	time.Sleep(2 * time.Second)
	if err := owlAPI.SendMessage(api.SendMessageRequest{
		Text:     "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤",
		ChatType: "broadcast",
	}); err != nil {
		t.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤: %v", err)
	}

	// –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
	msgResult := <-messageReceived
	peerResult := <-peerUpdateReceived

	if msgResult {
		t.Log("‚úÖ –ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
	} else {
		t.Log("‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ")
	}

	if peerResult {
		t.Log("‚úÖ –ö–∞–Ω–∞–ª –ø–∏—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
	} else {
		t.Log("‚ö†Ô∏è –ö–∞–Ω–∞–ª –ø–∏—Ä–æ–≤ –Ω–µ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ")
	}

	t.Log("üéâ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã API –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// TestAPIPerformance —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API
func TestAPIPerformance(t *testing.T) {
	t.Log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API...")

	config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_performance.db",
		LogLevel:       "info", // –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
		MaxMessageSize: 4096,
		HistoryLimit:   1000,
	}

	owlAPI, err := api.NewOwlWhisperAPI(config)
	if err != nil {
		t.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API: %v", err)
	}

	if err := owlAPI.Start(); err != nil {
		t.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API: %v", err)
	}
	defer owlAPI.Stop()

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(3 * time.Second)

	// –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
	t.Log("üì§ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
	startTime := time.Now()
	messageCount := 100

	for i := 0; i < messageCount; i++ {
		request := api.SendMessageRequest{
			Text:     fmt.Sprintf("–°–æ–æ–±—â–µ–Ω–∏–µ %d –¥–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", i+1),
			ChatType: "broadcast",
		}

		if err := owlAPI.SendMessage(request); err != nil {
			t.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", i+1, err)
		}
	}

	duration := time.Since(startTime)
	rate := float64(messageCount) / duration.Seconds()

	t.Logf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ %v", messageCount, duration)
	t.Logf("üìä –°–∫–æ—Ä–æ—Å—Ç—å: %.2f —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫", rate)

	// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
	t.Log("üìö –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏...")
	startTime = time.Now()
	
	history, err := owlAPI.GetHistory(messageCount)
	if err != nil {
		t.Errorf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err)
	} else {
		duration = time.Since(startTime)
		t.Logf("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è %d —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ %v", len(history.Messages), duration)
	}

	// –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	t.Log("üìä –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
	startTime = time.Now()
	
	for i := 0; i < 100; i++ {
		_ = owlAPI.GetConnectionStatus()
	}
	
	duration = time.Since(startTime)
	avgTime := duration / 100
	
	t.Logf("‚úÖ 100 –≤—ã–∑–æ–≤–æ–≤ GetConnectionStatus –∑–∞ %v (—Å—Ä–µ–¥–Ω–µ–µ: %v)", duration, avgTime)

	t.Log("üéâ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}

// TestAPIRobustness —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å API
func TestAPIRobustness(t *testing.T) {
	t.Log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ API...")

	config := &api.APIConfig{
		EnableTUI:      false,
		DatabasePath:   "test_robustness.db",
		LogLevel:       "debug",
		MaxMessageSize: 1024,
		HistoryLimit:   50,
	}

	// –¢–µ—Å—Ç 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	t.Log("üîÑ –¢–µ—Å—Ç 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
	for i := 0; i < 3; i++ {
		owlAPI, err := api.NewOwlWhisperAPI(config)
		if err != nil {
			t.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API (–∏—Ç–µ—Ä–∞—Ü–∏—è %d): %v", i+1, err)
		}

		if err := owlAPI.Start(); err != nil {
			t.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API (–∏—Ç–µ—Ä–∞—Ü–∏—è %d): %v", i+1, err)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç
		peerID := owlAPI.GetMyPeerID()
		if peerID == "" {
			t.Errorf("‚ùå PeerID –Ω–µ –ø–æ–ª—É—á–µ–Ω (–∏—Ç–µ—Ä–∞—Ü–∏—è %d)", i+1)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if err := owlAPI.SendMessage(api.SendMessageRequest{
			Text:     fmt.Sprintf("–¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ %d", i+1),
			ChatType: "broadcast",
		}); err != nil {
			t.Errorf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∏—Ç–µ—Ä–∞—Ü–∏—è %d): %v", i+1, err)
		}

		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
		owlAPI.Stop()
		t.Logf("‚úÖ –ò—Ç–µ—Ä–∞—Ü–∏—è %d –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", i+1)

		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
		time.Sleep(1 * time.Second)
	}

	// –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
	t.Log("üí¨ –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏...")
	owlAPI, err := api.NewOwlWhisperAPI(config)
	if err != nil {
		t.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å API –¥–ª—è —Ç–µ—Å—Ç–∞ —Ç–∏–ø–æ–≤: %v", err)
	}

	if err := owlAPI.Start(); err != nil {
		t.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API –¥–ª—è —Ç–µ—Å—Ç–∞ —Ç–∏–ø–æ–≤: %v", err)
	}
	defer owlAPI.Stop()

	// –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	time.Sleep(3 * time.Second)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
	messageTypes := []struct {
		text     string
		chatType string
		valid    bool
	}{
		{"Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ", "broadcast", true},
		{"Private —Å–æ–æ–±—â–µ–Ω–∏–µ", "private", true},
		{"Group —Å–æ–æ–±—â–µ–Ω–∏–µ", "group", true},
		{"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø", "unknown", false}, // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
	}

	for _, testCase := range messageTypes {
		request := api.SendMessageRequest{
			Text:        testCase.text,
			ChatType:    testCase.chatType,
			RecipientID: owlAPI.GetMyPeerID(), // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		}

		err := owlAPI.SendMessage(request)
		if testCase.valid && err != nil {
			t.Errorf("‚ùå –í–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (—Ç–∏–ø %s): %v", testCase.chatType, err)
		} else if !testCase.valid && err == nil {
			t.Errorf("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ (—Ç–∏–ø %s)", testCase.chatType)
		} else {
			t.Logf("‚úÖ –¢–µ—Å—Ç —Ç–∏–ø–∞ %s –ø—Ä–æ—à–µ–ª", testCase.chatType)
		}
	}

	t.Log("üéâ –¢–µ—Å—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
} 